(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(*

Woo and Lam public-key auth protocol (1992, computer)

A -> B: A
B -> A: N
A -> B: { N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Attack
Full agreement is true, but there is an attack !
(Indeed, the messages never mention B.)

*)

param N.
param N2.
param N3.
param N4.

type nonce [large,fixed].
type host [bounded].
type skey [bounded].
type pkey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].

fun pad(nonce):blocksize [compos].
fun concat2(host, pkey):blocksize [compos].

forall z:nonce, x2:host, y2:pkey;
	pad(z) <> concat2(x2,y2).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, sskgen, spkgen, sign, check, Psign, Psigncoll).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const A:host.
const B:host.

event beginA(host).
event beginAfull(host,host,nonce).
event endB(host, host, nonce).

query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginA(y).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginA(y).

let processA =
	in(c1, hostB0:host);
	event beginA(hostB0);
	out(c2, A);
	in(c3, n:nonce);
	event beginAfull(A, hostB0, n);
	new r1:seed;
	out(c4, sign(pad(n), skA, r1)).

let processB =
	in(c5, hostA0:host);
	new n:nonce;
	out(c6, n);
	in(c7, m:signature);
	out(c8, hostA0);
	in(c9, (=hostA0, pkA2:pkey, m4:signature));
	if check(concat2(hostA0, pkA2), pkS, m4) then
	if check(pad(n), pkA2, m) then
	(* OK *)
	if hostA0 = A then
	event endB(hostA0, B, n).


let processS =
	in(c10, hostA:host);
	find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
	let pka = Rkey[j2] in
	new r2:seed;
	out(c11, (hostA, pka, sign(concat2(hostA, pka), skS, r2))).

let processK =
	in(c12, (Khost: host, Kkey: pkey));
	let Rkey:pkey = 
		if Khost = A then pkA else
		if Khost = B then pkB else
		Kkey.

process 
	in(start, ());
	new rkA: keyseed;
	let pkA = spkgen(rkA) in
	let skA = sskgen(rkA) in
	new rkB: keyseed;
	let pkB = spkgen(rkB) in
	let skB = sskgen(rkB) in
	new rkS: keyseed;
	let pkS = spkgen(rkS) in
	let skS = sskgen(rkS) in
	out(c13, (pkA, pkB, pkS));
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))

