This file summarizes the most important changes between versions
of the cryptographic protocol verifier.

Version 1.12

- added flags [unchanged] and [computational], to specify when random
choices are preserved by cryptographic transformations
- instruction allowed_collisions to specify precisely the probabilities of
collisions that can be eliminated
- redone improvement of computation of probabilities when using 
Shoup's lemma
- basic emacs mode with coloring

Version 1.11

- change of license: CryptoVerif is now available under the 
CeCILL-B license (BSD-style license)
- modified definition of the random oracle model to use a keyed
hash function; you will need to update your scripts that use 
"expand ROM_hash".
- doubled probabilities for secrecy properties (CryptoVerif previously
displayed the probability of distinguishing the initial game from a
game that perfectly preserves secrecy, which is half the probability of
breaking secrecy).
- support for the Decisional Diffie-Hellman assumption; 
allow events in right-hand side of equivalences
- merging of variables; improved merging of branches of
if/let/find
- option [noninteractive] for parameters, to optimize 
computed probability bounds.
- when no query is present in the input file, try to simplify the game
as much as possible (instead of stopping immediately).
- "collision" now considers independent restrictions.
- removed "otheruses" and "[unique]" (still accepted for backward compatibility 
but ignored)
- undone improvement of computation of probabilities when using 
Shoup's lemma
- improved simplification of boolean terms, by trying to reach
a contradiction
- tried to remove "let x = cst_type" when possible
- allow floating point constants in probability formulas
- specification of xor added to the library of primitives

Version 1.10pl1

- fixed TeX display bug

Version 1.10

- support for the Computational Diffie-Hellman assumption:
  - support for array indices as inputs in equivalences
  - support for if/let/find/new inside conditions of find
- possibility to designate the number of different calls to an oracle
in probability formulas, for expressing more precise bounds.
- manual insertion of events, which are proved later to have negligible
probability
- manual insertion of instructions, in particular case distinctions
- manual replacement of a term with a equal term
- manually guided elimination of collisions, in particular for passwords
- exploit that the value of the successful branch/indices of certain 
finds is unique
- extended the "otheruses" condition to be able to replace new y:T; 
x = enc(y,k) with new x: T; y = dec(x,k) for SPRP/ICM encryption
and then remove the computation of y when it is not used (and conversely)
- verification of well-formedness invariants after each game
transformation (to make it easier to detect some bugs)
- fixed bug in simplification that could cause missing "defined" conditions
- fixed bug in expansion of terms that could cause references to variables
before the corresponding "defined" condition
- fixed bug in checking of equivalences that could lead to an
internal error instead of a normal error message
- fixed bug in cryptographic transformations, in which the transformation
was applied for terms in conditions of find even when these terms should
have been evaluated at most once for each choice of random coins.
- fixed bug in the computation of probabilities for cryptographic 
transformations when the transformed expression appears in the condition 
of find, and in some cases when transformed expressions appear in different 
branches of if/let/find.
- fixed bug in the cryptographic transformation that allowed to 
transform an expression that occurred several times in the game,
when there was no replication at all in the equivalence.
- fixed bug in the cryptographic transformation: a recheck of the
arguments of oracles was missing.
- fixed bug in the verification of probability formulae; improved
probability formulae for primitives defined in default.cvl/default.ocvl.
- fixed bug that prevented the use of "set" commands in proof environments.
- fixed two bugs in removal of assignments, one that could lead to removing
the definition of a variable while keeping a "defined" condition on it,
one that could to incorrectly changing the meaning of "defined" conditions.
- renamed the executable program to cryptoverif

Version 1.09

- move "new x" even when x has array references, but only inside
the same output process.
- move "let x = t in" when x has no array references and the let
can be moved under a if/let/find in which x is used in a single branch.
(The term t is then computed in fewer cases.)
- minor improvements in the proof strategy (in particular, after SArename,
rename variables defined by several restrictions and without array references).
- possible to deactivate the merging of if/let/find branches by
"set mergeBranches = false."
- fixed bug in cryptographic transformation that could lead to referencing
variables that were not defined.
- fixed bug in cryptographic transformation that could lead to missing
defined conditions.
- fixed display bug that could lead to a confusion between different 
variables when the input file contains variable names of the form
XXX_nnn where nnn is a number.

Version 1.08

- merging of branches of if/let/find when they execute the same code.
- fixed a call to "List.for_all2" in which the two lists could have different
lengths and a missing renaming of "otheruses" conditions in cryptotransf.ml 
(thanks to Yoshikazu Hanatani for reporting these bugs).
- improved again treatment of "elsefind" facts.

Version 1.07pl1

Minor bug fixes and improvements:
- fixed bug in the definition of collision-resistant hash functions in
the library of cryptographic primitives.
- fixed bug in the simplification of "find" inside "else" branches 
of "let".
- fixed a call to "List.for_all2" in which the two lists could have different
lengths.
- improved treatment of "elsefind" facts.
- improved proof of Needham-Schroeder public-key when the key is
the hash of Na and Nb (see authexamples/needham-schroeder-pkcorr3BlockKeyHash).
- the type must be explicitly given when a variable is defined in a tuple
pattern (i.e., in "let (...,x:T,...) = ... in ...", the type T cannot be 
omitted).
- various display improvements.

Version 1.07

- Possibility to include proof indications in the CryptoVerif input
file itself (instead of always entering them interactively).
- Macro mechanism, used to define a library of standard cryptographic
primitives that can easily be reused when writing new protocols.
- Improvements in the proof strategy, in particular to automate the
proof of public-key protocols.
(The changes in the proof strategy may require updates in manual
proofs. It is recommended to update your scripts to take advantage
of the new features. However, if you wish to ensure maximal compatibility
with previous versions of CryptoVerif, you can add the settings:
  set simplifyAfterSARename = false.
  set noAdviceSimplify = true.
)

Version 1.06pl3

- Added priorities among the various functions of an equivalence
- Check that all pairs of variables that must be defined at a certain
program point can be simultaneously defined.
- When an advised transformation renames a variable (e.g. SArename), 
rename this variable accordingly in the transformations to do next.

Versions 1.06pl1 and 1.06pl2

- Minor bug fixes.

Version 1.06

- Allow injective events to occur several times in a process, but in
different branches of if/let/find and under replications of the same type.

Version 1.05

- Improvements in the proof of correspondence assertions

Version 1.04

- Improvements in the computation of probabilities of collisions
- Available under the CeCILL license

Version 1.03

- Improvements in simplification.
- Improvements in the computation of probabilities;
computation of the runtime of the games.
- Proof of injective correspondence assertions
- New front-end with a syntax closer to cryptographic games.
(The old front-end is still available.)

Version 1.02

- Renamed SSArename to SArename, secrecy to one-session secrecy,
and semantic security to secrecy, to be coherent with the research
papers.
- First version of the user manual.

Version 1.01

- Improved simplification, to remove else branches of find more often.
- Support for commutative function symbols
- Proof of non-injective correspondence assertions
- Extensions for one-way trapdoor permutations:
	* In the left-hand side of equivalences, allow functions that
	do not use all random variables above them.
	* Allow applying a cryptographic transformation when some
	transformed terms occur in conditions of find.
- Exact security: bound the probability of an attack.

Version 1.00

First release.
