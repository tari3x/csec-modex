(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* Version with possibly dishonest participants.
   Using two series of function symbols to prevent repeated applications
   of the same cryptographic rule.
*)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type maxenc [bounded].
type maxmac [bounded].

(* A function f(x1...xn) is declared [compos] when:
   - it is injective
   - the values of x1...xn are computable in polynomial time from f(x1...xn) *)

fun concat1(nonce, nonce, host, host):maxenc [compos].
fun concat2(nonce, key):maxenc [compos].

forall y:nonce,z:nonce,t:host,u:host, y2:nonce,z2:key; concat1(y,z,t,u) <> concat2(y2,z2).

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
const Zconcat2:maxenc.
forall y:nonce,z:nonce,t:host,u:host; 
	Z(concat1(y,z,t,u)) = Zconcat1.
forall y:nonce,z:key; 
	Z(concat2(y,z)) = Zconcat2.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, cAK, cBK.

const A : host.
const B : host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

event partA(host, bitstring).
event partB(host, bitstring).
event partB2(host, bitstring).
event fullA(host, key, bitstring).
event fullB(host, key, bitstring).

query secret keyB.
query secret keyA.
query x:bitstring;
	event partB(A,x) ==> partA(B,x).
query x:bitstring;
	event inj:partB(A,x) ==> inj:partA(B,x).
query k:key, x:bitstring;
	event inj:fullA(B,k,x) ==> inj:fullB(A,k,x).
query k:key, x:bitstring;
	event inj:fullA(B,k,x) ==> inj:partB2(A,x).
query k:key, x:bitstring;
	event inj:fullA(B,k,x) ==> inj:partB(A,x).
query k:key, k':key, x:bitstring;
	event fullB(A,k,x) && fullA(B,k',x) ==> k = k'. 

let processA = 
	in(c1, hb: host);
	new M : nonce;
	new Na : nonce;
	new s1 : seed;
	let ea1 = enc(concat1(Na, M, A, hb), Kas, s1) in
	event partA(hb, (M, A, hb));
	out(c2, (M, A, hb, ea1, mac(ea1, mKas)));
	in(c3, (=M, ea2: maxmac, ma2: macs));
	if check(ea2, mKas, ma2) then
	let injbot(concat2(=Na, k)) = dec(ea2, Kas) in
	event fullA(hb, k, (M, A, hb));
	if hb = B then
	(
	let keyA:key = k in out(c11, acceptA(hb))
	)
	else
	(
	out(c11, acceptA(hb)); in(cAK, ()); out(cAK, k)
	).

let processB =
	in(c4, (M: nonce, ha: host, =B, ea:maxmac, ma:macs));
	new Nb : nonce;
	new s2 : seed;
	let e2 = enc(concat1(Nb, M, ha, B), Kbs, s2) in
	event partB2(ha, (M, ha, B));
	out(c5, (M, ha, B, ea, ma, e2, mac(e2, mKbs)));
	in(c6, (=M, ea2: maxmac, ma2: macs, eb2: maxmac, mb2: macs));
	if check(eb2, mKbs, mb2) then
	let injbot(concat2(=Nb, k)) = dec(eb2, Kbs) in
	event partB(ha, (M, ha, B));
	event fullB(ha, k, (M, ha, B));
	if ha = A then
	(
	let keyB:key = k in out(c7, (M, ea2, ma2, acceptB(ha)))
	)
	else
	(
	out(c7, (M, ea2, ma2, acceptB(ha))); in(cBK, ()); out(cBK, k)
	).

let processK =
	in(c8, (Khost: host, Kkey: key, Kmkey: mkey));
	let Rkey:key = 
		if Khost = A then Kas else
		if Khost = B then Kbs else
		Kkey
	in
	let Rmkey:mkey =
		if Khost = A then mKas else
		if Khost = B then mKbs else
		Kmkey.

let processS =
	in(c9, (M: nonce, ha: host, hb: host, ea1: maxmac, ma1: macs, eb1: maxmac, mb1: macs));
	find jA <= N2 suchthat defined(Rkey[jA], Rmkey[jA], Khost[jA]) && (ha = Khost[jA]) then
	let kas = Rkey[jA] in
	let mkas = Rmkey[jA] in
	find jB <= N2 suchthat defined(Rkey[jB], Rmkey[jB], Khost[jB]) && (hb = Khost[jB]) then
	let kbs = Rkey[jB] in
	let mkbs = Rmkey[jB] in
	if check(ea1, mkas, ma1) then
	let injbot(concat1(Na, =M, =ha, =hb)) = dec(ea1, kas) in
	if check(eb1, mkbs, mb1) then
	let injbot(concat1(Nb, =M, =ha, =hb)) = dec(eb1, kbs) in
	new k: key;
	new s3: seed;
	new s4: seed;
	let e1 = enc(concat2(Na, k), kas, s3) in
	let e2 = enc(concat2(Nb, k), kbs, s4) in
	out(c10, (M, e1, mac(e1, mkas), e2, mac(e2, mkbs))).
	
process 
	in(start, ());
	new rKas: keyseed;
	let Kas = kgen(rKas) in
	new rmKas: mkeyseed;
	let mKas = mkgen(rmKas) in
	new rKbs: keyseed;
	let Kbs = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mKbs = mkgen(rmKbs) in
	out(c13, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))
