(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(*

WooLam shared-key auth protocol (1992, computer)
Corrections of Gordon, Jeffrey CSFW'01

A -> B : A
B -> A : N (fresh)
A -> B : { m3, B, N }_kAS
B -> S : A,B,{ m3, B, N }_kAS
S -> B : { m5, A, N }_kBS
B: verify { m5, A, N }_kBS = the message from S

Correct.
Session identifier (A, N)
Authentication in one direction only.
{ m3, B, N }_kAS is not authenticated because it is just
forwarded by B to the server without checking it.

*)

param N.
param N2.
param N3.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [fixed].
type tag [bounded].
type maxenc [bounded].
type maxmac [bounded].

fun concat1(tag, host, nonce):maxenc [compos].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
forall y:tag, h:host, z:nonce; 
	Z(concat1(y,h,z)) = Zconcat1.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,
	start, finish.

const A: host.
const B: host.
fun acceptA(host):bitstring.
fun acceptB(host):bitstring.

const tag3: tag.
const tag5: tag.

event fullA(host, bitstring).
event fullB(host, bitstring).

query y:bitstring;
	event inj:fullB(A,y) ==> inj:fullA(B,y).

let processA =
	in(c1, hostB2:host); (* Choose the B host *)
	out(c2, A);
	in(c3, n:nonce);
	new r1:seed;
	let e1 = enc(concat1(tag3, hostB2, n), kAS, r1) in
	let m1 = mac(e1, mkAS) in
	event fullA(hostB2, (A, n));
	out(c4, (e1, m1, acceptA(hostB2))).

let processB =
	in(c5, hostA2:host);
	new N:nonce;
	out(c6, N);
	in(c7, (m:maxmac, macm:macs));
	out(c8, (hostA2, B, m, macm));
	in(c9, (m2:maxmac, macm2:macs));
	if check(m2, mkBS, macm2) then
	if injbot(concat1(tag5, hostA2, N)) = dec(m2, kBS) then
	(* OK *)
	event fullB(hostA2, (hostA2, N));
	out(c14, acceptB(hostA2)).

let processK =
	in(c10, (Khost: host, Kkey: key, Kmkey: mkey));
	let Rkey:key = 
		if Khost = A then kAS else
		if Khost = B then kBS else
		Kkey
	in
	let Rmkey:mkey =
		if Khost = A then mkAS else
		if Khost = B then mkBS else
		Kmkey.

let processS =
	in(c11, (hostA1:host, hostB0:host, m:maxmac, macm:macs));
	find jB <= N2 suchthat defined(Rkey[jB], Rmkey[jB], Khost[jB]) && (hostB0 = Khost[jB]) then
	let kbs = Rkey[jB] in
	let mkbs = Rmkey[jB] in
	find jA <= N2 suchthat defined(Rkey[jA], Rmkey[jA], Khost[jA]) && (hostA1 = Khost[jA]) then
	let kas = Rkey[jA] in
	let mkas = Rmkey[jA] in
	if check(m, mkas, macm) then
	let injbot(concat1(=tag3, =hostB0, n)) = dec(m, kas) in
	new r3:seed;
	let e3 = enc(concat1(tag5, hostA1, n), kbs, r3) in
	out(c12, (e3, mac(e3, mkbs))).


process 
	in(start, ());
	new rKas: keyseed;
	let kAS = kgen(rKas) in
	new rmKas: mkeyseed;
	let mkAS = mkgen(rmKas) in
	new rKbs: keyseed;
	let kBS = kgen(rKbs) in
	new rmKbs: mkeyseed;
	let mkBS = mkgen(rmKbs) in
	out(c13, ());
	((! N processA) |
	 (! N processB) | 
	 (! N processS) |
	 (! N2 processK))
