(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* One-Encryption Key Exchange *)

(* Proof indications *)

proof {
set maxIterSimplif = 3;
crypto h1;
show_game occ;
insert 466 "find j <= NU suchthat defined(X[j]) && X[j] = X_s then";
show_game occ;
insert 466 "find nj <= qH1 suchthat defined(x11[nj], x12[nj], x13[nj], x14[nj], r1_106[nj]) && (U = x11[nj]) && (S = x12[nj]) && (X_s = x13[nj]) && (Y = x14[nj]) && (auth_s = r1_106[nj]) then";
show_game occ;
insert_event Auth 633;
simplify;
crypto enc;
show_game occ;
insert_event Encrypt 1240;
auto;
move array "@4_X_4121";
move binder r1_118;
merge_arrays "@4_X_3700" "@2_Y_4289";
merge_branches;
move array "@4_X_3929";
merge_arrays "@4_X_3700" "@2_Y_4867";
merge_branches;
move array "@4_X_4059";
merge_arrays "@4_X_3700" "@2_Y_5333";
show_game occ;
insert 347 "find nj2 <= qH1, nk <= qD suchthat defined(x11[nj2], x12[nj2], x13[nj2], x14[nj2], r1_106[nj2], m[nk], kd[nk], @4_X_3700[nk]) && (m[nk] = @5_r2_209) && (U = x11[nj2]) && (S = x12[nj2]) && (X_s = x13[nj2]) && (x14[nj2] = @4_X_3700[nk]) && (auth_s = r1_106[nj2])  && (kd[nk] = pw) then";
show_game occ;
insert_event Auth2 406;
simplify;
success;
simplify coll_elim pw;
success
}

(* Parameter and type declarations *)

param NU, NS, NP.

type Z [large, fixed].
type G [large, fixed].
type passwd [password, fixed].

type hash0 [fixed].
type hash1 [fixed,large].
type host [bounded].

(* Computational Diffie-Hellman *)

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* Ideal cipher model *)

type cipherkey [fixed].

expand ICM_cipher(cipherkey, passwd, G, enc, dec).

param qE, qD [noninteractive].
let enc_dec_oracle =
       (foreach iE <= qE do Oenc(x:G, ke:passwd) := return(enc(ck,x,ke)))
     | (foreach iD <= qD do Odec(m:G, kd:passwd) := return(dec(ck,m,kd))).

(* Hash functions in the random oracle model; 
   we use hash functions with 5 arguments, we redefine them
   by adapting the definition of the random oracle model
   given in the CryptoVerif library *)

type hashkey [fixed].

param Nh, N, qH0, qH1, Neq.

fun h0(hashkey, host, host, G, G, G):hash0.

equiv 
  foreach ih <= Nh do hk <-R hashkey;
    (foreach ih0 <= N do 
       Oh0(x1: host, x2: host, x3: G, x4: G, x5: G) := 
         return(h0(hk, x1, x2, x3, x4, x5)) |
     foreach ieq0 <= Neq do 
       Oeq0(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash0) := 
         return(r' = h0(hk, x1', x2', x3', x4', x5')))
  <=(Neq/|hash0|)=>
  foreach ih <= Nh do 
    (foreach ih0 <= N do 
       Oh0(x1: host, x2: host, x3: G, x4: G, x5: G) :=
         find j<=N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && 
         x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] 
         then return(r[j]) else r <-R hash0; return(r) |
     foreach ieq0 <= Neq do 
       Oeq0(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash0) :=
         find j<=N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r[j]) && 
         x1' = x1[j] && x2' = x2[j] && x3' = x3[j] && x4' = x4[j] && x5' = x5[j] 
         then return(r' = r[j]) else return(false)).

let hashoracle0 = foreach iH0 <= qH0 do 
    OH0(x1: host, x2: host, x3: G, x4: G, x5: G):= 
      return(h0(hk0,x1,x2,x3,x4,x5)). 


fun h1(hashkey, host, host, G, G, G):hash1.

equiv 
  foreach ih <= Nh do hk <-R hashkey;
    (foreach ih1 <= N do 
       Oh1(x1: host, x2: host, x3: G, x4: G, x5: G) := 
         return(h1(hk, x1, x2, x3, x4, x5)) |
     foreach ieq1 <= Neq do 
       Oeq1(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash1) := 
         return(r' = h1(hk, x1', x2', x3', x4', x5')))
  <=(Neq/|hash1|)=>
  foreach ih <= Nh do 
    (foreach ih1 <= N do 
       Oh1(x1: host, x2: host, x3: G, x4: G, x5: G) :=
         find j<=N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && 
         x1 = x1[j] && x2 = x2[j] && x3 = x3[j] && x4 = x4[j] && x5 = x5[j] 
         then return(r1[j]) else r1 <-R hash1; return(r1) |
     foreach ieq1 <= Neq do 
       Oeq1(x1': host, x2': host, x3': G, x4': G, x5': G, r': hash1) :=
         find j<=N suchthat defined(x1[j],x2[j],x3[j],x4[j],x5[j],r1[j]) && 
         x1' = x1[j] && x2' = x2[j] && x3' = x3[j] && x4' = x4[j] && x5' = x5[j]
         then return(r' = r1[j]) else return(false)).

let hashoracle1 = foreach iH1 <= qH1 do 
    OH1(x11: host, x12: host, x13: G, x14: G, x15: G):= 
      return(h1(hk1,x11,x12,x13,x14,x15)). 

(* Host names *)

const U : host.
const S : host.

(* Queries *)

query secret sk_u.
query secret sk_s.

event termS(host, G, host, G, hash1, hash0).
event acceptU(host, G, host, G, hash1, hash0).

query x:host, X:G, y:host, Ystar:G, a: hash1, k:hash0;
	event inj:termS(x,X,y,Ystar,a,k) ==> inj:acceptU(x,X,y,Ystar,a,k).
query x:host, X:G, y:host, Ystar:G, a: hash1, k:hash0, k':hash0;
	event termS(x,X,y,Ystar,a,k) && acceptU(x,X,y,Ystar,a,k') ==> k = k'.

(* Client *)

let processU =
	foreach iU <= NU do 
	OC1() :=
	x <-R Z;
	X <- exp(g,x);
	return(U, X);
	OC2(=S, Ystar_u: G) :=
	Y_u <- dec(ck, Ystar_u, pw);
	K_u <- exp(Y_u, x);
	auth_u <- h1(hk1,U,S,X,Y_u,K_u);
	sk_u: hash0 <- h0(hk0,U,S,X,Y_u,K_u);
	event acceptU(U, X, S, Ystar_u, auth_u, sk_u);
	return(auth_u).

(* Server *)

let processS =
	foreach iS <= NS do 
	OS1(=U, X_s: G) :=
	y <-R Z;
	Y <- exp(g,y);
	Ystar <- enc(ck, Y, pw);
	return(S, Ystar);
	OS2(auth_s: hash1) :=
	K_s <- exp(X_s, y);
	if auth_s = h1(hk1,U,S,X_s,Y,K_s) then
	sk_s: hash0 <- h0(hk0,U,S,X_s,Y,K_s);
	event termS(U, X_s, S, Ystar, auth_s, sk_s).

(* Sessions that are subject only to a passive attack.
   We send a transcript of the session *)

let processPassive =
	foreach iP <= NP do 
	OP() :=
	xp <-R Z;
	Xp <- exp(g, xp);
	yp <-R Z;
	Yp <- exp(g, yp);
	Kp <- exp(g, mult(xp,yp));
	Ystarp <- enc(ck, Yp, pw);
	authp <- h1(hk1, U, S, Xp, Yp, Kp);
	sk_p: hash0 <- h0(hk0, U, S, Xp, Yp, Kp);
	return(U, Xp, S, Ystarp, authp).

process 
	Ostart() :=
	hk0 <-R hashkey;
	hk1 <-R hashkey;
	ck <-R cipherkey;
	pw <-R passwd;
	return;
	(processU | processS | processPassive | 
	 enc_dec_oracle | hashoracle0 | hashoracle1)
