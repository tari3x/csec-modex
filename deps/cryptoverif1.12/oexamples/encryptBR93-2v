(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet                                      *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2011           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributor: Bruno Blanchet, Bruno.Blanchet@ens.fr
    
This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.2: variant
	E(x) = f(r) || H(r) xor x || H2(r || H(r) xor x) 
(CCA2) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
crypto hash;
crypto hash2;
remove_assign binder pk;
crypto f r; 
crypto xor *;
success
}

param nx, qD.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type hasht2 [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, pkey, skey, seed, pkgen, skgen, f, invf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, seed, hasht, hash).

param qH [noninteractive].
let hashoracle = foreach iH <= qH do OH(x:seed) := return(hash(hk,x)).

(* Another hash function, random oracle model *)

param nH, nH2, nH3.

fun hash2(hashkey, seed, hasht):hasht2.

equiv foreach iH <= nH do k <-R hashkey;
        (foreach iH2 <= nH2 do OH(x:seed,y:hasht) := return(hash2(k,x,y)) |
         foreach iH3 <= nH3 do Oeq(x':seed,y':hasht,r':hasht2) := return(r' = hash2(k,x',y')))
      <=(#Oeq/|hasht2|)=>
      foreach iH <= nH do
        (foreach iH2 <= nH2 do OH(x:seed,y:hasht) := find u <= nH2 suchthat defined(x[u],y[u],r[u]) && x= x[u] && y=y[u] then return(r[u]) else
			 r <-R hasht2; return(r) |
         foreach iH3 <= nH3 do Oeq(x':seed,y':hasht,r':hasht2) := find u <= nH2 suchthat defined(x[u],y[u],r[u]) && x' = x[u] && y' =y[u] then return(r' = r[u]) else return(false)).

param qH2 [noninteractive].
let hashoracle2 =
	foreach iH2 <= qH2 do
	OH2(x:seed,y:hasht) :=
	return(hash2(hk2,x,y)).

(* Xor *)

expand Xor(hasht, xor).

(* Implementing a test as a function.
   Useful to avoid expanding if, which is necessary for this proof. *)

fun test(bool, hasht, hasht):hasht.
forall x:hasht,y:hasht; test(true,x,y) = x.
forall x:hasht,y:hasht; test(false,x,y) = y.

(* Queries *)

query secret1 b1.

let processD =
	foreach iD <= qD do
	OD(a:seed, b: hasht, c:hasht2) :=
        (* The attacker cannot call the decryption oracle on the test ciphertext *)
	find suchthat defined(aT,bT,cT) && a = aT && b = bT && c = cT then end else
	x <- invf(sk,a);
	m <- xor(hash(hk,x), b);
	if c = hash2(hk2,x,b) then
	return(m).

let processT = 
	OT(m1:hasht, m2:hasht) :=
	b1 <-R bool;
	(* The next line is equivalent to an "if" that will not be
	expanded. This is necessary for the system to succeed in
	proving the protocol. *)
	menc <- test(b1, m1, m2);
	x <-R seed;
	aT:seed <- f(pk,x);
	bT:hasht <- xor(hash(hk,x), menc);
	cT:hasht2 <- hash2(hk2,x,bT);
	return(aT,bT,cT).

process 
	Ohkgen() :=
	hk <-R hashkey;
	hk2 <-R hashkey;
	return;	
	(hashoracle | hashoracle2 | 
	Ogen() :=
	r <-R keyseed; 
	pk <- pkgen(r);
	sk <- skgen(r);
	return(pk);
	(processD | processT))

