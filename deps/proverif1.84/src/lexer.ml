# 28 "lexer.mll"
 
open Parsing_helper
open Parser

let create_hashtable size init =
  let tbl = Hashtbl.create size in
  List.iter (fun (key,data) -> Hashtbl.add tbl key data) init;
  tbl

(* Untyped front-end *)

let keyword_table =
  create_hashtable 11
[ "fun", FUN;
  "data", DATA;
  "equation", EQUATION;
  "reduc", REDUCTION;
  "query", QUERY;
  "nounif", NOUNIF;
  "param", PARAM;
  "not", NOT;
  "elimtrue", ELIMTRUE;
  "pred", PREDICATE
]

(* Typed front-end *)

let tkeyword_table =
  create_hashtable 11
[ "type", TYPE;
  "name", NAME;
  "fun", FUN;
  "const", CONST;
  "forall", FORALL;
  "equation", EQUATION;
  "clauses", CLAUSES;
  "query", QUERY;
  "nounif", NOUNIF;
  "set", SET;
  "not", NOT;
  "elimtrue", ELIMTRUE;
  "pred", PREDICATE
]


# 48 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\233\255\234\255\236\255\237\255\238\255\078\000\000\000\
    \242\255\243\255\244\255\245\255\246\255\247\255\248\255\250\255\
    \001\000\076\000\095\000\002\000\005\000\255\255\251\255\241\255\
    \235\255\001\000\002\000\240\255\239\255\144\000\252\255\253\255\
    \006\000\254\255\051\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\022\000\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\003\000\002\000\001\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\003\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\030\000\000\000\000\000\
    \255\255\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\021\000\019\000\019\000\020\000\019\000\021\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\019\000\000\000\000\000\000\000\009\000\000\000\
    \016\000\014\000\003\000\022\000\015\000\007\000\004\000\005\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\010\000\011\000\006\000\008\000\023\000\028\000\
    \027\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\013\000\035\000\012\000\000\000\000\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\026\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\018\000\000\000\
    \000\000\000\000\000\000\025\000\024\000\000\000\000\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\033\000\000\000\000\000\032\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\034\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\000\000\000\000\019\000\020\000\
    \032\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\025\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\034\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\018\000\255\255\
    \255\255\255\255\255\255\006\000\006\000\255\255\255\255\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\029\000\255\255\255\255\029\000\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\029\000\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\255\255\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\255\255\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 76 "lexer.mll"
     ( next_line lexbuf; token lexbuf )
# 193 "lexer.ml"

  | 1 ->
# 78 "lexer.mll"
     ( token lexbuf )
# 198 "lexer.ml"

  | 2 ->
# 80 "lexer.mll"
     ( let s = Lexing.lexeme lexbuf in
	 try
	   Hashtbl.find (if !Param.typed_frontend then tkeyword_table else keyword_table) s
         with
           Not_found ->
             IDENT (s, extent lexbuf)
     )
# 209 "lexer.ml"

  | 3 ->
# 88 "lexer.mll"
     ( INT (int_of_string(Lexing.lexeme lexbuf)) )
# 214 "lexer.ml"

  | 4 ->
# 89 "lexer.mll"
       (
         comment lexbuf;
         token lexbuf
       )
# 222 "lexer.ml"

  | 5 ->
# 93 "lexer.mll"
      ( COMMA )
# 227 "lexer.ml"

  | 6 ->
# 94 "lexer.mll"
      ( LPAREN )
# 232 "lexer.ml"

  | 7 ->
# 95 "lexer.mll"
      ( RPAREN )
# 237 "lexer.ml"

  | 8 ->
# 96 "lexer.mll"
      ( LBRACKET )
# 242 "lexer.ml"

  | 9 ->
# 97 "lexer.mll"
      ( RBRACKET )
# 247 "lexer.ml"

  | 10 ->
# 98 "lexer.mll"
      ( SEMI )
# 252 "lexer.ml"

  | 11 ->
# 99 "lexer.mll"
      ( COLON )
# 257 "lexer.ml"

  | 12 ->
# 100 "lexer.mll"
      ( WEDGE )
# 262 "lexer.ml"

  | 13 ->
# 101 "lexer.mll"
      ( EQUAL )
# 267 "lexer.ml"

  | 14 ->
# 102 "lexer.mll"
       ( RED )
# 272 "lexer.ml"

  | 15 ->
# 103 "lexer.mll"
        ( EQUIV )
# 277 "lexer.ml"

  | 16 ->
# 104 "lexer.mll"
        ( EQUIVEQ )
# 282 "lexer.ml"

  | 17 ->
# 105 "lexer.mll"
      ( SLASH )
# 287 "lexer.ml"

  | 18 ->
# 106 "lexer.mll"
      ( DOT )
# 292 "lexer.ml"

  | 19 ->
# 107 "lexer.mll"
      ( STAR )
# 297 "lexer.ml"

  | 20 ->
# 108 "lexer.mll"
       ( DIFF )
# 302 "lexer.ml"

  | 21 ->
# 109 "lexer.mll"
      ( EOF )
# 307 "lexer.ml"

  | 22 ->
# 110 "lexer.mll"
    ( input_error "Illegal character" (extent lexbuf) )
# 312 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 29
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 113 "lexer.mll"
       ( )
# 323 "lexer.ml"

  | 1 ->
# 115 "lexer.mll"
     ( next_line lexbuf; comment lexbuf )
# 328 "lexer.ml"

  | 2 ->
# 116 "lexer.mll"
      ( )
# 333 "lexer.ml"

  | 3 ->
# 117 "lexer.mll"
    ( comment lexbuf )
# 338 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

