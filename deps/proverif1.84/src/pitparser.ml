type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | PARAM
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and Xavier Allamigeon                *
 *                                                           *
 *       Copyright (C) INRIA, LIENS, MPII 2000-2009          *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 110 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  272 (* REPL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* EQUAL *);
  277 (* FUN *);
  278 (* EQUATION *);
  279 (* REDUCTION *);
  280 (* PREDICATE *);
  281 (* PROCESS *);
  282 (* SLASH *);
  283 (* DOT *);
    0 (* EOF *);
  284 (* LET *);
  285 (* QUERY *);
  286 (* BEFORE *);
  287 (* PUTBEGIN *);
  288 (* NONINTERF *);
  289 (* EVENT *);
  290 (* NOT *);
  291 (* ELIMTRUE *);
  292 (* FREE *);
  293 (* SUCHTHAT *);
  294 (* CLAUSES *);
  295 (* RED *);
  296 (* EQUIV *);
  297 (* EQUIVEQ *);
  298 (* WEDGE *);
  299 (* DIFF *);
  300 (* COLON *);
  301 (* NOUNIF *);
  302 (* PHASE *);
  303 (* AMONG *);
  304 (* WEAKSECRET *);
  305 (* PARAM *);
  306 (* TYPE *);
  307 (* SET *);
  308 (* FORALL *);
  309 (* CONST *);
  310 (* INJEVENT *);
  311 (* OR *);
  312 (* CHANNEL *);
  313 (* LETFUN *);
  314 (* DEFINE *);
  315 (* EXPAND *);
  316 (* YIELD *);
  317 (* LEQ *);
  318 (* PROBA *);
  319 (* LBRACE *);
  320 (* RBRACE *);
  321 (* PROOF *);
  322 (* TABLE *);
  323 (* INSERT *);
  324 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* STRING *);
  271 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\020\000\020\000\
\020\000\020\000\021\000\021\000\018\000\018\000\003\000\003\000\
\006\000\006\000\013\000\013\000\011\000\011\000\007\000\007\000\
\005\000\005\000\004\000\004\000\022\000\022\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\024\000\
\024\000\023\000\023\000\025\000\025\000\016\000\016\000\015\000\
\015\000\026\000\026\000\026\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\029\000\029\000\027\000\027\000\030\000\
\030\000\030\000\030\000\028\000\028\000\014\000\014\000\014\000\
\033\000\033\000\034\000\034\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\036\000\036\000\032\000\032\000\
\037\000\037\000\037\000\037\000\035\000\035\000\009\000\009\000\
\038\000\038\000\038\000\038\000\019\000\019\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\041\000\041\000\
\043\000\043\000\040\000\040\000\040\000\040\000\040\000\044\000\
\044\000\042\000\042\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\045\000\045\000\039\000\039\000\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\007\000\007\000\005\000\004\000\007\000\008\000\
\005\000\007\000\006\000\009\000\006\000\009\000\006\000\006\000\
\006\000\004\000\006\000\004\000\006\000\004\000\004\000\006\000\
\004\000\004\000\004\000\005\000\006\000\004\000\004\000\007\000\
\003\000\006\000\009\000\007\000\000\000\004\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\003\000\003\000\000\000\
\003\000\001\000\005\000\003\000\001\000\000\000\003\000\000\000\
\001\000\001\000\001\000\000\000\003\000\001\000\004\000\006\000\
\001\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
\001\000\001\000\000\000\005\000\001\000\003\000\001\000\003\000\
\001\000\001\000\004\000\004\000\004\000\001\000\006\000\003\000\
\003\000\004\000\003\000\003\000\004\000\004\000\003\000\003\000\
\005\000\002\000\006\000\003\000\001\000\001\000\000\000\006\000\
\004\000\005\000\003\000\001\000\000\000\006\000\006\000\002\000\
\002\000\000\000\002\000\000\000\004\000\004\000\001\000\003\000\
\005\000\002\000\002\000\006\000\003\000\001\000\001\000\000\000\
\006\000\004\000\005\000\003\000\001\000\000\000\006\000\004\000\
\003\000\001\000\003\000\003\000\004\000\003\000\003\000\001\000\
\004\000\002\000\005\000\001\000\001\000\006\000\006\000\004\000\
\007\000\007\000\006\000\004\000\008\000\006\000\004\000\008\000\
\006\000\006\000\008\000\003\000\006\000\003\000\002\000\000\000\
\002\000\000\000\001\000\003\000\003\000\004\000\002\000\003\000\
\001\000\001\000\000\000\004\000\006\000\001\000\003\000\003\000\
\004\000\003\000\003\000\006\000\006\000\006\000\008\000\008\000\
\003\000\003\000\001\000\001\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\198\000\000\000\199\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\102\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\039\000\040\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\148\000\000\000\000\000\
\000\000\000\000\000\000\149\000\000\000\000\000\000\000\057\000\
\058\000\000\000\000\000\059\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\096\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\000\000\089\000\000\000\
\080\000\000\000\000\000\000\000\022\000\078\000\000\000\006\000\
\000\000\025\000\000\000\000\000\071\000\000\000\000\000\000\000\
\030\000\000\000\067\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\127\000\115\000\000\000\000\000\
\000\000\018\000\023\000\026\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\047\000\005\000\000\000\009\000\000\000\000\000\100\000\
\000\000\000\000\000\000\108\000\000\000\000\000\000\000\083\000\
\084\000\093\000\090\000\094\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\063\000\068\000\000\000\000\000\000\000\
\000\000\000\000\141\000\123\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\196\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\046\000\000\000\143\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\178\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\097\000\000\000\
\051\000\000\000\019\000\076\000\021\000\000\000\024\000\000\000\
\029\000\000\000\120\000\000\000\000\000\000\000\000\000\125\000\
\000\000\000\000\000\000\017\000\015\000\016\000\000\000\000\000\
\000\000\000\000\193\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\184\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\145\000\000\000\000\000\
\000\000\000\000\173\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\135\000\000\000\000\000\
\000\000\000\000\087\000\000\000\007\000\064\000\032\000\000\000\
\000\000\000\000\133\000\117\000\000\000\118\000\113\000\111\000\
\110\000\003\000\000\000\000\000\194\000\000\000\180\000\000\000\
\000\000\000\000\185\000\000\000\036\000\010\000\000\000\000\000\
\000\000\000\000\000\000\172\000\176\000\174\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\165\000\161\000\000\000\000\000\162\000\000\000\012\000\
\106\000\000\000\000\000\000\000\124\000\014\000\181\000\000\000\
\000\000\000\000\000\000\035\000\154\000\153\000\000\000\000\000\
\000\000\000\000\002\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\000\131\000\000\000\000\000\000\000\129\000"

let yydgoto = "\003\000\
\029\000\030\000\092\000\186\000\187\000\065\000\035\000\127\000\
\036\000\183\000\196\000\100\001\197\000\071\000\048\000\053\000\
\098\000\165\000\067\000\166\000\167\000\188\000\128\000\129\000\
\054\000\050\000\099\000\059\001\100\000\060\001\251\000\252\000\
\170\001\145\000\226\001\253\000\227\001\141\000\101\001\128\001\
\138\001\129\001\030\002\130\001\102\001"

let yysindex = "\243\000\
\046\002\046\002\000\000\016\255\046\255\046\255\138\255\144\255\
\151\001\179\255\195\255\229\001\230\000\252\255\046\255\173\255\
\032\000\252\255\057\000\079\000\252\255\252\255\091\000\105\000\
\126\000\138\000\040\255\161\000\000\000\156\255\000\000\186\000\
\170\000\170\001\170\001\191\000\079\001\032\255\251\001\197\000\
\036\255\225\000\251\254\245\000\015\001\020\001\195\000\001\001\
\082\001\029\001\192\255\033\001\024\001\058\001\151\255\055\001\
\034\002\072\001\170\001\041\255\065\001\154\002\070\001\092\001\
\066\001\170\001\046\002\033\255\101\001\108\001\093\001\094\001\
\114\001\191\000\115\001\084\001\118\001\048\000\012\255\143\001\
\122\001\244\255\149\001\194\255\020\255\119\001\159\001\165\001\
\165\002\182\002\252\255\146\001\020\255\150\001\170\000\194\255\
\166\001\028\255\171\001\000\000\172\001\251\001\020\255\161\001\
\142\001\152\001\251\001\251\001\251\001\219\001\046\002\251\001\
\251\001\251\001\251\001\251\001\219\001\187\001\185\001\046\002\
\185\001\020\255\046\002\251\001\046\002\170\001\141\255\207\001\
\000\000\170\001\170\001\170\001\046\002\170\001\170\001\170\001\
\170\001\252\255\020\255\125\002\023\255\000\000\255\002\201\001\
\000\000\197\001\202\255\046\002\046\002\046\002\192\001\100\001\
\020\255\046\002\170\000\245\002\020\255\046\002\020\255\046\002\
\000\000\000\000\000\000\000\000\156\001\244\255\213\001\020\255\
\194\255\212\001\222\001\224\001\226\001\000\000\076\001\245\002\
\075\000\221\001\220\001\000\000\225\001\227\001\014\000\000\000\
\000\000\241\001\248\001\000\000\000\000\170\001\170\001\253\001\
\046\002\005\002\046\002\007\002\000\000\145\255\251\001\000\000\
\165\000\009\002\255\001\251\001\252\255\252\255\013\002\221\255\
\020\002\238\001\000\000\228\001\193\002\000\255\000\000\193\002\
\000\000\170\001\235\001\011\002\000\000\000\000\026\002\000\000\
\149\002\000\000\208\000\170\001\000\000\029\002\134\255\254\001\
\000\000\031\000\000\000\199\002\157\002\000\000\191\000\170\001\
\170\001\170\001\046\255\000\000\038\002\255\002\042\002\039\002\
\043\002\054\002\059\002\037\002\000\000\000\000\255\002\035\255\
\036\002\000\000\000\000\000\000\046\002\044\002\056\002\191\000\
\000\000\061\002\081\002\245\002\073\002\084\002\245\002\075\000\
\106\002\163\002\088\002\050\002\113\002\000\000\046\002\000\000\
\244\255\121\002\251\000\083\002\245\002\245\002\245\002\013\255\
\131\002\116\002\128\000\058\255\245\002\091\002\123\002\137\002\
\143\002\142\002\150\002\194\255\000\000\109\002\020\255\143\000\
\099\255\000\000\000\000\191\000\000\000\135\002\046\002\000\000\
\136\002\146\002\166\002\000\000\111\002\170\000\014\255\000\000\
\000\000\000\000\000\000\000\000\046\002\167\002\046\002\151\002\
\046\002\170\001\000\000\000\000\000\000\046\002\155\002\199\002\
\199\002\199\002\000\000\000\000\181\002\164\002\255\002\169\002\
\255\002\255\002\141\002\186\002\046\002\000\000\046\002\046\002\
\176\002\173\002\245\002\003\001\209\002\000\000\171\002\245\002\
\120\002\185\002\206\002\245\002\245\002\046\002\245\002\245\002\
\245\002\170\002\046\002\200\002\000\000\000\000\203\002\000\000\
\020\255\007\001\010\001\223\002\218\002\194\255\090\255\229\002\
\233\002\000\000\128\000\020\255\215\000\245\002\245\002\245\002\
\194\255\000\000\245\002\128\000\131\002\020\255\000\000\046\002\
\046\255\207\002\194\255\000\000\251\001\219\002\000\000\225\002\
\000\000\251\001\000\000\000\000\000\000\046\002\000\000\234\001\
\000\000\046\002\000\000\255\000\240\002\255\002\242\002\000\000\
\235\002\226\002\202\255\000\000\000\000\000\000\046\002\245\002\
\064\001\245\002\000\000\020\255\246\002\245\002\245\002\245\002\
\177\255\210\002\000\000\103\000\000\000\201\002\046\002\000\000\
\046\002\046\002\251\002\245\002\128\000\000\000\194\255\056\000\
\020\255\128\000\000\000\000\003\255\001\120\255\004\002\002\003\
\131\002\003\003\005\003\191\000\000\000\000\000\046\002\191\255\
\002\002\251\001\000\000\082\001\000\000\000\000\000\000\247\002\
\254\002\007\003\000\000\000\000\009\003\000\000\000\000\000\000\
\000\000\000\000\168\002\245\002\000\000\006\003\000\000\147\001\
\078\002\080\002\000\000\211\002\000\000\000\000\194\255\017\001\
\019\003\131\002\194\255\000\000\000\000\000\000\194\255\194\255\
\143\002\143\002\176\255\004\003\000\000\046\002\165\000\030\002\
\255\002\014\003\000\000\255\002\046\002\249\001\245\002\245\002\
\245\002\245\002\046\002\131\002\143\002\143\002\131\002\081\000\
\180\000\000\000\000\000\194\255\245\002\000\000\046\002\000\000\
\000\000\165\000\020\003\255\002\000\000\000\000\000\000\201\002\
\201\002\087\002\105\002\000\000\000\000\000\000\194\255\194\255\
\131\002\089\002\000\000\000\000\255\000\027\003\245\002\245\002\
\131\002\131\002\000\000\000\000\255\000\201\002\201\002\000\000"

let yyrindex = "\000\000\
\012\003\038\004\000\000\000\000\214\001\214\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\214\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\003\018\003\000\000\034\003\000\000\
\010\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\255\022\003\146\255\000\000\000\000\033\003\000\000\000\000\
\000\000\000\000\036\003\174\002\000\000\000\000\000\000\238\000\
\000\000\000\000\002\000\037\003\000\000\000\000\000\000\000\000\
\000\000\018\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\003\000\000\000\000\091\001\
\000\000\000\000\000\000\000\000\042\003\000\000\058\003\000\000\
\096\001\060\003\000\000\000\000\145\001\034\003\000\000\000\000\
\000\000\000\000\034\003\000\000\034\003\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\042\003\002\000\000\000\002\000\000\000\062\003\000\000\
\000\000\036\003\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\228\255\000\000\000\000\063\003\000\000\
\000\000\000\000\000\000\002\000\002\000\002\000\000\000\000\000\
\000\000\002\000\058\003\000\000\042\003\008\003\042\003\002\000\
\000\000\000\000\000\000\000\000\000\000\009\255\010\003\042\003\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\003\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\066\003\000\000\106\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\226\255\023\003\083\255\000\000\013\003\
\000\000\000\000\146\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\153\001\
\000\000\204\001\000\000\110\002\000\000\000\000\018\003\000\000\
\000\000\000\000\214\001\000\000\000\000\063\003\000\000\049\003\
\000\000\000\000\065\003\000\000\000\000\000\000\000\000\037\003\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\018\003\
\000\000\000\000\000\000\070\003\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\003\035\000\
\082\000\000\000\071\003\051\003\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\051\255\
\024\255\000\000\000\000\018\003\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\194\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\
\002\000\000\000\000\000\000\000\000\000\002\000\000\000\233\255\
\240\255\243\255\000\000\000\000\000\000\050\003\063\003\000\000\
\000\000\000\000\206\000\000\000\002\000\000\000\002\000\002\000\
\000\000\000\000\000\000\072\003\000\000\000\000\000\000\070\003\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\218\000\073\003\
\000\000\000\000\071\003\000\000\124\001\000\000\000\000\070\003\
\000\000\000\000\070\003\071\003\097\000\000\000\000\000\002\000\
\214\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\002\000\000\000\074\003\000\000\000\000\000\000\000\000\
\000\000\037\003\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\200\000\000\000\217\000\008\003\000\000\
\002\000\002\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\165\255\130\000\135\000\000\000\
\117\000\000\000\000\000\018\003\000\000\000\000\002\000\000\000\
\075\003\000\000\000\000\039\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\145\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\150\000\000\000\000\000\002\000\000\000\076\003\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\002\000\160\000\053\000\053\000\166\000\072\000\
\101\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\077\003\000\000\000\000\000\000\000\000\234\000\
\013\001\000\000\107\000\000\000\000\000\000\000\000\000\000\000\
\179\000\150\000\000\000\000\000\000\000\078\003\000\000\000\000\
\190\000\221\000\000\000\000\000\000\000\036\001\063\001\000\000"

let yygindex = "\000\000\
\000\000\254\255\220\255\188\255\158\255\042\000\007\000\033\000\
\190\002\168\255\181\003\018\000\250\255\122\255\178\000\021\002\
\012\000\061\003\100\003\000\000\178\003\043\003\215\003\175\000\
\000\000\000\000\073\001\000\000\148\003\107\254\048\255\025\255\
\000\000\178\002\000\000\011\003\134\254\000\000\236\254\088\255\
\055\000\221\254\045\002\147\002\172\002"

let yytablesize = 1125
let yytable = "\031\000\
\094\000\037\000\047\000\052\000\203\000\056\000\063\000\198\000\
\039\001\070\000\124\001\034\000\001\001\045\001\085\001\157\000\
\031\001\043\000\152\000\112\000\049\000\066\000\183\000\057\000\
\194\000\154\001\087\000\105\000\032\000\136\000\199\000\243\000\
\184\000\112\000\144\000\095\000\143\000\151\000\143\000\102\000\
\239\000\114\000\115\000\113\000\130\000\062\000\092\001\112\000\
\106\000\244\000\136\000\096\000\168\000\223\000\008\001\114\000\
\115\000\113\000\144\000\073\000\144\000\131\001\076\000\077\000\
\142\000\066\000\089\000\090\000\116\000\114\000\115\000\158\000\
\043\000\125\001\158\000\185\000\103\000\182\000\066\000\103\000\
\027\001\146\000\116\000\181\001\103\000\092\000\033\001\092\000\
\019\001\092\000\021\001\092\000\066\000\131\001\092\000\204\001\
\164\000\033\000\140\000\026\001\155\000\132\001\082\000\107\001\
\211\001\066\000\190\000\145\001\211\000\092\000\052\000\165\001\
\092\000\033\002\052\000\208\001\167\000\221\000\210\001\208\000\
\224\000\049\000\226\000\212\000\213\000\214\000\215\000\216\000\
\049\000\159\000\233\000\255\001\192\000\201\001\156\000\225\000\
\167\001\092\000\077\001\109\001\052\002\135\000\052\000\228\000\
\147\000\002\001\003\001\004\001\077\000\170\000\037\000\009\001\
\044\001\132\000\122\000\020\001\038\000\022\001\227\000\150\000\
\132\000\111\001\112\001\231\000\232\000\151\000\234\000\235\000\
\236\000\237\000\038\001\055\001\077\000\018\001\113\001\134\000\
\135\000\123\000\169\000\238\000\084\000\243\001\134\000\135\000\
\172\000\068\000\060\002\028\002\136\000\160\000\051\001\051\000\
\053\001\034\001\064\002\136\000\109\001\169\000\044\001\187\000\
\069\000\052\000\079\001\170\000\171\000\172\000\173\000\055\000\
\174\000\175\000\176\000\141\001\029\002\229\001\000\001\063\001\
\186\000\006\002\111\001\112\001\157\000\177\000\048\001\049\001\
\082\000\067\001\178\000\097\001\088\000\069\000\088\000\113\001\
\088\000\188\000\088\000\103\000\138\000\088\000\118\000\179\000\
\112\000\137\000\082\000\001\000\002\000\161\000\064\001\065\001\
\139\000\066\000\113\000\140\000\088\000\180\000\138\000\088\000\
\162\000\163\000\094\001\137\000\181\000\182\000\114\000\115\000\
\064\000\106\001\139\000\088\000\189\000\140\000\164\000\146\001\
\080\001\081\001\082\001\116\000\117\001\044\001\195\001\152\000\
\088\000\183\000\037\000\183\000\249\001\183\000\183\000\210\000\
\105\001\205\001\183\000\192\000\233\001\200\001\217\000\144\000\
\183\000\183\000\144\000\212\001\072\000\152\000\122\001\123\001\
\209\001\183\000\132\000\155\000\148\001\144\000\133\001\153\001\
\035\002\168\000\216\001\037\002\168\000\144\000\191\000\044\001\
\183\000\037\000\155\001\156\000\157\001\074\000\159\001\168\000\
\134\000\135\000\251\001\161\001\158\000\183\000\035\001\168\000\
\182\000\238\001\182\000\054\002\182\000\182\000\146\000\036\001\
\044\001\182\000\172\001\075\000\173\001\174\001\037\001\182\000\
\182\000\182\000\158\000\047\002\146\000\164\000\252\001\078\000\
\182\000\155\000\160\001\187\001\146\000\190\000\250\001\190\000\
\192\001\190\000\190\000\164\000\177\001\079\000\190\000\182\000\
\182\000\167\000\109\001\164\000\190\000\185\001\186\001\155\000\
\188\001\189\001\190\001\035\001\182\000\190\000\159\000\167\000\
\070\001\159\000\080\000\156\000\127\001\213\001\156\000\167\000\
\111\001\112\001\075\001\037\001\159\000\147\000\081\000\206\001\
\207\001\156\000\170\000\221\001\159\000\170\000\020\002\223\001\
\217\001\156\000\023\002\147\000\150\000\220\001\024\002\025\002\
\170\000\144\001\151\000\147\000\234\001\083\000\202\000\004\002\
\170\000\057\001\150\000\207\000\058\001\209\000\086\000\169\000\
\151\000\135\000\150\000\044\001\244\001\085\000\245\001\246\001\
\151\000\235\001\160\000\049\002\091\000\169\000\048\002\240\001\
\241\001\242\001\187\000\110\000\187\000\169\000\187\000\187\000\
\160\000\101\000\074\001\187\000\005\002\248\001\057\002\058\002\
\160\000\187\000\187\000\186\000\171\000\186\000\171\000\186\000\
\186\000\157\000\187\000\132\000\186\000\008\002\058\000\114\000\
\114\000\059\000\186\000\186\000\188\000\104\000\188\000\157\000\
\188\000\188\000\060\000\186\000\050\000\188\000\050\000\157\000\
\107\000\134\000\135\000\188\000\188\000\014\002\187\000\120\001\
\111\001\112\001\044\001\032\002\188\000\178\001\136\000\061\000\
\050\000\196\001\038\002\224\001\197\001\113\001\225\001\189\000\
\044\002\189\000\108\000\189\000\189\000\021\002\109\001\109\000\
\189\000\050\000\109\001\111\000\051\002\109\001\189\000\189\000\
\040\002\041\002\042\002\043\002\109\001\117\000\192\000\189\000\
\192\000\119\000\192\000\192\000\111\001\112\001\050\002\192\000\
\111\001\112\001\120\000\111\001\112\001\192\000\192\000\026\002\
\027\002\113\001\111\001\112\001\121\000\113\001\192\000\124\000\
\113\001\191\000\236\001\191\000\131\000\191\000\191\000\113\001\
\062\002\063\002\191\000\045\002\046\002\126\000\137\000\169\000\
\191\000\191\000\093\000\109\001\091\000\170\000\171\000\172\000\
\032\001\191\000\174\000\175\000\176\000\065\000\138\000\065\000\
\065\000\065\000\086\000\065\000\086\000\112\000\086\000\177\000\
\086\000\111\001\112\001\086\000\178\000\139\000\065\000\113\000\
\006\001\146\000\007\001\086\000\147\000\065\000\113\001\148\000\
\149\000\179\000\086\000\114\000\115\000\086\000\175\000\153\000\
\175\000\065\000\065\000\065\000\065\000\065\000\152\000\180\000\
\116\000\086\000\086\000\220\000\150\000\222\000\181\000\182\000\
\154\000\065\000\159\000\098\000\160\000\098\000\086\000\098\000\
\168\000\098\000\039\000\066\000\098\000\066\000\066\000\066\000\
\040\000\066\000\103\000\041\000\098\000\016\002\109\001\189\000\
\130\000\102\000\058\000\098\000\193\000\059\000\098\000\200\000\
\195\000\201\000\042\000\066\000\204\000\043\000\088\000\044\000\
\045\000\205\000\098\000\098\000\111\001\112\001\218\000\066\000\
\066\000\066\000\066\000\206\000\085\000\219\000\085\000\098\000\
\085\000\113\001\085\000\061\000\046\000\085\000\070\000\066\000\
\070\000\070\000\070\000\229\000\070\000\085\000\056\000\254\000\
\255\000\056\000\005\001\023\001\085\000\025\001\039\000\085\000\
\028\001\029\001\056\000\030\001\040\000\031\001\070\000\097\000\
\039\000\040\001\041\001\085\000\085\000\042\001\040\000\043\001\
\222\001\041\000\070\000\070\000\070\000\046\001\042\000\056\000\
\085\000\043\000\047\001\044\000\045\000\132\000\039\000\039\002\
\042\000\062\001\070\000\050\001\040\000\044\000\045\000\097\000\
\069\001\052\001\007\002\054\001\109\001\061\001\115\000\000\002\
\046\000\066\001\086\000\134\000\135\000\112\000\042\000\109\001\
\068\001\118\000\046\000\044\000\045\000\086\000\072\001\113\000\
\136\000\076\001\111\001\112\001\086\000\071\001\034\002\086\000\
\135\000\091\001\087\001\114\000\115\000\111\001\112\001\113\001\
\046\000\112\000\084\001\086\000\086\000\112\000\086\001\088\001\
\116\000\089\001\113\001\113\000\125\000\090\001\093\001\113\000\
\086\000\098\001\004\000\005\000\006\000\007\000\095\001\114\000\
\115\000\008\000\009\000\114\000\115\000\010\000\011\000\012\000\
\013\000\014\000\096\001\015\000\116\000\103\001\099\001\104\001\
\116\000\017\002\016\000\018\002\114\001\017\000\018\000\019\000\
\020\000\109\001\021\000\109\001\028\002\022\000\023\000\024\000\
\025\000\055\002\109\001\026\000\109\001\108\001\027\000\028\000\
\069\000\115\001\069\000\069\000\069\000\116\001\069\000\111\001\
\112\001\111\001\112\001\056\002\109\001\119\001\121\001\134\001\
\111\001\112\001\111\001\112\001\113\001\126\001\113\001\109\001\
\069\000\182\001\044\001\109\001\136\001\113\001\135\001\113\001\
\132\000\139\001\111\001\112\001\069\000\069\000\069\000\137\001\
\142\001\140\001\147\001\149\001\152\001\111\001\112\001\113\001\
\150\001\111\001\112\001\240\000\241\000\242\000\134\000\135\000\
\112\000\164\001\113\001\156\001\151\001\132\000\113\001\073\001\
\132\000\158\001\113\000\136\000\133\000\162\001\109\001\078\001\
\190\000\163\001\169\001\109\001\166\001\110\001\114\000\115\000\
\176\001\065\000\013\002\134\000\135\000\171\001\134\000\135\000\
\065\000\191\000\175\001\116\000\111\001\112\001\134\000\135\000\
\136\000\111\001\112\001\136\000\112\000\179\001\180\001\065\000\
\065\000\113\001\132\000\136\000\109\001\183\001\113\001\134\000\
\135\000\184\001\193\001\198\001\065\000\194\001\199\001\202\001\
\191\001\215\001\114\000\115\000\136\000\203\001\218\001\219\001\
\134\000\135\000\111\001\112\001\228\001\011\001\230\001\116\000\
\012\001\231\001\239\001\144\000\112\001\136\000\013\001\113\001\
\245\000\014\001\246\000\247\001\254\001\015\001\001\002\002\002\
\247\000\003\002\009\002\248\000\010\002\011\002\015\002\091\000\
\016\001\091\000\019\002\091\000\012\002\091\000\017\001\022\002\
\091\000\095\000\249\000\095\000\053\002\095\000\031\002\095\000\
\250\000\036\002\095\000\061\002\037\000\037\000\103\000\091\000\
\075\000\099\000\091\000\099\000\048\000\099\000\060\000\099\000\
\081\000\095\000\099\000\119\000\122\000\119\000\122\000\119\000\
\122\000\119\000\122\000\079\000\119\000\122\000\054\000\116\000\
\101\000\099\000\073\000\128\000\062\000\126\000\171\000\037\000\
\109\000\045\000\197\000\179\000\195\000\177\000\214\001\010\001\
\134\000\107\000\105\000\132\000\130\000\118\001\083\001\024\001\
\230\000\143\001\056\001\232\001\253\001\237\001\059\002\000\000\
\000\000\000\000\000\000\000\000\168\001"

let yycheck = "\002\000\
\037\000\000\000\009\000\010\000\103\000\012\000\013\000\096\000\
\177\000\016\000\031\001\005\000\147\000\000\000\246\000\004\001\
\004\001\009\001\000\000\020\001\009\000\015\000\000\000\012\000\
\093\000\012\001\033\000\033\001\013\001\006\001\003\001\009\001\
\013\001\020\001\000\000\004\001\004\001\074\000\004\001\004\001\
\139\000\042\001\043\001\030\001\004\001\013\000\255\000\020\001\
\054\001\027\001\027\001\020\001\000\000\122\000\153\000\042\001\
\043\001\030\001\026\001\018\000\026\001\004\001\021\000\022\000\
\067\000\042\001\034\000\035\000\055\001\042\001\043\001\000\000\
\064\001\061\001\063\001\056\001\044\001\000\000\055\001\044\001\
\169\000\000\000\055\001\104\001\044\001\003\001\175\000\005\001\
\157\000\007\001\159\000\009\001\042\001\004\001\012\001\131\001\
\000\000\052\001\066\000\168\000\000\000\044\001\063\001\016\001\
\140\001\055\001\000\000\009\001\111\000\027\001\005\001\087\001\
\030\001\007\002\009\001\136\001\000\000\120\000\139\001\108\000\
\123\000\110\000\125\000\112\000\113\000\114\000\115\000\116\000\
\117\000\000\000\133\000\012\001\091\000\044\001\000\000\124\000\
\089\001\055\001\005\001\020\001\034\002\043\001\037\001\003\001\
\000\000\148\000\149\000\150\000\003\001\000\000\013\001\154\000\
\008\001\020\001\004\001\158\000\013\001\160\000\126\000\000\000\
\020\001\042\001\043\001\131\000\132\000\000\000\134\000\135\000\
\136\000\137\000\177\000\027\001\027\001\156\000\055\001\042\001\
\043\001\027\001\000\000\138\000\025\001\005\001\042\001\043\001\
\020\001\013\001\053\002\012\001\055\001\000\000\193\000\013\001\
\195\000\176\000\061\002\055\001\020\001\004\001\008\001\000\000\
\028\001\037\001\239\000\010\001\011\001\012\001\013\001\013\001\
\015\001\016\001\017\001\044\001\037\001\166\001\013\001\204\000\
\000\000\027\001\042\001\043\001\000\000\028\001\190\000\191\000\
\009\001\005\001\033\001\008\001\003\001\028\001\005\001\055\001\
\007\001\000\000\009\001\044\001\009\001\012\001\047\001\046\001\
\020\001\009\001\027\001\001\000\002\000\002\001\205\000\206\000\
\009\001\243\000\030\001\009\001\027\001\060\001\027\001\030\001\
\013\001\014\001\005\001\027\001\067\001\068\001\042\001\043\001\
\013\001\016\001\027\001\042\001\000\000\027\001\027\001\052\001\
\240\000\241\000\242\000\055\001\023\001\008\001\121\001\005\001\
\055\001\003\001\025\001\005\001\197\001\007\001\008\001\110\000\
\015\001\132\001\012\001\000\000\171\001\126\001\117\000\005\001\
\018\001\019\001\008\001\142\001\013\001\027\001\029\001\030\001\
\137\001\027\001\020\001\004\001\055\001\019\001\037\001\062\001\
\009\002\005\001\147\001\012\002\008\001\027\001\000\000\008\001\
\042\001\064\001\069\001\020\001\071\001\013\001\073\001\019\001\
\042\001\043\001\019\001\078\001\005\001\055\001\004\001\027\001\
\003\001\180\001\005\001\036\002\007\001\008\001\005\001\013\001\
\008\001\012\001\093\001\013\001\095\001\096\001\020\001\018\001\
\019\001\020\001\027\001\019\001\019\001\005\001\201\001\013\001\
\027\001\005\001\074\001\110\001\027\001\003\001\199\001\005\001\
\115\001\007\001\008\001\019\001\099\001\013\001\012\001\042\001\
\043\001\005\001\020\001\027\001\018\001\108\001\109\001\027\001\
\111\001\112\001\113\001\004\001\055\001\027\001\005\001\019\001\
\218\000\008\001\013\001\005\001\013\001\144\001\008\001\027\001\
\042\001\043\001\228\000\020\001\019\001\005\001\013\001\134\001\
\135\001\019\001\005\001\158\001\027\001\008\001\247\001\162\001\
\149\001\027\001\251\001\019\001\005\001\154\001\255\001\000\002\
\019\001\027\001\005\001\027\001\175\001\013\001\102\000\212\001\
\027\001\013\001\019\001\107\000\016\001\109\000\013\001\005\001\
\019\001\043\001\027\001\008\001\191\001\004\001\193\001\194\001\
\027\001\176\001\005\001\028\002\006\001\019\001\019\001\182\001\
\183\001\184\001\003\001\009\001\005\001\027\001\007\001\008\001\
\019\001\013\001\003\001\012\001\215\001\196\001\047\002\048\002\
\027\001\018\001\019\001\003\001\003\001\005\001\005\001\007\001\
\008\001\005\001\027\001\020\001\012\001\218\001\001\001\026\001\
\027\001\004\001\018\001\019\001\003\001\013\001\005\001\019\001\
\007\001\008\001\013\001\027\001\007\001\012\001\009\001\027\001\
\004\001\042\001\043\001\018\001\019\001\236\001\055\001\005\001\
\042\001\043\001\008\001\006\002\027\001\003\001\055\001\034\001\
\027\001\003\001\013\002\013\001\003\001\055\001\016\001\003\001\
\019\002\005\001\004\001\007\001\008\001\005\001\020\001\004\001\
\012\001\044\001\020\001\027\001\031\002\020\001\018\001\019\001\
\015\002\016\002\017\002\018\002\020\001\009\001\003\001\027\001\
\005\001\009\001\007\001\008\001\042\001\043\001\029\002\012\001\
\042\001\043\001\027\001\042\001\043\001\018\001\019\001\001\002\
\002\002\055\001\042\001\043\001\003\001\055\001\027\001\009\001\
\055\001\003\001\003\001\005\001\004\001\007\001\008\001\055\001\
\055\002\056\002\012\001\021\002\022\002\006\001\009\001\004\001\
\018\001\019\001\004\001\020\001\006\001\010\001\011\001\012\001\
\013\001\027\001\015\001\016\001\017\001\003\001\003\001\005\001\
\006\001\007\001\003\001\009\001\005\001\020\001\007\001\028\001\
\009\001\042\001\043\001\012\001\033\001\044\001\020\001\030\001\
\013\001\013\001\015\001\020\001\009\001\027\001\055\001\027\001\
\027\001\046\001\027\001\042\001\043\001\030\001\003\001\044\001\
\005\001\039\001\040\001\041\001\042\001\043\001\020\001\060\001\
\055\001\042\001\043\001\119\000\027\001\121\000\067\001\068\001\
\027\001\055\001\004\001\003\001\027\001\005\001\055\001\007\001\
\004\001\009\001\004\001\003\001\012\001\005\001\006\001\007\001\
\010\001\009\001\044\001\013\001\020\001\019\001\020\001\009\001\
\004\001\004\001\001\001\027\001\027\001\004\001\030\001\005\001\
\027\001\006\001\028\001\027\001\020\001\031\001\013\001\033\001\
\034\001\044\001\042\001\043\001\042\001\043\001\004\001\039\001\
\040\001\041\001\042\001\044\001\003\001\013\001\005\001\055\001\
\007\001\055\001\009\001\034\001\054\001\012\001\003\001\055\001\
\005\001\006\001\007\001\005\001\009\001\020\001\001\001\015\001\
\020\001\004\001\027\001\064\001\027\001\009\001\004\001\030\001\
\013\001\004\001\013\001\004\001\010\001\004\001\027\001\013\001\
\004\001\013\001\015\001\042\001\043\001\013\001\010\001\013\001\
\007\001\013\001\039\001\040\001\041\001\005\001\028\001\034\001\
\055\001\031\001\003\001\033\001\034\001\020\001\004\001\007\001\
\028\001\003\001\055\001\007\001\010\001\033\001\034\001\013\001\
\027\001\005\001\009\001\005\001\020\001\005\001\043\001\012\001\
\054\001\005\001\009\001\042\001\043\001\020\001\028\001\020\001\
\005\001\047\001\054\001\033\001\034\001\020\001\005\001\030\001\
\055\001\005\001\042\001\043\001\027\001\027\001\009\001\030\001\
\043\001\005\001\004\001\042\001\043\001\042\001\043\001\055\001\
\054\001\020\001\013\001\042\001\043\001\020\001\013\001\013\001\
\055\001\004\001\055\001\030\001\027\001\003\001\027\001\030\001\
\055\001\005\001\021\001\022\001\023\001\024\001\027\001\042\001\
\043\001\028\001\029\001\042\001\043\001\032\001\033\001\034\001\
\035\001\036\001\027\001\038\001\055\001\013\001\006\001\004\001\
\055\001\012\001\045\001\012\001\005\001\048\001\049\001\050\001\
\051\001\020\001\053\001\020\001\012\001\056\001\057\001\058\001\
\059\001\019\001\020\001\062\001\020\001\004\001\065\001\066\001\
\003\001\064\001\005\001\006\001\007\001\005\001\009\001\042\001\
\043\001\042\001\043\001\019\001\020\001\005\001\044\001\037\001\
\042\001\043\001\042\001\043\001\055\001\018\001\055\001\020\001\
\027\001\018\001\008\001\020\001\004\001\055\001\020\001\055\001\
\020\001\004\001\042\001\043\001\039\001\040\001\041\001\009\001\
\044\001\004\001\020\001\020\001\046\001\042\001\043\001\055\001\
\015\001\042\001\043\001\039\001\040\001\041\001\042\001\043\001\
\020\001\006\001\055\001\005\001\007\001\020\001\055\001\027\001\
\020\001\027\001\030\001\055\001\027\001\027\001\020\001\027\001\
\020\001\005\001\046\001\020\001\020\001\027\001\042\001\043\001\
\020\001\020\001\027\001\042\001\043\001\012\001\042\001\043\001\
\027\001\020\001\027\001\055\001\042\001\043\001\042\001\043\001\
\055\001\042\001\043\001\055\001\020\001\005\001\044\001\042\001\
\043\001\055\001\020\001\055\001\020\001\037\001\055\001\042\001\
\043\001\020\001\027\001\005\001\055\001\027\001\013\001\003\001\
\063\001\027\001\042\001\043\001\055\001\005\001\020\001\015\001\
\042\001\043\001\042\001\043\001\005\001\001\001\005\001\055\001\
\004\001\015\001\005\001\026\001\043\001\055\001\010\001\055\001\
\002\001\013\001\004\001\009\001\005\001\017\001\005\001\005\001\
\010\001\005\001\020\001\013\001\015\001\007\001\009\001\003\001\
\028\001\005\001\064\001\007\001\012\001\009\001\034\001\005\001\
\012\001\003\001\028\001\005\001\009\001\007\001\027\001\009\001\
\034\001\020\001\012\001\009\001\025\001\000\000\005\001\027\001\
\005\001\003\001\030\001\005\001\027\001\007\001\005\001\009\001\
\027\001\027\001\012\001\003\001\003\001\005\001\005\001\007\001\
\007\001\009\001\009\001\027\001\012\001\012\001\005\001\027\001\
\005\001\027\001\005\001\005\001\005\001\005\001\020\001\064\001\
\007\001\064\001\005\001\005\001\005\001\005\001\145\001\155\000\
\007\001\007\001\007\001\007\001\007\001\025\001\243\000\166\000\
\130\000\047\001\199\000\170\001\202\001\178\001\050\002\255\255\
\255\255\255\255\255\255\255\255\090\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 132 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 851 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 136 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 862 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 138 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 872 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 140 "pitparser.mly"
 ( (TEquation(_2, _3, _5)) :: _7 )
# 882 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 142 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 891 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 144 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 899 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 146 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 908 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 148 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 918 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 150 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 927 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 152 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 936 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 154 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 945 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 156 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 955 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 158 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 964 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 160 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 974 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 162 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 983 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 164 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 992 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 166 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1001 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 168 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1009 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 170 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1018 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 172 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1026 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 174 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1035 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 176 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1043 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 178 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1051 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 180 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1060 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 182 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1068 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 184 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1077 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1086 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 190 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1095 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1104 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1112 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 197 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1124 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 203 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1134 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 205 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1142 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 207 "pitparser.mly"
        ( (TDefine(_2, [], _4)) :: _6 )
# 1151 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 209 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1161 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 211 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1170 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "pitparser.mly"
        ( [] )
# 1176 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 217 "pitparser.mly"
 ( _1, _3 )
# 1184 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 223 "pitparser.mly"
        ( _1 )
# 1191 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 225 "pitparser.mly"
        ( _1 )
# 1198 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "pitparser.mly"
        ( "*", parse_extent() )
# 1204 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "pitparser.mly"
        ( ".", parse_extent() )
# 1210 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 233 "pitparser.mly"
        ( [_1] )
# 1217 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 235 "pitparser.mly"
        ( _1 :: _2 )
# 1225 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 239 "pitparser.mly"
 ( [_1] )
# 1232 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 241 "pitparser.mly"
        ( _1 :: _3 )
# 1240 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 247 "pitparser.mly"
        ( _2 )
# 1247 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "pitparser.mly"
        ( [] )
# 1253 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 253 "pitparser.mly"
    ( _1 :: _3 )
# 1261 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 255 "pitparser.mly"
    ( [_1] )
# 1268 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 259 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1277 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 262 "pitparser.mly"
        ( [(_1,_3)] )
# 1285 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 266 "pitparser.mly"
        ( _1 )
# 1292 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "pitparser.mly"
        ( [] )
# 1298 "pitparser.ml"
               : 'vartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 272 "pitparser.mly"
        ( _2 )
# 1305 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "pitparser.mly"
        ( [] )
# 1311 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 278 "pitparser.mly"
        ( _1 )
# 1318 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1325 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 285 "pitparser.mly"
        ( _1 )
# 1332 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 287 "pitparser.mly"
        ( [] )
# 1338 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 291 "pitparser.mly"
    ( _1 :: _3 )
# 1346 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 293 "pitparser.mly"
    ( [_1] )
# 1353 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 299 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1361 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 301 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1370 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 304 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1377 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 306 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1385 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 308 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1393 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 310 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1400 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 312 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1408 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 314 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1416 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 316 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1426 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 323 "pitparser.mly"
 ( _1 :: _3 )
# 1434 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 325 "pitparser.mly"
 ( [_1] )
# 1441 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 329 "pitparser.mly"
        ( _1 )
# 1448 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 331 "pitparser.mly"
        ( [] )
# 1454 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 337 "pitparser.mly"
    ( (_1, Some _4) )
# 1462 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 339 "pitparser.mly"
    ( (_1, None) )
# 1469 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 343 "pitparser.mly"
    ( _1 :: _3 )
# 1477 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 345 "pitparser.mly"
    ( [_1] )
# 1484 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 351 "pitparser.mly"
    ( _1 :: _3 )
# 1492 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 353 "pitparser.mly"
    ( [_1] )
# 1499 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 357 "pitparser.mly"
    ( PRealQuery(_1) )
# 1506 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 359 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1513 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 361 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1520 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 365 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1528 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 367 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1535 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 369 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1544 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 371 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1552 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 373 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1560 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 375 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1567 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 377 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1575 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 379 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1583 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 381 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1590 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 383 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1597 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 385 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1605 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 387 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1615 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 392 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1623 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 394 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1630 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 396 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1639 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 400 "pitparser.mly"
 ( _1 :: _3 )
# 1647 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 402 "pitparser.mly"
 ( [_1] )
# 1654 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 406 "pitparser.mly"
        ( _1 )
# 1661 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "pitparser.mly"
        ( [] )
# 1667 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 413 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1676 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 415 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1684 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 417 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 1693 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 419 "pitparser.mly"
        ( [(_1, _3)] )
# 1701 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 423 "pitparser.mly"
        ( _1 )
# 1708 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 425 "pitparser.mly"
        ( [] )
# 1714 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 431 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 1723 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 433 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 1733 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 435 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 1741 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 439 "pitparser.mly"
    ( _2 )
# 1748 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "pitparser.mly"
    ( -1 )
# 1754 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 445 "pitparser.mly"
    ( _2 )
# 1761 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 447 "pitparser.mly"
    ( -1 )
# 1767 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 451 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 1775 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 453 "pitparser.mly"
        ( PFGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1782 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 455 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 1789 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 457 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 1799 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 462 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 1807 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 464 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 1814 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 466 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 1821 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 468 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 1830 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 473 "pitparser.mly"
 ( _1 :: _3 )
# 1838 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 475 "pitparser.mly"
 ( [_1] )
# 1845 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 479 "pitparser.mly"
        ( _1 )
# 1852 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 481 "pitparser.mly"
        ( [] )
# 1858 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 486 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1867 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 488 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1875 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 490 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 1884 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 492 "pitparser.mly"
        ( [(_1, _3)] )
# 1892 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 496 "pitparser.mly"
        ( _1 )
# 1899 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 498 "pitparser.mly"
        ( [] )
# 1905 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 504 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 1915 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 506 "pitparser.mly"
 ( [_1,_2,_4] )
# 1924 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 512 "pitparser.mly"
        ( PClause(_1,_3) )
# 1932 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 514 "pitparser.mly"
        ( PFact(_1) )
# 1939 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 516 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 1947 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 518 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 1955 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 522 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 1964 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 524 "pitparser.mly"
 ( [_1,_2] )
# 1972 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 530 "pitparser.mly"
 ( _2 )
# 1979 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 532 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 1986 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 534 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 1994 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 536 "pitparser.mly"
 ( PRepl _2 )
# 2001 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 538 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2011 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 541 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2020 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 545 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2027 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 548 "pitparser.mly"
 ( PRestr(_2, _4, _6) )
# 2036 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 550 "pitparser.mly"
 ( PTest(_2,_4,_6) )
# 2045 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 552 "pitparser.mly"
 ( PTest(_2,_4,PNil) )
# 2053 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 554 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2062 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 556 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2071 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 558 "pitparser.mly"
 ( PLet(_2,_4,_6,PNil) )
# 2080 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 560 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2088 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 562 "pitparser.mly"
 ( PLet(_2,_4,_6,_8) )
# 2098 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 564 "pitparser.mly"
        ( PLetFilter(_2,_4,_6,PNil) )
# 2107 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 566 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2115 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 568 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )
# 2127 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 572 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2136 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optinprocess) in
    Obj.repr(
# 574 "pitparser.mly"
        ( PGet(_2, _4, (PPIdent ("true", parse_extent()), parse_extent()), _6) )
# 2145 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'optinprocess) in
    Obj.repr(
# 576 "pitparser.mly"
        ( PGet(_2, _4, _7, _8) )
# 2155 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 578 "pitparser.mly"
 ( PPar(_1,_3) )
# 2163 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 580 "pitparser.mly"
        ( PEvent(_2, _4, _6) )
# 2172 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 582 "pitparser.mly"
        ( PPhase(_2, _3) )
# 2180 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 586 "pitparser.mly"
        ( _2 )
# 2187 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 588 "pitparser.mly"
        ( PNil )
# 2193 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 592 "pitparser.mly"
        ( _2 )
# 2200 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 594 "pitparser.mly"
        ( PNil )
# 2206 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 598 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2213 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 600 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2221 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 602 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2231 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 607 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2239 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 609 "pitparser.mly"
    ( PPatEqual(_2) )
# 2246 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 613 "pitparser.mly"
    ( _1 :: _3 )
# 2254 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 615 "pitparser.mly"
    ( [_1] )
# 2261 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 619 "pitparser.mly"
    ( _1 )
# 2268 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 621 "pitparser.mly"
    ( [] )
# 2274 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 627 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2282 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 629 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2291 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 632 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2298 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 634 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2306 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 636 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2314 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 638 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2321 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 640 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2329 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 642 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2337 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 644 "pitparser.mly"
 ( PPRestr(_2, _4, _6), parse_extent() )
# 2346 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 646 "pitparser.mly"
 ( PPTest(_2,_4,_6), parse_extent() )
# 2355 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 648 "pitparser.mly"
 ( PPLetIn(_2,_4,_6), parse_extent() )
# 2364 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 650 "pitparser.mly"
 ( PPLet(_2,_4,_6,_8), parse_extent() )
# 2374 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 652 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,_8), parse_extent() )
# 2384 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 654 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2394 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 661 "pitparser.mly"
 ( _1 :: _3 )
# 2402 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 663 "pitparser.mly"
 ( [_1] )
# 2409 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 667 "pitparser.mly"
        ( _1 )
# 2416 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 669 "pitparser.mly"
        ( [] )
# 2422 "pitparser.ml"
               : 'ptermseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
