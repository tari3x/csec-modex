type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Piptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | AMONG
  | WEAKSECRET
  | DATA
  | PARAM
  | PRIVATE

open Parsing;;
let _ = parse_error;;
# 2 "piparser.mly"
(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and Xavier Allamigeon                *
 *                                                           *
 *       Copyright (C) INRIA, LIENS, MPII 2000-2009          *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "piparser.mly"

open Parsing_helper
open Ptree
open Piptree
exception Syntax

# 92 "piparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  271 (* REPL *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* EQUAL *);
  276 (* FUN *);
  277 (* EQUATION *);
  278 (* REDUCTION *);
  279 (* PREDICATE *);
  280 (* PROCESS *);
  281 (* SLASH *);
  282 (* DOT *);
    0 (* EOF *);
  283 (* LET *);
  284 (* QUERY *);
  285 (* BEFORE *);
  286 (* PUTBEGIN *);
  287 (* NONINTERF *);
  288 (* EVENT *);
  289 (* NOT *);
  290 (* ELIMTRUE *);
  291 (* FREE *);
  292 (* SUCHTHAT *);
  293 (* CLAUSES *);
  294 (* RED *);
  295 (* EQUIV *);
  296 (* EQUIVEQ *);
  297 (* WEDGE *);
  298 (* DIFF *);
  299 (* COLON *);
  300 (* NOUNIF *);
  301 (* PHASE *);
  302 (* AMONG *);
  303 (* WEAKSECRET *);
  304 (* DATA *);
  305 (* PARAM *);
  306 (* PRIVATE *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\004\000\004\000\003\000\
\003\000\003\000\003\000\019\000\019\000\018\000\018\000\005\000\
\005\000\020\000\020\000\011\000\011\000\012\000\012\000\012\000\
\012\000\023\000\023\000\021\000\021\000\024\000\024\000\024\000\
\024\000\022\000\022\000\025\000\025\000\014\000\014\000\026\000\
\026\000\026\000\015\000\010\000\010\000\027\000\027\000\027\000\
\027\000\028\000\029\000\029\000\029\000\029\000\029\000\030\000\
\030\000\030\000\030\000\030\000\033\000\033\000\031\000\031\000\
\034\000\034\000\034\000\034\000\032\000\032\000\035\000\035\000\
\009\000\009\000\007\000\013\000\013\000\008\000\008\000\016\000\
\016\000\016\000\036\000\036\000\037\000\037\000\037\000\037\000\
\017\000\017\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\039\000\039\000\038\000\038\000\038\000\038\000\
\040\000\040\000\000\000"

let yylen = "\002\000\
\007\000\006\000\006\000\004\000\007\000\006\000\006\000\006\000\
\006\000\006\000\004\000\004\000\004\000\006\000\005\000\004\000\
\005\000\003\000\003\000\001\000\000\000\005\000\004\000\004\000\
\006\000\001\000\003\000\003\000\001\000\001\000\000\000\003\000\
\001\000\005\000\001\000\003\000\001\000\004\000\001\000\003\000\
\004\000\003\000\001\000\001\000\000\000\006\000\004\000\005\000\
\003\000\001\000\000\000\005\000\003\000\002\000\000\000\003\000\
\003\000\003\000\002\000\003\000\001\000\001\000\001\000\004\000\
\004\000\003\000\003\000\003\000\003\000\001\000\003\000\004\000\
\001\000\003\000\004\000\002\000\003\000\001\000\001\000\000\000\
\006\000\004\000\005\000\003\000\001\000\000\000\005\000\003\000\
\002\000\000\000\004\000\002\000\000\000\002\000\000\000\003\000\
\003\000\003\000\003\000\001\000\003\000\001\000\003\000\003\000\
\003\000\002\000\003\000\001\000\002\000\001\000\004\000\006\000\
\004\000\007\000\007\000\006\000\008\000\006\000\008\000\003\000\
\006\000\003\000\002\000\000\000\001\000\003\000\004\000\002\000\
\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\000\110\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\000\000\000\000\122\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\050\000\056\000\000\000\000\000\011\000\
\058\000\057\000\000\000\070\000\000\000\092\000\060\000\000\000\
\012\000\036\000\000\000\000\000\054\000\000\000\096\000\098\000\
\097\000\016\000\000\000\099\000\101\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\000\000\079\000\094\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\028\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\126\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\038\000\000\000\000\000\
\041\000\065\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\076\000\000\000\000\000\
\000\000\000\000\091\000\000\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\003\000\006\000\000\000\
\000\000\000\000\000\000\129\000\127\000\000\000\000\000\000\000\
\007\000\000\000\000\000\071\000\069\000\000\000\000\000\034\000\
\014\000\000\000\074\000\000\000\000\000\000\000\000\000\085\000\
\077\000\000\000\008\000\002\000\009\000\010\000\000\000\000\000\
\023\000\025\000\005\000\000\000\000\000\000\000\000\000\000\000\
\121\000\000\000\000\000\000\000\072\000\000\000\000\000\075\000\
\000\000\001\000\022\000\115\000\114\000\000\000\000\000\048\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\087\000\083\000\000\000\081\000"

let yydgoto = "\002\000\
\017\000\018\000\053\000\131\000\083\000\035\000\060\000\125\000\
\201\000\041\000\048\000\042\000\104\000\111\000\172\000\055\000\
\056\000\069\000\070\000\049\000\092\000\163\000\093\000\164\000\
\181\000\044\000\045\000\046\000\173\000\196\000\197\000\031\001\
\198\000\032\001\253\000\057\000\058\000\146\000\155\000\147\000"

let yysindex = "\051\000\
\077\000\000\000\102\000\021\255\168\255\082\255\052\000\114\255\
\142\255\116\000\116\000\134\255\154\255\173\255\181\255\000\000\
\000\000\238\255\231\255\102\000\059\000\203\255\237\255\168\255\
\053\000\087\000\088\000\000\000\000\000\168\255\116\000\240\255\
\086\000\098\000\010\000\083\000\103\000\039\255\100\000\106\000\
\096\000\013\255\094\000\099\000\136\000\000\000\101\000\120\000\
\145\000\065\255\140\000\024\255\080\255\125\000\109\000\077\000\
\092\000\188\255\110\000\127\000\128\000\130\000\138\000\143\000\
\102\000\146\000\102\000\155\000\156\000\000\000\102\000\102\000\
\148\000\193\255\151\000\102\000\102\000\157\000\147\000\056\000\
\070\000\102\000\131\000\144\000\162\000\159\000\168\255\000\000\
\168\255\075\255\166\000\165\000\000\000\103\000\147\255\103\000\
\152\000\129\000\077\000\103\000\103\000\105\000\160\000\000\000\
\052\000\169\000\077\000\114\255\140\000\163\000\149\000\102\000\
\102\000\102\000\077\000\116\000\000\000\116\000\116\000\116\000\
\116\000\000\000\252\255\164\000\168\000\077\000\167\000\064\000\
\154\000\161\000\077\000\179\000\158\000\180\000\102\000\000\000\
\181\000\170\000\074\255\000\000\168\255\182\000\184\000\168\255\
\185\000\187\000\183\000\146\000\056\000\000\000\116\000\102\000\
\102\000\168\255\000\000\157\000\016\255\103\000\000\000\186\000\
\173\000\188\000\190\000\000\000\000\000\103\000\146\000\000\000\
\000\000\000\000\105\000\000\000\033\255\000\000\000\000\102\000\
\000\000\000\000\172\000\174\000\000\000\077\000\000\000\000\000\
\000\000\000\000\109\000\000\000\000\000\000\000\000\000\000\000\
\191\000\252\255\132\000\192\000\099\000\000\000\000\000\193\000\
\175\000\000\000\177\000\189\000\194\000\195\000\102\000\000\000\
\077\000\102\000\000\000\000\000\077\000\077\000\196\000\157\000\
\102\000\056\000\040\000\056\000\000\000\000\000\200\000\198\000\
\199\000\202\000\157\000\077\000\000\000\000\000\103\000\197\000\
\000\000\000\000\000\000\043\255\094\000\203\000\096\255\105\000\
\105\000\207\000\077\000\103\000\000\000\000\000\208\000\252\255\
\124\000\252\255\000\000\204\000\000\000\077\000\077\000\077\000\
\077\000\201\000\223\255\000\000\210\000\000\000\000\000\077\000\
\209\000\213\000\168\255\000\000\000\000\168\255\168\255\159\000\
\000\000\212\000\103\000\000\000\000\000\033\255\153\000\000\000\
\000\000\215\000\000\000\214\000\206\000\216\000\219\000\000\000\
\000\000\252\255\000\000\000\000\000\000\000\000\077\000\102\000\
\000\000\000\000\000\000\159\000\159\000\157\000\041\000\062\000\
\000\000\147\255\220\000\163\000\000\000\252\255\217\000\000\000\
\222\000\000\000\000\000\000\000\000\000\168\255\168\255\000\000\
\147\255\000\000\223\000\252\255\193\000\157\000\157\000\000\000\
\124\000\224\000\000\000\000\000\124\000\000\000"

let yyrindex = "\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\229\000\200\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\230\000\123\255\000\000\000\000\
\000\000\000\000\224\255\135\255\211\000\000\000\113\255\000\000\
\218\000\225\255\221\000\110\255\000\000\000\000\190\255\033\000\
\000\000\000\000\000\000\226\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\000\000\229\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\236\255\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\030\255\161\255\000\000\000\000\230\000\231\000\216\255\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\221\000\000\000\000\000\055\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\255\000\000\225\000\033\000\000\000\000\000\
\000\000\000\000\033\000\022\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\
\229\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\230\000\000\000\085\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\095\000\000\000\000\000\000\000\000\000\000\000\
\000\000\235\000\044\255\035\255\148\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\033\000\033\000\000\000\008\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\236\000\100\255\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\235\000\
\238\000\000\000\000\000\000\000\000\000\033\000\033\000\033\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\239\000\000\000\000\000\000\000\222\255\184\255\000\000\
\000\000\226\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\002\000\002\000\014\000\025\000\026\000\
\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\
\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\242\000\000\000\000\000\018\000\019\000\000\000\
\000\000\243\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\089\000\000\000\001\000\228\000\220\255\232\255\000\000\000\000\
\000\000\094\001\092\001\248\255\218\255\119\001\004\000\005\000\
\121\001\201\255\144\255\000\000\047\001\000\000\085\001\083\255\
\205\000\000\000\000\000\083\001\112\255\117\255\084\255\000\000\
\005\001\233\254\232\000\140\001\000\000\229\255\090\255\127\255"

let yytablesize = 557
let yytable = "\074\000\
\050\000\124\000\109\000\022\000\084\000\078\000\120\000\111\000\
\123\000\088\000\043\000\109\000\051\000\112\000\054\000\137\000\
\113\000\119\000\117\000\223\000\068\000\247\000\211\000\087\000\
\118\000\116\000\239\000\071\000\091\000\133\000\033\000\100\000\
\039\000\023\000\039\000\079\000\039\000\039\000\039\000\078\000\
\240\000\228\000\094\000\078\000\095\000\158\000\073\000\033\000\
\073\000\076\001\073\000\001\000\073\000\078\001\101\000\039\000\
\183\000\033\000\039\000\078\000\078\000\100\000\156\000\242\000\
\157\000\130\000\112\000\134\000\073\000\073\000\039\000\068\000\
\138\000\241\000\039\000\028\001\142\000\143\000\094\000\078\000\
\095\000\096\000\150\000\100\000\101\000\091\000\132\000\091\000\
\073\000\066\000\012\001\169\000\170\000\066\000\036\000\022\001\
\023\001\226\000\113\000\214\000\021\001\080\000\215\000\240\000\
\070\000\049\001\101\000\070\000\043\000\103\000\066\000\222\000\
\068\000\184\000\185\000\035\000\216\000\080\000\080\000\219\000\
\187\000\114\000\189\000\190\000\191\000\039\000\047\000\039\000\
\026\000\227\000\235\000\039\000\064\001\060\001\061\001\068\000\
\241\000\080\000\035\000\093\000\070\000\039\000\093\000\093\000\
\117\000\037\000\059\000\072\001\039\000\091\000\057\001\026\000\
\225\000\068\000\038\000\224\000\093\000\234\000\251\000\161\000\
\093\000\162\000\236\000\093\000\039\000\043\000\061\000\039\000\
\043\000\043\000\067\001\024\000\093\000\093\000\237\000\093\000\
\068\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\074\001\062\000\043\000\168\000\068\000\043\000\010\001\068\000\
\068\000\063\000\032\000\177\000\121\000\140\000\102\000\033\000\
\087\000\043\000\026\000\186\000\026\000\043\000\026\000\003\001\
\026\000\068\000\005\001\026\000\034\000\122\000\202\000\102\000\
\026\000\009\001\026\000\208\000\045\000\072\000\018\001\045\000\
\045\000\026\000\067\000\100\000\100\000\100\000\067\000\040\001\
\062\000\093\000\095\000\026\001\067\000\026\000\026\000\026\000\
\026\000\045\000\046\001\080\000\045\000\047\001\048\001\067\000\
\041\001\062\000\093\000\095\000\081\000\193\000\125\000\194\000\
\045\000\064\000\082\000\065\000\045\000\073\000\124\000\109\000\
\195\000\124\000\051\001\120\000\111\000\123\000\245\000\033\000\
\066\000\087\000\112\000\124\000\109\000\113\000\119\000\117\000\
\120\000\111\000\123\000\124\000\109\000\118\000\116\000\112\000\
\120\000\111\000\123\000\119\000\117\000\070\001\071\001\112\000\
\130\000\004\001\113\000\119\000\117\000\006\001\007\001\087\000\
\087\000\029\000\118\000\116\000\021\000\029\000\021\000\037\000\
\029\000\011\001\062\001\080\000\017\001\029\000\071\000\031\000\
\038\000\075\000\031\000\021\000\145\000\087\000\029\000\031\000\
\148\000\149\000\082\000\025\001\204\000\205\000\039\000\063\001\
\031\000\040\000\029\000\029\000\029\000\029\000\035\001\036\001\
\037\001\038\001\076\000\077\000\031\000\031\000\031\000\031\000\
\043\001\003\000\085\000\004\000\005\000\089\000\019\000\006\000\
\007\000\020\000\037\000\008\000\171\000\009\000\010\000\086\000\
\097\000\011\000\021\000\090\000\019\000\038\000\098\000\020\000\
\012\000\099\000\102\000\013\000\014\000\015\000\016\000\058\001\
\052\000\118\000\119\000\120\000\100\000\100\000\100\000\248\000\
\029\001\249\000\030\001\125\000\160\000\125\000\165\000\103\000\
\105\000\107\000\106\000\108\000\110\000\116\000\115\000\124\000\
\123\000\126\000\127\000\129\000\128\000\135\000\132\000\141\000\
\136\000\139\000\152\000\144\000\087\000\153\000\151\000\154\000\
\158\000\159\000\166\000\167\000\176\000\174\000\182\000\180\000\
\200\000\199\000\206\000\207\000\203\000\148\000\210\000\209\000\
\217\000\212\000\218\000\221\000\149\000\220\000\230\000\231\000\
\244\000\241\000\250\000\213\000\233\000\243\000\175\000\178\000\
\254\000\232\000\255\000\246\000\013\001\252\000\016\001\020\001\
\002\001\014\001\015\001\024\001\027\001\044\001\000\001\019\001\
\042\001\045\001\053\001\001\001\050\001\008\001\034\001\052\001\
\054\001\056\001\039\001\179\000\065\001\055\001\069\001\073\001\
\077\001\031\000\045\000\068\001\061\000\051\000\130\000\080\000\
\043\000\192\000\229\000\037\000\086\000\049\000\055\000\047\000\
\084\000\082\000\090\000\053\000\088\000\238\000\033\001\188\000\
\066\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\001"

let yycheck = "\024\000\
\009\000\000\000\000\000\003\000\032\000\030\000\000\000\000\000\
\000\000\000\000\007\000\050\000\009\000\000\000\010\000\071\000\
\000\000\000\000\000\000\149\000\020\000\194\000\135\000\008\001\
\000\000\000\000\171\000\004\001\037\000\066\000\009\001\019\001\
\003\001\013\001\005\001\031\000\007\001\008\001\009\001\005\001\
\008\001\026\001\004\001\009\001\006\001\003\001\003\001\026\001\
\005\001\073\001\007\001\001\000\009\001\077\001\042\001\026\001\
\112\000\036\001\029\001\025\001\026\001\019\001\087\000\176\000\
\089\000\065\000\043\001\067\000\025\001\026\001\041\001\071\000\
\072\000\041\001\045\001\248\000\076\000\077\000\004\001\045\001\
\006\001\043\001\082\000\019\001\042\001\094\000\013\001\096\000\
\045\001\005\001\220\000\100\000\101\000\009\001\013\001\240\000\
\241\000\153\000\019\001\026\001\005\001\009\001\139\000\008\001\
\005\001\016\001\042\001\008\001\105\000\045\001\026\001\148\000\
\112\000\113\000\114\000\003\001\141\000\025\001\026\001\144\000\
\116\000\042\001\118\000\119\000\120\000\003\001\013\001\005\001\
\019\001\154\000\167\000\009\001\050\001\044\001\045\001\135\000\
\041\001\045\001\026\001\005\001\041\001\019\001\008\001\009\001\
\056\000\004\001\013\001\065\001\026\001\158\000\034\001\042\001\
\152\000\153\000\013\001\151\000\009\001\166\000\197\000\013\001\
\026\001\015\001\171\000\029\001\042\001\005\001\013\001\045\001\
\008\001\009\001\054\001\004\001\025\001\026\001\171\000\041\001\
\176\000\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\068\001\013\001\026\001\099\000\005\001\029\001\218\000\008\001\
\009\001\013\001\027\001\107\000\009\001\005\001\009\001\032\001\
\008\001\041\001\003\001\115\000\005\001\045\001\007\001\207\000\
\009\001\026\001\210\000\012\001\045\001\026\001\126\000\026\001\
\017\001\217\000\019\001\131\000\005\001\019\001\231\000\008\001\
\009\001\026\001\005\001\038\001\039\001\040\001\009\001\009\001\
\009\001\009\001\009\001\244\000\006\001\038\001\039\001\040\001\
\041\001\026\001\011\001\004\001\029\001\014\001\015\001\026\001\
\026\001\026\001\026\001\026\001\013\001\002\001\019\001\004\001\
\041\001\020\001\019\001\022\001\045\001\025\001\005\001\005\001\
\013\001\008\001\019\001\005\001\005\001\005\001\182\000\036\001\
\035\001\008\001\005\001\018\001\018\001\005\001\005\001\005\001\
\018\001\018\001\018\001\026\001\026\001\005\001\005\001\018\001\
\026\001\026\001\026\001\018\001\018\001\062\001\063\001\026\001\
\040\001\209\000\026\001\026\001\026\001\213\000\214\000\008\001\
\008\001\005\001\026\001\026\001\020\001\009\001\022\001\004\001\
\012\001\018\001\018\001\004\001\228\000\017\001\004\001\009\001\
\013\001\013\001\012\001\035\001\013\001\008\001\026\001\017\001\
\003\001\004\001\019\001\243\000\013\001\014\001\027\001\018\001\
\026\001\030\001\038\001\039\001\040\001\041\001\254\000\255\000\
\000\001\001\001\004\001\004\001\038\001\039\001\040\001\041\001\
\008\001\021\001\013\001\023\001\024\001\019\001\001\001\027\001\
\028\001\004\001\004\001\031\001\004\001\033\001\034\001\014\001\
\013\001\037\001\013\001\013\001\001\001\013\001\013\001\004\001\
\044\001\026\001\029\001\047\001\048\001\049\001\050\001\039\001\
\013\001\038\001\039\001\040\001\038\001\039\001\040\001\004\001\
\013\001\006\001\015\001\003\001\094\000\005\001\096\000\045\001\
\009\001\026\001\046\001\003\001\009\001\041\001\026\001\025\001\
\043\001\026\001\025\001\013\001\019\001\003\001\013\001\009\001\
\005\001\014\001\019\001\017\001\008\001\004\001\036\001\009\001\
\003\001\005\001\019\001\043\001\004\001\014\001\026\001\013\001\
\009\001\014\001\025\001\019\001\014\001\003\001\003\001\026\001\
\003\001\005\001\003\001\005\001\004\001\003\001\005\001\019\001\
\019\001\041\001\003\001\026\001\007\001\026\001\105\000\108\000\
\026\001\014\001\026\001\013\001\005\001\013\001\005\001\005\001\
\014\001\012\001\012\001\005\001\005\001\005\001\026\001\019\001\
\007\001\005\001\005\001\026\001\009\001\026\001\019\001\009\001\
\019\001\007\001\026\001\109\000\009\001\014\001\009\001\009\001\
\009\001\005\001\005\001\019\001\026\001\007\001\005\001\005\001\
\005\001\121\000\158\000\026\001\007\001\007\001\026\001\007\001\
\007\001\007\001\026\001\026\001\026\001\171\000\250\000\116\000\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\069\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  AMONG\000\
  WEAKSECRET\000\
  DATA\000\
  PARAM\000\
  PRIVATE\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 109 "piparser.mly"
 ( (FunDecl(_3, _5, _1)) :: _7 )
# 546 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 111 "piparser.mly"
 ( (DataFunDecl(_2, _4)) :: _6 )
# 555 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 113 "piparser.mly"
 ( (Equation(_2, _4)) :: _6 )
# 564 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'reduc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 115 "piparser.mly"
 ( (Reduc(_3,_1)) :: _4 )
# 573 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 117 "piparser.mly"
        ( (PredDecl(_2, _4, _5)) :: _7 )
# 583 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 119 "piparser.mly"
        ( (PredDecl(_2, _4, [])) :: _6 )
# 592 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 121 "piparser.mly"
 ( (PDef(_2,_4)) :: _6 )
# 601 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gfactformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optint) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'foptbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 123 "piparser.mly"
        ( (NoUnif (_2,_3,_4)) :: _6 )
# 611 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 125 "piparser.mly"
        ( (Param(_2,S _4)) :: _6 )
# 620 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 127 "piparser.mly"
        ( (Param(_2,I _4)) :: _6 )
# 629 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'queryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 129 "piparser.mly"
        ( (Query(_2)) :: _4 )
# 637 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 131 "piparser.mly"
        ( (Noninterf(_2)) :: _4 )
# 645 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 133 "piparser.mly"
        ( (Weaksecret(_2)) :: _4 )
# 653 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optphase) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 135 "piparser.mly"
 ( (Not(((PGSimpleFact(("attacker",dummy_ext), [_2]),dummy_ext),_3),_4)) :: _6 )
# 663 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 137 "piparser.mly"
 ( (Not(_2,_3)) :: _5 )
# 672 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 139 "piparser.mly"
        ( (Elimtrue (_2)) :: _4 )
# 680 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 141 "piparser.mly"
        ( (Free(_3,_1)) :: _5 )
# 689 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Piptree.decl list) in
    Obj.repr(
# 143 "piparser.mly"
        ( (Clauses(_2)) :: _3 )
# 697 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 145 "piparser.mly"
 ( [Process _2] )
# 704 "piparser.ml"
               : Piptree.decl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "piparser.mly"
 ( true )
# 710 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "piparser.mly"
 ( false )
# 716 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reduc) in
    Obj.repr(
# 157 "piparser.mly"
 ( (_1,_3) :: _5 )
# 725 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 159 "piparser.mly"
 ( [(_1,_3)] )
# 733 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 166 "piparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 741 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 168 "piparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice specident", parse_extent()), [_3; _5]), parse_extent() )
# 750 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 171 "piparser.mly"
 ( PIdent (_1), parse_extent() )
# 757 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 173 "piparser.mly"
 ( PTuple (_2), parse_extent() )
# 764 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 177 "piparser.mly"
 ( _1 :: _3 )
# 772 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 179 "piparser.mly"
 ( [_1] )
# 779 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 183 "piparser.mly"
        ( _1 )
# 786 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "piparser.mly"
        ( [] )
# 792 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 189 "piparser.mly"
    ( _1 :: _3 )
# 800 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 191 "piparser.mly"
    ( [_1] )
# 807 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 195 "piparser.mly"
    ( (_1, Some _4) )
# 815 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 197 "piparser.mly"
    ( (_1, None) )
# 822 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 201 "piparser.mly"
    ( _1 :: _3 )
# 830 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 203 "piparser.mly"
    ( [_1] )
# 837 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 209 "piparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 845 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 211 "piparser.mly"
 ( PGIdent (_1), parse_extent() )
# 852 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 213 "piparser.mly"
 ( PGTuple (_2), parse_extent() )
# 859 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 215 "piparser.mly"
        ( PGName (_1, _3), parse_extent() )
# 867 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 219 "piparser.mly"
 ( _1 :: _3 )
# 875 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 221 "piparser.mly"
 ( [_1] )
# 882 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 225 "piparser.mly"
        ( _1 )
# 889 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "piparser.mly"
        ( [] )
# 895 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 232 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 904 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 234 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 912 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 236 "piparser.mly"
        ( (_1, _3) :: _5 )
# 921 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 238 "piparser.mly"
        ( [(_1, _3)] )
# 929 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 242 "piparser.mly"
        ( _1 )
# 936 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "piparser.mly"
        ( [] )
# 942 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 248 "piparser.mly"
        ( (_1, _3) :: _5 )
# 951 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 250 "piparser.mly"
        ( [(_1, _3)] )
# 959 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 254 "piparser.mly"
        ( _2 )
# 966 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "piparser.mly"
        ( [] )
# 972 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gtermseq) in
    Obj.repr(
# 260 "piparser.mly"
 ( PGSimpleFact(_1,_3), parse_extent() )
# 980 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 262 "piparser.mly"
        ( PGNeq(_1,_3), parse_extent() )
# 988 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 264 "piparser.mly"
        ( PGEqual(_1, _3), parse_extent() )
# 996 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gfact) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 268 "piparser.mly"
    ( (_1,_2) )
# 1004 "piparser.ml"
               : 'event))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryseq) in
    Obj.repr(
# 272 "piparser.mly"
    ( _1 :: _3 )
# 1012 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'query) in
    Obj.repr(
# 274 "piparser.mly"
    ( [_1] )
# 1019 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 278 "piparser.mly"
    ( PRealQuery(PBefore(_1, PFalse)) )
# 1026 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'realquery) in
    Obj.repr(
# 280 "piparser.mly"
    ( PRealQuery(_1) )
# 1033 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 282 "piparser.mly"
    ( PPutBegin(_2, _4) )
# 1041 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 284 "piparser.mly"
    ( PBinding(_2,_4) )
# 1049 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 289 "piparser.mly"
    ( PBefore(_1, _3) )
# 1057 "piparser.ml"
               : 'realquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 293 "piparser.mly"
    ( POr(_1, _3) )
# 1065 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 295 "piparser.mly"
    ( PAnd(_1, _3) )
# 1073 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hyp) in
    Obj.repr(
# 297 "piparser.mly"
    ( _2 )
# 1080 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 299 "piparser.mly"
    ( PQEvent(_1) )
# 1087 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'realquery) in
    Obj.repr(
# 301 "piparser.mly"
    ( PNestedQuery(_2) )
# 1094 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 307 "piparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 1102 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 309 "piparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 1109 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 311 "piparser.mly"
 ( PFGTuple (_2), parse_extent() )
# 1116 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 313 "piparser.mly"
        ( PFGName (_1, _3), parse_extent() )
# 1124 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 315 "piparser.mly"
        ( PFGAny (_2), parse_extent() )
# 1131 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 319 "piparser.mly"
 ( _1 :: _3 )
# 1139 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 321 "piparser.mly"
 ( [_1] )
# 1146 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 325 "piparser.mly"
        ( _1 )
# 1153 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 327 "piparser.mly"
        ( [] )
# 1159 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 332 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1168 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 334 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1176 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 336 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1185 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 338 "piparser.mly"
        ( [(_1, _3)] )
# 1193 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 342 "piparser.mly"
        ( _1 )
# 1200 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "piparser.mly"
        ( [] )
# 1206 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 348 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1215 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 350 "piparser.mly"
        ( [(_1, _3)] )
# 1223 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 354 "piparser.mly"
        ( _2 )
# 1230 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "piparser.mly"
        ( [] )
# 1236 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 360 "piparser.mly"
    ( (_1,_3,_4) )
# 1245 "piparser.ml"
               : 'gfactformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 366 "piparser.mly"
    ( _2 )
# 1252 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 368 "piparser.mly"
    ( -1 )
# 1258 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 374 "piparser.mly"
    ( _2 )
# 1265 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 376 "piparser.mly"
    ( -1 )
# 1271 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termseq) in
    Obj.repr(
# 382 "piparser.mly"
 ( PSimpleFact(_1,_3), parse_extent() )
# 1279 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 384 "piparser.mly"
        ( PSNeq(_1,_3), parse_extent() )
# 1287 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 386 "piparser.mly"
        ( PSEqual(_1, _3), parse_extent() )
# 1295 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factand) in
    Obj.repr(
# 390 "piparser.mly"
 ( _1 :: _3 )
# 1303 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 392 "piparser.mly"
 ( [_1] )
# 1310 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 396 "piparser.mly"
        ( PClause(_1,_3) )
# 1318 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 398 "piparser.mly"
        ( PClause([],_1) )
# 1325 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 400 "piparser.mly"
        ( PEquiv(_1,_3,true) )
# 1333 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 402 "piparser.mly"
        ( PEquiv(_1,_3,false) )
# 1341 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clauses) in
    Obj.repr(
# 406 "piparser.mly"
 ( _1 :: _3 )
# 1349 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    Obj.repr(
# 408 "piparser.mly"
 ( [_1] )
# 1356 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 414 "piparser.mly"
 ( _2 )
# 1363 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 416 "piparser.mly"
 ( PLetDef _1 )
# 1370 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 418 "piparser.mly"
 ( PRepl _2 )
# 1377 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 420 "piparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 1386 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 424 "piparser.mly"
 ( PRestr(_2, _4) )
# 1394 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 426 "piparser.mly"
 ( PTest(_2,_4,_6) )
# 1403 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 428 "piparser.mly"
 ( PTest(_2,_4,PNil) )
# 1411 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 430 "piparser.mly"
 ( PInput(_3,_5,_7) )
# 1420 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 432 "piparser.mly"
 ( POutput(_3,_5,_7) )
# 1429 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 434 "piparser.mly"
 ( PLet(_2,_4,_6,PNil) )
# 1438 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 436 "piparser.mly"
 ( PLet(_2,_4,_6,_8) )
# 1448 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 438 "piparser.mly"
        ( PLetFilter(_2,_4,_6,PNil) )
# 1457 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 440 "piparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )
# 1469 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 444 "piparser.mly"
 ( PPar(_1,_3) )
# 1477 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 446 "piparser.mly"
        ( PEvent(_2, _4, _6) )
# 1486 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 448 "piparser.mly"
        ( PPhase(_2, _3) )
# 1494 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 452 "piparser.mly"
        ( _2 )
# 1501 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "piparser.mly"
        ( PNil )
# 1507 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 458 "piparser.mly"
    ( PPatVar(_1) )
# 1514 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 460 "piparser.mly"
    ( PPatTuple(_2) )
# 1521 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 462 "piparser.mly"
    ( PPatFunApp(_1,_3) )
# 1529 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 464 "piparser.mly"
    ( PPatEqual(_2) )
# 1536 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternseq) in
    Obj.repr(
# 468 "piparser.mly"
    ( _1 :: _3 )
# 1544 "piparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 470 "piparser.mly"
    ( [_1] )
# 1551 "piparser.ml"
               : 'patternseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Piptree.decl list)
