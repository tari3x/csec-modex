let A = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
in(c, var1);
assume Defined(var1) in
assume len(var1) = 112 in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) <> 0 then 
let BIO_new_connect_result1 = var1 (* named BIO_new_connect_result1 *) in
in(c, var2);
assume Defined(var2) in
assume len(var2) = 8 in
let BIO_ctrl_result1 = var2 (* named BIO_ctrl_result1 *) in
if ¬((BIO_ctrl_result1)_[s,8] <= 0) then 
assume Defined(hostA) in
assume (len(hostA) >= 0) /\ (len(hostA) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(hostA) > 40) then 
assume Defined(hostX) in
assume (len(hostX) >= 0) /\ (len(hostX) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(hostX) > 40) then 
assume Defined(pkA) in
assume (len(pkA) >= 0) /\ (len(pkA) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(pkA) > 100) then 
assume Defined(skA) in
assume (len(skA) >= 0) /\ (len(skA) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(skA) > 100) then 
assume Defined(pkX) in
assume (len(pkX) >= 0) /\ (len(pkX) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(pkX) > 100) then 
assume Defined(sigX) in
assume (len(sigX) >= 0) /\ (len(sigX) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume Defined(pkS) in
assume (len(pkS) >= 0) /\ (len(pkS) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
let host1 = hostX (* named host1 *) in
let key1 = pkX (* named key1 *) in
let sig1 = sigX (* named sig1 *) in
let sigkey1 = pkS (* named sigkey1 *) in
assume 1 = 1 in
if check_key(host1, key1, sig1, sigkey1) then 
event client_begin(hostA, hostX);
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8) <> 0 then 
new var3: fixed_20_nonce;
let nonce1 = var3 (* named nonce1 *) in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8, 7 + 24 + len(hostA) + 8) <> 0 then 
let msg1 = "msg1"|(20)^[u,8]|nonce1|hostA (* named msg1 *) in
let key2 = pkX (* named key2 *) in
let key3 = isek(key2) (* named key3 *) in
new var4: fixed_256_seed_T;
let nonce2 = var4 (* named nonce2 *) in
let cipher1 = E(msg1, key3, nonce2) (* named cipher1 *) in
assume (len(cipher1) >= 0) /\ (len(cipher1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(cipher1) <= (7 + 24 + len(hostA) + 8) in
assume len(cipher1) >= (24 + len(hostA) + 8) in
let msg2 = (len(cipher1))^[u,8] (* named msg2 *) in
out(c, msg2);
let msg3 = cipher1 (* named msg3 *) in
out(c, msg3);
in(c, var5);
assume Defined(var5) in
assume len(var5) = 8 in
let msg4 = var5 (* named msg4 *) in
if ¬((msg4)_[u,8] > 1000) then 
if 0 < (msg4)_[u,8] then 
in(c, var6);
assume Defined(var6) in
assume len(var6) = (msg4)_[u,8] in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8, 7 + 24 + len(hostA) + 8, (msg4)_[u,8]) <> 0 then 
let msg5 = var6 (* named msg5 *) in
if ¬((msg4)_[u,8] < 7) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8, 7 + 24 + len(hostA) + 8, (msg4)_[u,8], (msg4)_[u,8] - 7) <> 0 then 
let cipher2 = msg5 (* named cipher2 *) in
let key4 = skA (* named key4 *) in
let msg6 = inverse_injbot(D(cipher2, key4)) (* named msg6 *) in
assume (len(msg6) >= 0) /\ (len(msg6) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(msg6) <= ((msg4)_[u,8] - 7) in
if ¬((len(hostX) + 40 + (2 * 8) + 4) <> len(msg6)) then 
assume ((len(msg6) >= 4) /\ (0 >= 0) /\ (4 >= 0)) /\ True() in
assume len(Cmp(msg6{0, 4}, "msg2")) = 4 in
if msg6{0, 4} = "msg2" then 
if ¬((msg6{4, 8})_[u,8] <> 20) then 
if ¬((msg6{4 + 8, 8})_[u,8] <> 20) then 
assume ((len(msg6) >= (4 + (2 * 8) + 20)) /\ ((4 + (2 * 8)) >= 0) /\ (20 >= 0)) /\ Defined(nonce1) in
assume len(Cmp(msg6{4 + (2 * 8), 20}:fixed_20_nonce, nonce1)) = 4 in
ifeq msg6{4 + (2 * 8), 20}:fixed_20_nonce = nonce1 then 
assume ((len(msg6) >= len(msg6)) /\ (((msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4) >= 0) /\ ((len(msg6) - ((msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4)) >= 0)) /\ Defined(hostX) in
assume len(Cmp(msg6{(msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4, len(msg6) - ((msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4)}:bounded_40_host, hostX)) = 4 in
ifeq msg6{(msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4, len(msg6) - ((msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8] + (2 * 8) + 4)}:bounded_40_host = hostX then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8, 7 + 24 + len(hostA) + 8, (msg4)_[u,8], (msg4)_[u,8] - 7, 4 + (msg6{4 + 8, 8})_[u,8]) <> 0 then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 24 + len(hostA) + 8, 7 + 24 + len(hostA) + 8, (msg4)_[u,8], (msg4)_[u,8] - 7, 4 + (msg6{4 + 8, 8})_[u,8], 7 + 4 + (msg6{4 + 8, 8})_[u,8]) <> 0 then 
let msg7 = "msg3"|msg6{4 + (2 * 8) + 20, ((msg6{4, 8})_[u,8] + (msg6{4 + 8, 8})_[u,8]) - 20}:fixed_20_nonce (* named msg7 *) in
let key5 = pkX (* named key5 *) in
let key6 = isek(key5) (* named key6 *) in
new var7: fixed_256_seed_T;
let nonce3 = var7 (* named nonce3 *) in
let cipher3 = E(msg7, key6, nonce3) (* named cipher3 *) in
assume (len(cipher3) >= 0) /\ (len(cipher3) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(cipher3) <= (7 + 4 + (msg6{4 + 8, 8})_[u,8]) in
assume len(cipher3) >= (4 + (msg6{4 + 8, 8})_[u,8]) in
let msg8 = (len(cipher3))^[u,8] (* named msg8 *) in
out(c, msg8);
let msg9 = cipher3 (* named msg9 *) in
out(c, msg9);
event client_end(hostA, hostX);

let B = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
in(c, var8);
assume Defined(var8) in
assume len(var8) = 112 in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) <> 0 then 
let BIO_new_accept_result1 = var8 (* named BIO_new_accept_result1 *) in
in(c, var9);
assume Defined(var9) in
assume len(var9) = 8 in
let BIO_ctrl_result2 = var9 (* named BIO_ctrl_result2 *) in
if ¬((BIO_ctrl_result2)_[s,8] <= 0) then 
in(c, var10);
assume Defined(var10) in
assume len(var10) = 8 in
let BIO_ctrl_result3 = var10 (* named BIO_ctrl_result3 *) in
if ¬((BIO_ctrl_result3)_[s,8] <= 0) then 
in(c, var11);
assume Defined(var11) in
assume len(var11) = 112 in
let BIO_pop_result1 = var11 (* named BIO_pop_result1 *) in
in(c, var12);
assume Defined(var12) in
assume len(var12) = 4 in
let BIO_free_result1 = var12 (* named BIO_free_result1 *) in
assume Defined(hostB) in
assume (len(hostB) >= 0) /\ (len(hostB) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(hostB) > 40) then 
assume Defined(pkB) in
assume (len(pkB) >= 0) /\ (len(pkB) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(pkB) > 100) then 
assume Defined(skB) in
assume (len(skB) >= 0) /\ (len(skB) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(skB) > 100) then 
in(c, var13);
assume Defined(var13) in
assume len(var13) = 8 in
let msg10 = var13 (* named msg10 *) in
if ¬((msg10)_[u,8] > 1000) then 
if 0 < (msg10)_[u,8] then 
in(c, var14);
assume Defined(var14) in
assume len(var14) = (msg10)_[u,8] in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8]) <> 0 then 
let msg11 = var14 (* named msg11 *) in
if ¬((msg10)_[u,8] < 7) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8], (msg10)_[u,8] - 7) <> 0 then 
let cipher4 = msg11 (* named cipher4 *) in
let key7 = skB (* named key7 *) in
let msg12 = inverse_injbot(D(cipher4, key7)) (* named msg12 *) in
assume (len(msg12) >= 0) /\ (len(msg12) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(msg12) <= ((msg10)_[u,8] - 7) in
if ¬((8 + 20 + 4) > len(msg12)) then 
assume ((len(msg12) >= 4) /\ (0 >= 0) /\ (4 >= 0)) /\ True() in
assume len(Cmp(msg12{0, 4}, "msg1")) = 4 in
if msg12{0, 4} = "msg1" then 
if ¬((msg12{4, 8})_[u,8] <> 20) then 
if ¬((len(msg12) - (4 + 8 + (msg12{4, 8})_[u,8])) > 40) then 
assume Defined(pkX) in
assume (len(pkX) >= 0) /\ (len(pkX) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(pkX) > 100) then 
assume Defined(sigX) in
assume (len(sigX) >= 0) /\ (len(sigX) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume Defined(pkS) in
assume (len(pkS) >= 0) /\ (len(pkS) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
let host2 = msg12{4 + 8 + (msg12{4, 8})_[u,8], len(msg12) - (4 + 8 + (msg12{4, 8})_[u,8])} (* named host2 *) in
let key8 = pkX (* named key8 *) in
let sig2 = sigX (* named sig2 *) in
let sigkey2 = pkS (* named sigkey2 *) in
assume 1 = 1 in
if check_key(host2, key8, sig2, sigkey2) then 
event server_begin(msg12{4 + 8 + (msg12{4, 8})_[u,8], len(msg12) - (4 + 8 + (msg12{4, 8})_[u,8])}, hostB);
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8], (msg10)_[u,8] - 7, 40 + (2 * 8) + 4 + len(hostB)) <> 0 then 
new var15: fixed_20_nonce;
let nonce4 = var15 (* named nonce4 *) in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8], (msg10)_[u,8] - 7, 40 + (2 * 8) + 4 + len(hostB), 7 + 40 + (2 * 8) + 4 + len(hostB)) <> 0 then 
let msg13 = "msg2"|msg12{4, 8}|(20)^[u,8]|msg12{4 + 8, (msg12{4, 8})_[u,8]}:fixed_20_nonce|nonce4|hostB (* named msg13 *) in
let key9 = pkX (* named key9 *) in
let key10 = isek(key9) (* named key10 *) in
new var16: fixed_256_seed_T;
let nonce5 = var16 (* named nonce5 *) in
let cipher5 = E(msg13, key10, nonce5) (* named cipher5 *) in
assume (len(cipher5) >= 0) /\ (len(cipher5) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(cipher5) <= (7 + 40 + (2 * 8) + 4 + len(hostB)) in
assume len(cipher5) >= (40 + (2 * 8) + 4 + len(hostB)) in
let msg14 = (len(cipher5))^[u,8] (* named msg14 *) in
out(c, msg14);
let msg15 = cipher5 (* named msg15 *) in
out(c, msg15);
in(c, var17);
assume Defined(var17) in
assume len(var17) = 8 in
let msg16 = var17 (* named msg16 *) in
if ¬((msg16)_[u,8] > 1000) then 
if 0 < (msg16)_[u,8] then 
in(c, var18);
assume Defined(var18) in
assume len(var18) = (msg16)_[u,8] in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8], (msg10)_[u,8] - 7, 40 + (2 * 8) + 4 + len(hostB), 7 + 40 + (2 * 8) + 4 + len(hostB), (msg16)_[u,8]) <> 0 then 
let msg17 = var18 (* named msg17 *) in
if ¬((msg16)_[u,8] < 7) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg10)_[u,8], (msg10)_[u,8] - 7, 40 + (2 * 8) + 4 + len(hostB), 7 + 40 + (2 * 8) + 4 + len(hostB), (msg16)_[u,8], (msg16)_[u,8] - 7) <> 0 then 
let cipher6 = msg17 (* named cipher6 *) in
let key11 = skB (* named key11 *) in
let msg18 = inverse_injbot(D(cipher6, key11)) (* named msg18 *) in
assume (len(msg18) >= 0) /\ (len(msg18) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume len(msg18) <= ((msg16)_[u,8] - 7) in
assume ((len(msg18) >= 4) /\ (0 >= 0) /\ (4 >= 0)) /\ True() in
assume len(Cmp(msg18{0, 4}, "msg3")) = 4 in
if msg18{0, 4} = "msg3" then 
if ¬(len(msg18) <> 24) then 
assume ((len(msg18) >= len(msg18)) /\ (4 >= 0) /\ ((len(msg18) - 4) >= 0)) /\ Defined(nonce4) in
assume len(Cmp(msg18{4, len(msg18) - 4}:fixed_20_nonce, nonce4)) = 4 in
ifeq msg18{4, len(msg18) - 4}:fixed_20_nonce = nonce4 then 
event server_end(msg12{4 + 8 + (msg12{4, 8})_[u,8], len(msg12) - (4 + 8 + (msg12{4, 8})_[u,8])}, hostB);

