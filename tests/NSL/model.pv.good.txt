
free c_in.
free c_out.

fun true/0.

(**********************************
  Needham-Schroeder-Lowe protocol.
***********************************)


(*
  This process is key-safe: neither signing nor decryption keys are being sent.
  Signing and decryption uses honestly generated keys with fresh randomness.
*)

free c.

(*************************
  Public-key encryption
**************************)

(*
  NB! The soundness result in CoSP assumes that we can encrypt messages of any length,
  which means that a correct implementation of E must use hybrid encryption.
*)

fun ek/1.
fun dk/1.
fun E/3.
reduc
  D_injbot(E(x, ek(a), r), dk(a)) = x.
reduc
  isek(ek(a)) = ek(a).
  
(*************************
  Signatures
**************************)
  
fun sk/1.
fun vk/1.
fun sig/3.

(* Just a pairing function *)
data cert/2.

(*
  check_key performs signature verification together with bitstring comparison,
  so it is covered by the soundness result.
*)
reduc 
  check_key(host, key, sig(sk(r), cert(key, host), r'), vk(r)) = true.
  
(**********************************
  Names of the honest participants
***********************************)
  
fun hostA/0.
fun hostB/0.
  


(*************************** 
  Encoders 
***************************)

data conc1/2.
data conc2/1.
data conc3/3.

(******************** 
  Parsers 
********************)

reduc
  parse1(conc3(arg0, arg1, arg2)) = arg0.
reduc
  parse2(conc3(arg0, arg1, arg2)) = arg2.
reduc
  parse3(conc3(arg0, arg1, arg2)) = arg1.
reduc
  parse4(conc1(arg0, arg1)) = arg1.
reduc
  parse5(conc1(arg0, arg1)) = arg0.
reduc
  parse6(conc2(arg0)) = arg0.

(*************************** 
  Arithmetic Functions 
***************************)

data arithmetic1/1.

(******************** 
  <Query>
********************)

query
  ev:server_end(x, y) ==> ev:client_begin(x, y) | ev:bad(x).

query
  ev:client_end(x, y) ==> ev:server_begin(x, y) | ev:bad(y).

(*
  New version of ProVerif displays this information anyway
*)
query 
  ev:server_end(x, y) ==> ev:bad(x).

(*************************** 
  Model 
***************************)

let client = 0.
let server = 0.


(*************************** 
  Model 
***************************)

let client = 
in(c_in, var1);
in(c_in, BIO_ctrl_result1);
if check_key(hostX, pkX, sigX, pkS) = true then 
event client_begin(hostA, hostX);
new nonce1;
let msg1 = conc1(nonce1, hostA) in
let key3 = isek(pkX) in
new nonce2;
let msg3 = E(msg1, key3, nonce2) in
let msg2 = arithmetic1(msg3) in
out(c_out, msg2);
out(c_out, msg3);
in(c_in, msg4);
in(c_in, cipher2);
let msg6 = D_injbot(cipher2, skA) in
let var39 = parse1(msg6) in
let var40 = var39 in
if var40 = nonce1 then 
let var41 = parse2(msg6) in
let var42 = var41 in
if var42 = hostX then 
let var43 = parse3(msg6) in
let var44 = var43 in
let msg7 = conc2(var44) in
new nonce3;
let msg9 = E(msg7, key3, nonce3) in
let msg8 = arithmetic1(msg9) in
out(c_out, msg8);
out(c_out, msg9);
event client_end(hostA, hostX); 0 .

let server = 
in(c_in, var8);
in(c_in, BIO_ctrl_result2);
in(c_in, BIO_ctrl_result3);
in(c_in, var11);
in(c_in, var12);
in(c_in, msg10);
in(c_in, cipher4);
let msg12 = D_injbot(cipher4, skB) in
let host2 = parse4(msg12) in
if check_key(host2, pkX, sigX, pkS) = true then 
event server_begin(host2, hostB);
new nonce4;
let var24 = parse5(msg12) in
let var25 = var24 in
let msg13 = conc3(var25, nonce4, hostB) in
let key10 = isek(pkX) in
new nonce5;
let msg15 = E(msg13, key10, nonce5) in
let msg14 = arithmetic1(msg15) in
out(c_out, msg14);
out(c_out, msg15);
in(c_in, msg16);
in(c_in, cipher6);
let msg18 = D_injbot(cipher6, skB) in
let var31 = parse6(msg18) in
let var32 = var31 in
if var32 = nonce4 then 
event server_end(host2, hostB); 0 .

(*************************** 
  <Environment>
***************************)

let client' = 
  in(c, (pkX, hostX, sigX));
  client .

let server' = 
  in(c, (pkX, hostX, sigX));
  server .

let keyServer = 
  in(c, (h, k));
  new r3;
  if h = hostA then
    out(c, (pkA, h, sig(skS, cert(pkA, h), r3)))
  else if h = hostB then 
    out(c, (pkB, h, sig(skS, cert(pkB, h), r3)))
  else
    event bad(h);
    out(c, (k, h, sig(skS, cert(k, h), r3))) .

process
! (
  new A_seed; 
  new B_seed;
  let pkA = ek(A_seed) in
  let skA = dk(A_seed) in
  let pkB = ek(B_seed) in
  let skB = dk(B_seed) in

  new rkS;
  let pkS = vk(rkS) in
  let skS = sk(rkS) in
  
  out(c, (pkA, pkB, pkS));
  (!client' | !server' | !keyServer)
)

