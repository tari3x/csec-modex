
channel c_in, c_out. 
type mstring.

param N.

type fixed_20_nonce [fixed, large].

type bounded_40_host.
const hostA: bounded_40_host.
const hostB: bounded_40_host.

(************************
  Public-key encryption
*************************)

(* IND-CCA2 probabilistic public-key encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys, must be "bounded"
   skey: type of secret keys, must be "bounded"
   cleartext: type of cleartexts, must be "bounded" or "fixed" (the encryptions of *all* cleartexts of any length
              are assumed to be indistinguishable from each other).
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   dk: public-key generation function 
   sk: secret-key generation function
   E: encryption function
   D: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: a constant cleartext

   Penc(t, N): probability of breaking the IND-CCA2 property
   in time t for one key and N decryption queries.
   Penccoll: probability of collision between independently generated keys
*)

type keyseed_T [fixed, large].
type key_T [bounded].
type bounded_200_cleartext [bounded].
type seed_T [fixed].

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed_T, key_T, key_T, bounded_200_cleartext, mstring, seed_T, dk, ek, E, D, injbot, Z, Penc, Penccoll).

fun inverse_injbot(bitstringbot): bounded_200_cleartext.

fun isek(key_T): key_T.

forall x: key_T;
  isek(x) = x.

(*************************** 
 Signatures
***************************)

type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type sblocksize [bounded].

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sk, vk, sign, check, Psign, Psigncoll).

fun cert(key_T, bounded_40_host): sblocksize [compos].

fun check_key(bounded_40_host, key_T, signature, spkey): bool.

forall h: bounded_40_host, k: key_T, sig: signature, pkS: spkey;
  check_key(h, k, sig, pkS) = check(cert(k, h), pkS, sig).


(*************************** 
 Constants 
***************************)


(*************************** 
  Formatting Functions 
***************************)

(* conc1/2 := tag(6d736731)<4>|lenarg(i0)<8>|arg(i0)<lenarg(i0)>|arg(i1)<lenarg(i1)> *)
fun conc1(fixed_20_nonce, bounded_40_host): bounded_200_cleartext [compos].

(* conc3/1 := tag(656e6372)<4>|lenarg(i0)<8>|arg(i0)<lenarg(i0)> *)
fun conc3(mstring): mstring [compos].

(* conc8/1 := tag(6d736733)<4>|arg(i0)<lenarg(i0)> *)
fun conc8(fixed_20_nonce): bounded_200_cleartext [compos].

(* conc15/3 := tag(6d736732)<4>|lenarg(i0)<8>|lenarg(i1)<8>|arg(i0)<lenarg(i0)>|arg(i1)<lenarg(i1)>|arg(i2)<lenarg(i2)> *)
fun conc15(fixed_20_nonce, fixed_20_nonce, bounded_40_host): bounded_200_cleartext [compos].


forall var1: fixed_20_nonce, var2: fixed_20_nonce, var3: fixed_20_nonce, var4: bounded_40_host;
  conc8(var1) <> conc15(var2, var3, var4).
forall var1: fixed_20_nonce, var2: bounded_40_host, var3: fixed_20_nonce, var4: fixed_20_nonce, var5: bounded_40_host;
  conc1(var1, var2) <> conc15(var3, var4, var5).
forall var1: fixed_20_nonce, var2: bounded_40_host, var3: fixed_20_nonce;
  conc1(var1, var2) <> conc8(var3).

(*************************** 
  Zero Functions 
***************************)

fun Zmstring(mstring): mstring.
fun Zbounded_200_cleartext(bounded_200_cleartext): bounded_200_cleartext.
fun Zfixed_20_nonce(fixed_20_nonce): fixed_20_nonce.
fun Zbounded_40_host(bounded_40_host): bounded_40_host.

(*************************** 
  Length-Regularity 
***************************)

fun Zconc1(fixed_20_nonce, bounded_40_host): bounded_200_cleartext.
forall var1: fixed_20_nonce, var2: bounded_40_host;
  Zbounded_200_cleartext(conc1(var1, var2)) = Zconc1(Zfixed_20_nonce(var1), Zbounded_40_host(var2)).
fun Zconc3(mstring): mstring.
forall var1: mstring;
  Zmstring(conc3(var1)) = Zconc3(Zmstring(var1)).
fun Zconc8(fixed_20_nonce): bounded_200_cleartext.
forall var1: fixed_20_nonce;
  Zbounded_200_cleartext(conc8(var1)) = Zconc8(Zfixed_20_nonce(var1)).
fun Zconc15(fixed_20_nonce, fixed_20_nonce, bounded_40_host): bounded_200_cleartext.
forall var1: fixed_20_nonce, var2: fixed_20_nonce, var3: bounded_40_host;
  Zbounded_200_cleartext(conc15(var1, var2, var3)) = Zconc15(Zfixed_20_nonce(var1), Zfixed_20_nonce(var2), Zbounded_40_host(var3)).

(*************************** 
  Typecasting 
***************************)


(******************** 
  <Query>
********************)
 
event beginA(bounded_40_host, bounded_40_host).
event beginB(bounded_40_host, bounded_40_host).
event endA(bounded_40_host, bounded_40_host).
event endB(bounded_40_host, bounded_40_host).
event bad(bounded_40_host).

(* na: nonce, nb: nonce *)
query x: bounded_40_host, y: bounded_40_host;
  event endB(x, y) ==> beginA(x, y) || bad(x).

query x: bounded_40_host, y: bounded_40_host;
  event endA(x, y) ==> beginB(x, y) || bad(y).


(*************************** 
  Model 
***************************)

let A = 
in(c_in, ());
if check_key(hostX, pkX, sigX, pkS) then 
event beginA(hostA, hostX);
new nonce1: fixed_20_nonce;
new nonce2: seed_T;
let msg1 = conc3(E(conc1(nonce1, hostA), isek(pkX), nonce2)) in
out(c_out, (msg1));
in(c_in, (msg2: mstring, msg3: mstring));
let injbot(var1) = D(msg3, skA) in
let conc15(var2, var3, var4) = var1 in
if var2 = nonce1 then 
if var4 = hostX then 
new nonce3: seed_T;
let msg4 = conc3(E(conc8(var3), isek(pkX), nonce3)) in
event endA(hostA, hostX);
out(c_out, (msg4)); 0 .

let B = 
in(c_in, (msg1: mstring, msg2: mstring));
let injbot(var1) = D(msg2, skB) in
let conc1(var2, var3) = var1 in
if check_key(var3, pkX, sigX, pkS) then 
event beginB(var3, hostB);
new nonce1: fixed_20_nonce;
new nonce2: seed_T;
let msg3 = conc3(E(conc15(var2, nonce1, hostB), isek(pkX), nonce2)) in
out(c_out, (msg3));
in(c_in, (msg4: mstring, msg5: mstring));
let injbot(var4) = D(msg5, skB) in
let conc8(var5) = var4 in
if var5 = nonce1 then 
event endB(var3, hostB);
yield.

(*************************** 
  <Environment>
***************************)

let A' = 
  in(c_in, (pkX: key_T, hostX: bounded_40_host, sigX: signature));
  out(c_out, ());
  A .

let B' = 
  in(c_in, (pkX: key_T, sigX: signature));
  out(c_out, ());
  B .

let keyServer = 
  in(c_in, (h: bounded_40_host, k: key_T));
  let rk = 
    if h = hostA then pkA else
    if h = hostB then pkB else
    k in
  new r3: sseed;
  let cert = (rk, h, sign(cert(rk, h), skS, r3)) in
  if h = hostA || h = hostB then
    out(c_out, cert)
  else
    event bad(h);
    out(c_out, cert) .

process
! N (
  in(c_in, ());
  new A_seed: keyseed_T; 
  new B_seed: keyseed_T;
  let pkA = ek(A_seed) in
  let skA = dk(A_seed) in
  let pkB = ek(B_seed) in
  let skB = dk(B_seed) in

  new rkS: skeyseed;
  let pkS = vk(rkS) in
  let skS = sk(rkS) in
  
  out(c_out, (pkA, pkB, pkS));
  ((! N A') | (! N B') | (! N keyServer))
)

