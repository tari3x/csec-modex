
channel c_in, c_out. 

param N.

type nondet [fixed].

type fixed_20_nonce [fixed, large].

type bounded_40_host.
const hostA: bounded_40_host.
const hostB: bounded_40_host.

(************************
  Public-key encryption
*************************)

(* IND-CCA2 probabilistic public-key encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys, must be "bounded"
   skey: type of secret keys, must be "bounded"
   cleartext: type of cleartexts, must be "bounded" or "fixed" (the encryptions of *all* cleartexts of any length
              are assumed to be indistinguishable from each other).
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   dk: public-key generation function 
   sk: secret-key generation function
   E: encryption function
   D: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: a constant cleartext

   Penc(t, N): probability of breaking the IND-CCA2 property
   in time t for one key and N decryption queries.
   Penccoll: probability of collision between independently generated keys
*)

type keyseed_T [fixed, large].
(* 100 is MAX_SIZE_KEY in the code. *)
type fixed_100_key [fixed].
type bounded_1000_ciphertext [bounded].
type bounded_200_cleartext [bounded].
type fixed_256_seed_T [fixed].

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed_T, fixed_100_key, fixed_100_key, bounded_200_cleartext, bounded_1000_ciphertext, fixed_256_seed_T, dk, ek, E, D, injbot, Z, Penc, Penccoll).

fun inverse_injbot(bitstringbot): bounded_200_cleartext.

fun isek(fixed_100_key): fixed_100_key.

forall x: fixed_100_key;
  isek(x) = x.

fun decrypt_len(bitstring): bitstring.
fun encrypt_len(bounded_200_cleartext): bitstring.
fun encrypt_lenZ(bounded_200_cleartext): bitstring.
  
fun Zbounded_200_cleartext(bounded_200_cleartext): bounded_200_cleartext.

(* Length of an encryption does not depend on the contents of the plaintext. *)
forall x: bounded_200_cleartext;
  encrypt_len(x) = encrypt_lenZ(Zbounded_200_cleartext(x)).

(*************************** 
 Signatures
***************************)

type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type sblocksize [bounded].

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sk, vk, sign, check, Psign, Psigncoll).

fun cert(fixed_100_key, bounded_40_host): sblocksize [compos].

fun check_key(bounded_40_host, fixed_100_key, signature, spkey): bool.

forall h: bounded_40_host, k: fixed_100_key, sig: signature, pkS: spkey;
  check_key(h, k, sig, pkS) = check(cert(k, h), pkS, sig).

(******************** 
  <Query>
********************)
 
event beginA(bounded_40_host, bounded_40_host).
event beginB(bounded_40_host, bounded_40_host).
event endA(bounded_40_host, bounded_40_host).
event endB(bounded_40_host, bounded_40_host).
event bad(bounded_40_host).

(* na: nonce, nb: nonce *)
query x: bounded_40_host, y: bounded_40_host;
  event endB(x, y) ==> beginA(x, y) || bad(x).

query x: bounded_40_host, y: bounded_40_host;
  event endA(x, y) ==> beginB(x, y) || bad(y).

(*************************** 
  <Model>
***************************)

let client = 0 . 
let server = 0 .

(*************************** 
  <Environment>
***************************)

let client' = 
  in(c_in, (pkX: fixed_100_key, hostX: bounded_40_host, sigX: signature));
  out(c_out, ());
  client .

let server' = 
  in(c_in, (pkX: fixed_100_key, sigX: signature));
  out(c_out, ());
  server .

let keyServer = 
  in(c_in, (h: bounded_40_host, k: fixed_100_key));
  let rk = 
    if h = hostA then pkA else
    if h = hostB then pkB else
    k in
  new r3: sseed;
  let cert = (rk, h, sign(cert(rk, h), skS, r3)) in
  if h = hostA || h = hostB then
    out(c_out, cert)
  else
    event bad(h);
    out(c_out, cert) .

process
! N (
  in(c_in, ());
  new A_seed: keyseed_T; 
  new B_seed: keyseed_T;
  let pkA = ek(A_seed) in
  let skA = dk(A_seed) in
  let pkB = ek(B_seed) in
  let skB = dk(B_seed) in

  new rkS: skeyseed;
  let pkS = vk(rkS) in
  let skS = sk(rkS) in
  
  out(c_out, (pkA, pkB, pkS));
  ((! N client') | (! N server') | (! N keyServer))
)

