
channel c_in, c_out. 
type mstring.

param N.

type fixed_20_nonce [fixed, large].

type bounded_40_host.
const hostA: bounded_40_host.
const hostB: bounded_40_host.

(************************
  Public-key encryption
*************************)

(* IND-CCA2 probabilistic public-key encryption 
   keyseed: type of key seeds, must be "fixed" (to be able to generate random numbers from it), typically large.
   pkey: type of public keys, must be "bounded"
   skey: type of secret keys, must be "bounded"
   cleartext: type of cleartexts, must be "bounded" or "fixed" (the encryptions of *all* cleartexts of any length
              are assumed to be indistinguishable from each other).
   ciphertext: type of ciphertexts
   seed: type of random seeds for encryption, must be "fixed"

   dk: public-key generation function 
   sk: secret-key generation function
   E: encryption function
   D: decryption function
   injbot: natural injection from cleartext to bitstringbot
   Z: a constant cleartext

   Penc(t, N): probability of breaking the IND-CCA2 property
   in time t for one key and N decryption queries.
   Penccoll: probability of collision between independently generated keys
*)

type keyseed_T [fixed, large].
type key_T [bounded].
type bounded_200_cleartext [bounded].
type seed_T [fixed].

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed_T, key_T, key_T, bounded_200_cleartext, mstring, seed_T, dk, ek, E, D, injbot, Z, Penc, Penccoll).

fun inverse_injbot(bitstringbot): bounded_200_cleartext.

fun isek(key_T): key_T.

forall x: key_T;
  isek(x) = x.

(*************************** 
 Signatures
***************************)

type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type sblocksize [bounded].

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sk, vk, sign, check, Psign, Psigncoll).

fun cert(key_T, bounded_40_host): sblocksize [compos].

fun check_key(bounded_40_host, key_T, signature, spkey): bool.

forall h: bounded_40_host, k: key_T, sig: signature, pkS: spkey;
  check_key(h, k, sig, pkS) = check(cert(k, h), pkS, sig).

(******************** 
  <Query>
********************)
 
event beginA(bounded_40_host, bounded_40_host).
event beginB(bounded_40_host, bounded_40_host).
event endA(bounded_40_host, bounded_40_host).
event endB(bounded_40_host, bounded_40_host).
event bad(bounded_40_host).

(* na: nonce, nb: nonce *)
query x: bounded_40_host, y: bounded_40_host;
  event endB(x, y) ==> beginA(x, y) || bad(x).

query x: bounded_40_host, y: bounded_40_host;
  event endA(x, y) ==> beginB(x, y) || bad(y).

(************************
  <Type hints>
*************************)

(* first field of the first message *)
fun parse8(bounded_200_cleartext): fixed_20_nonce.

(* second field of the second message *)
fun parse6(bounded_200_cleartext): fixed_20_nonce.

(*************************** 
  <Model>
***************************)

let A = 0 . let B = 0 .

(*************************** 
  <Environment>
***************************)

let A' = 
  in(c_in, (pkX: key_T, hostX: bounded_40_host, sigX: signature));
  out(c_out, ());
  A .

let B' = 
  in(c_in, (pkX: key_T, sigX: signature));
  out(c_out, ());
  B .

let keyServer = 
  in(c_in, (h: bounded_40_host, k: key_T));
  let rk = 
    if h = hostA then pkA else
    if h = hostB then pkB else
    k in
  new r3: sseed;
  let cert = (rk, h, sign(cert(rk, h), skS, r3)) in
  if h = hostA || h = hostB then
    out(c_out, cert)
  else
    event bad(h);
    out(c_out, cert) .

process
! N (
  in(c_in, ());
  new A_seed: keyseed_T; 
  new B_seed: keyseed_T;
  let pkA = ek(A_seed) in
  let skA = dk(A_seed) in
  let pkB = ek(B_seed) in
  let skB = dk(B_seed) in

  new rkS: skeyseed;
  let pkS = vk(rkS) in
  let skS = sk(rkS) in
  
  out(c_out, (pkA, pkB, pkS));
  ((! N A') | (! N B') | (! N keyServer))
)

