
channel c_in, c_out. 

param N.

(******************** 
  Types
********************)

type bounded_1000_payload [bounded].
type fixed_20_hash [fixed].

(******************** 
  MAC
********************)

type mkeyseed [fixed, large].
type mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, bitstring, fixed_20_hash, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: mkey, r: fixed_20_hash;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

(******************** 
  <Query>
********************)
 
event client_send(bounded_1000_payload).
event server_recv(bounded_1000_payload).

query x: bounded_1000_payload, y:bounded_1000_payload;
  event server_recv(x) ==> client_send(x).

(************************
  <Model>
*************************)

let A = 0 .
  
let B = 0 .

(************************
  <Environment>
*************************)


process
! N (
  in(c_in, (payload: bounded_1000_payload));

  new keyseed: mkeyseed; 
  let key = mkgen(keyseed) in

  out(c_out, ());
  (!N A | !N B)
)
