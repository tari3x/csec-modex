
channel c_in, c_out. 

param N.

(******************** 
  MAC
********************)

type mkeyseed [fixed, large].
type mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: mkey, r: bitstring;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).


(*************************** 
 Constants 
***************************)


(*************************** 
  Formatting Functions 
***************************)

(* conc1/1 := lenarg(i0)<8>|tag(i2)<1>|arg(i0)<lenarg(i0)> *)
fun conc1(bitstring): bitstring [compos].

(* conc2/2 := lenarg(i0)<8>|tag(i1)<1>|arg(i0)<lenarg(i0)>|arg(i1)<lenarg(i1)> *)
fun conc2(bitstring, bitstring): bitstring [compos].


forall var1: bitstring, var2: bitstring, var3: bitstring;
  conc1(var1) <> conc2(var2, var3).

(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

(*************************** 
  Length-Regularity 
***************************)

fun Zconc1(bitstring): bitstring.
forall var1: bitstring;
  Zbitstring(conc1(var1)) = Zconc1(Zbitstring(var1)).
fun Zconc2(bitstring, bitstring): bitstring.
forall var1: bitstring, var2: bitstring;
  Zbitstring(conc2(var1, var2)) = Zconc2(Zbitstring(var1), Zbitstring(var2)).

(*************************** 
  Typecasting 
***************************)


(******************** 
  <Query>
********************)
 
event client_send(bitstring).
event server_recv(bitstring).

query x: bitstring, y:bitstring;
  event server_recv(x) ==> client_send(x).


(*************************** 
  Model 
***************************)

let A = 
in(c_in, (msg1: bitstring, msg2: bitstring));
let conc2(var1, var2) = msg2 in
let hash1 = HMAC_sha1(conc1(var1), key) in
if hash1 = var2 then 
event server_recv(var1);
yield.

let B = 
in(c_in, ());
event client_send(payload);
let msg1 = conc2(payload, HMAC_sha1(conc1(payload), key)) in
out(c_out, (msg1)); 0 .

(************************
  <Environment>
*************************)


process
! N (
  in(c_in, (payload: bitstring));

  new keyseed: mkeyseed; 
  let key = mkgen(keyseed) in

  out(c_out, ());
  (!N A | !N B)
)
