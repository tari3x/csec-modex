let A = 
event client_begin(clientID, serverID, request);
let var1 = len(clientID)<4> castToInt TSBase(unsigned long ) in
new kS1<lenvar(i84)>;
let msg1 = 70|len(request)<4>|request|kS1 in
let cipher1 = E(key(clientID, serverID), msg1) in
let var2 = len(cipher1)<4> castToInt TSBase(unsigned long ) in
let var3 = i5 + var1 + var2 in
let msg2 = var3 castToInt TSBase(unsigned int ) in
out(c, msg2);
let msg3 = 70|len(clientID)<4>|clientID|cipher1 in
out(c, msg3);
in(c, msg4<4>);
in(c, msg5<((msg4 castToInt TSBase(unsigned long )) castToInt TSBase(int )) castToInt TSBase(unsigned long )>);
event client_accept(clientID, serverID, request, D(kS1, msg5));

let B = 
in(c, msg1<4>);
in(c, msg2<((msg1 castToInt TSBase(unsigned long )) castToInt TSBase(int )) castToInt TSBase(unsigned long )>);
if 70 = msg2{0, 1} then 
let var1 = msg2{1, 4} in
if !((msg1 castToInt TSBase(unsigned long )) <= (i5 + (var1 castToInt TSBase(unsigned long )))) then 
if !((msg1 castToInt TSBase(unsigned long )) < (i5 + (var1 castToInt TSBase(unsigned long )))) then 
let var2 = var1 castToInt TSBase(unsigned long ) in
let client1 = msg2{5, var2} in
let cipher1 = msg2{i5 + msg2{1, 4}, len(msg2) - (i5 + msg2{1, 4})} in
let msg3 = D(key(client1, serverID), cipher1) in
let var3 = msg3{1, 4} in
if !((len(msg3)<4> castToInt TSBase(unsigned long )) <= (i5 + (var3 castToInt TSBase(unsigned long )))) then 
if 70 = msg3{0, 1} then 
let var4 = var3 castToInt TSBase(unsigned long ) in
let var5 = msg3{5, var4} in
new response1<lenvar(i160)>;
event server_reply(client1, serverID, var5, response1);
let key1 = msg3{i5 + msg3{1, 4}, len(msg3) - (i5 + msg3{1, 4})} in
let cipher2 = E(key1, response1) in
out(c, len(cipher2)<4>);
out(c, cipher2);

