
free c.

(********************************
  Crypto
*********************************)

fun E/3.
fun kgen/1.
reduc
  D(E(x, k, r), k) = x.

(********************************
  Key lookup
*********************************)

private fun lookup/3.

(* 
equation 
  key(A, B) = key(B, A).
*)

(********************************
  Misc
*********************************)

reduc inverse_injbot(x) = x.


(******************** 
  Constants 
********************)

(******************** 
  Concatenation and Parsing 
********************)

data conc1/2.

reduc 
  parse3(conc1(x0, x1)) = x0.
reduc 
  parse4(conc1(x0, x1)) = x1.

(********************************
  <Query>
*********************************)

(* Authentication properties: *)
query ev:client_accept(client, server, req, resp) ==> ev:server_reply(client, server, req, resp) | ev:bad(client, server).
query ev:server_reply(client, server, req, resp) ==> ev:client_begin(client, server, req) | ev:bad(client, server).

(* Secrecy properties: *)
query attacker:lookup(client, server, db) ==> ev:bad(client, server).
query attacker:kgen(kS_seed1[clientID = client; serverID = server]) ==> ev:bad(client, server).

(* Sanity property: *)
query ev:client_accept(client, server, req, resp) ==> ev:bad(client, server).
free request, response.



(*************************** 
  Model 
***************************)

let A = 
if clientID = xClient then 
event client_begin(clientID, serverID, request);
new kS_seed1;
let kS1 = kgen(kS_seed1) in
new nonce1;
let msg1 = conc1(clientID, E(conc1(request, kS1), lookup(clientID, serverID, db), nonce1)) in
out(c, msg1);
in(c, msg2);
in(c, msg3);
event client_accept(clientID, serverID, request, inverse_injbot(D(msg3, kS1))); 0.

let B = 
in(c, msg1);
in(c, msg2);
let client1 = parse3(msg2) in
if client1 = xClient then 
let msg3 = inverse_injbot(D(parse4(msg2), lookup(parse3(msg2), serverID, db))) in
event server_reply(parse3(msg2), serverID, parse3(msg3), response);
new nonce1;
let cipher1 = E(response, parse4(msg3), nonce1) in
out(c, cipher1); 0.

(********************************
  <Environment>
*********************************)

process
  ! ( new db; in(c, xClient); (* not used in PV *)
    ! (in(c, clientID); in(c, serverID); !A)
  | ! (in(c, serverID); !B)
  | ! (in(c, (clientID, serverID)); event bad(clientID, serverID); out(c, lookup(clientID, serverID, db))))
