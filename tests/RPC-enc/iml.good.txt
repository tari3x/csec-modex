let A = 
if len(clientID)<4> castToInt TSBase(unsigned long ) = len(xClient)<8> then 
if clientID = xClient then 
event client_begin(clientID, serverID, request);
new kS_seed1<lenvar(i344)>: keyseed;
let kS1 = kgen(kS_seed1) in
let msg1 = 70|len(request)<4>|request|kS1 in
new nonce1<lenvar(i417)>: seed;
let cipher1 = E(msg1, lookup(clientID, serverID, db), nonce1) in
if !(len(cipher1)<4> > encrypt_len()<4>) then 
let var1 = len(clientID)<4> castToInt TSBase(unsigned long ) in
let var2 = len(cipher1)<4> castToInt TSBase(unsigned long ) in
let var3 = i5 + var1 + var2 in
let msg2 = var3 castToInt TSBase(unsigned int ) in
out(c, msg2);
let var4 = (var3 castToInt TSBase(unsigned int )) castToInt TSBase(unsigned long ) in
if i0 < var4 then 
let msg3 = 70|len(clientID)<4>|clientID|cipher1 in
out(c, msg3);
if !((var4 castToInt TSBase(int )) <= i0) then 
if !(((var4 castToInt TSBase(int )) castToInt TSBase(unsigned long )) < var4) then 
in(c, msg4<4>);
in(c, msg5<((msg4 castToInt TSBase(unsigned long )) castToInt TSBase(int )) castToInt TSBase(unsigned long )>);
let msg6 = inverse_injbot(D(msg5, kS1)) in
if !(len(msg6)<4> > decrypt_len()<4>) then 
event client_accept(clientID, serverID, request, msg6);

let B = 
in(c, msg1<4>);
in(c, msg2<((msg1 castToInt TSBase(unsigned long )) castToInt TSBase(int )) castToInt TSBase(unsigned long )>);
if 70 = msg2{0, 1} then 
if !(msg2{1, 4} > i1024) then 
let var1 = msg2{1, 4} in
if !((msg1 castToInt TSBase(unsigned long )) <= (i5 + (var1 castToInt TSBase(unsigned long )))) then 
if !((msg1 castToInt TSBase(unsigned long )) < (i5 + (var1 castToInt TSBase(unsigned long )))) then 
if var1 castToInt TSBase(unsigned long ) = len(xClient)<8> then 
let var2 = var1 castToInt TSBase(unsigned long ) in
let client1 = msg2{5, var2} in
if client1 = xClient then 
let cipher1 = msg2{i5 + msg2{1, 4}, len(msg2) - (i5 + msg2{1, 4})} in
let msg3 = inverse_injbot(D(cipher1, lookup(client1, serverID, db))) in
if !(len(msg3)<4> > decrypt_len()<4>) then 
if !((len(msg3)<4> castToInt TSBase(unsigned long )) < i5) then 
let var3 = msg3{1, 4} in
if !((len(msg3)<4> castToInt TSBase(unsigned long )) <= (i5 + (var3 castToInt TSBase(unsigned long )))) then 
if 70 = msg3{0, 1} then 
let var4 = var3 castToInt TSBase(unsigned long ) in
let var5 = msg3{5, var4} in
event server_reply(client1, serverID, var5, response);
let key1 = msg3{i5 + msg3{1, 4}, len(msg3) - (i5 + msg3{1, 4})} in
new nonce1<lenvar(i242)>: seed;
let cipher2 = E(response, key1, nonce1) in
if !(len(cipher2)<4> > encrypt_len()<4>) then 
out(c, len(cipher2)<4>);
if i0 < (len(cipher2)<4> castToInt TSBase(unsigned long )) then 
out(c, cipher2);
let var6 = (len(cipher2)<4> castToInt TSBase(unsigned long )) castToInt TSBase(int ) in
if !(var6 <= i0) then 
if !((var6 castToInt TSBase(unsigned long )) < (len(cipher2)<4> castToInt TSBase(unsigned long ))) then 

