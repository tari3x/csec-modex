let A = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume Defined(payload) in
assume (len(payload) >= 0) /\ (len(payload) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume Defined(key) in
assume (len(key) >= 0) /\ (len(key) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) <> 0 then 
event client_send(payload);
if ¬(len(payload) > 1000) then 
if ¬(len(key) > 1000) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, 8 + 1 + len(payload) + 20) <> 0 then 
if (<<heap 16; ((8)^[u,8])_[u,8] + ((1)^[u,8])_[u,8] + ((len(payload))^[u,8])_[u,8](1)>>)_[u,8] <> 0 then 
let msg1 = (len(payload))^[u,8]|(2)^[u,1]|payload (* named msg1 *) in
let key1 = key (* named key1 *) in
let hash1 = HMAC("sha1", msg1, key1) (* named hash1 *) in
assume len(hash1) = 20 in
in(c, var1);
assume Defined(var1) in
assume len(var1) = 112 in
let BIO_new_connect_result1 = var1 (* named BIO_new_connect_result1 *) in
in(c, var2);
assume Defined(var2) in
assume len(var2) = 8 in
let BIO_ctrl_result1 = var2 (* named BIO_ctrl_result1 *) in
if ¬((BIO_ctrl_result1)_[s,8] <= 0) then 
let msg2 = (((8)^[u,8] + (1)^[u,8]) + (len(payload))^[u,8]) + (20)^[u,8] (* named msg2 *) in
out(c, msg2);
let msg3 = (len(payload))^[u,8]|(1)^[u,1]|payload|hash1 (* named msg3 *) in
out(c, msg3);

let B = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume Defined(key) in
assume (len(key) >= 0) /\ (len(key) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(key) > 1000) then 
in(c, var3);
assume Defined(var3) in
assume len(var3) = 112 in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) <> 0 then 
let BIO_new_accept_result1 = var3 (* named BIO_new_accept_result1 *) in
in(c, var4);
assume Defined(var4) in
assume len(var4) = 8 in
let BIO_ctrl_result2 = var4 (* named BIO_ctrl_result2 *) in
if ¬((BIO_ctrl_result2)_[s,8] <= 0) then 
in(c, var5);
assume Defined(var5) in
assume len(var5) = 8 in
let BIO_ctrl_result3 = var5 (* named BIO_ctrl_result3 *) in
if ¬((BIO_ctrl_result3)_[s,8] <= 0) then 
in(c, var6);
assume Defined(var6) in
assume len(var6) = 112 in
let BIO_pop_result1 = var6 (* named BIO_pop_result1 *) in
in(c, var7);
assume Defined(var7) in
assume len(var7) = 4 in
let BIO_free_result1 = var7 (* named BIO_free_result1 *) in
in(c, var8);
assume Defined(var8) in
assume len(var8) = 8 in
let msg4 = var8 (* named msg4 *) in
if ¬((msg4)_[u,8] < 8) then 
if ¬((msg4)_[u,8] > (8 + 1 + 1000 + 20)) then 
in(c, var9);
assume Defined(var9) in
assume len(var9) = (msg4)_[u,8] in
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg4)_[u,8]) <> 0 then 
let msg5 = var9 (* named msg5 *) in
if ¬((msg5{0, 8})_[u,8] > 1000) then 
if ¬((8 + 1 + (msg5{0, 8})_[u,8] + 20) <> (msg4)_[u,8]) then 
if ¬((msg5{8, 1})_[u,1] <> 1) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, (msg4)_[u,8], 8 + 1 + (msg5{0, 8})_[u,8]) <> 0 then 
let msg6 = msg5{0, 8}|(2)^[u,1]|msg5{8 + 1, (msg5{0, 8})_[u,8]} (* named msg6 *) in
let key2 = key (* named key2 *) in
let hash2 = HMAC("sha1", msg6, key2) (* named hash2 *) in
assume len(hash2) = 20 in
assume Defined(hash2) /\ ((len(msg5) >= len(msg5)) /\ ((8 + 1 + (msg5{0, 8})_[u,8]) >= 0) /\ ((len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])) >= 0)) in
assume len(Cmp(hash2, msg5{8 + 1 + (msg5{0, 8})_[u,8], len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])}:fixed_20_hash)) = 4 in
ifeq hash2 = msg5{8 + 1 + (msg5{0, 8})_[u,8], len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])}:fixed_20_hash then 
event server_recv(msg5{8 + 1, (msg5{0, 8})_[u,8]});
in(c, var10);
assume Defined(var10) in
assume len(var10) = 1 in
let msg7 = var10 (* named msg7 *) in

