
channel c_in, c_out. 

param N.

(******************** 
  Types
********************)

type bounded_1000_payload [bounded].
type fixed_20_hash [fixed].

(******************** 
  MAC
********************)

type bounded_1000_mkeyseed [fixed, large].
type bounded_1000_mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(bounded_1000_mkeyseed, bounded_1000_mkey, bitstring, fixed_20_hash, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: bounded_1000_mkey, r: fixed_20_hash;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

fun HMAC(bitstring, bitstring, bounded_1000_mkey): fixed_20_hash.
  
const arithmetic1: bitstring.

(* ASSERT_DEFINITION
  arithmetic1/0
  "sha1"
*)

forall m: bitstring, k: bounded_1000_mkey;
  HMAC(arithmetic1, m, k) = HMAC_sha1(m, k).
  

(*************************** 
  Formatting Functions 
***************************)

(* conc1 := (len(arg0))^[u,8]|(2)^[u,1]|arg0 *)
fun conc1(bounded_1000_payload): bitstring [compos].

(* conc2 := (len(arg0))^[u,8]|(1)^[u,1]|arg0|arg1 *)
fun conc2(bounded_1000_payload, fixed_20_hash): bitstring [compos].

(* parse1 := arg0{8 + 1, (arg0{0, 8})_[u,8]} *)
fun parse1(bitstring): bounded_1000_payload.

(* parse2 := arg0{8 + 1 + (arg0{0, 8})_[u,8], len(arg0) - (8 + 1 + (arg0{0, 8})_[u,8])} *)
fun parse2(bitstring): fixed_20_hash.


forall var1: bounded_1000_payload, var2: bounded_1000_payload, var3: fixed_20_hash;
  conc1(var1) <> conc2(var2, var3).

(*************************** 
  Parsing Equations 
***************************)

forall arg0: bounded_1000_payload, arg1: fixed_20_hash;
parse2(conc2(arg0, arg1)) = arg1.
forall arg0: bounded_1000_payload, arg1: fixed_20_hash;
parse1(conc2(arg0, arg1)) = arg0.
forall arg0: bounded_1000_payload;
parse1(conc1(arg0)) = arg0.

(*************************** 
  Arithmetic Functions 
***************************)

(* arithmetic1 is already defined in the template *)

(* arithmetic2 := (((8)^[u,8] + (1)^[u,8]) + (len(arg0))^[u,8]) + (20)^[u,8] *)
fun arithmetic2(bounded_1000_payload): bitstring.


(*************************** 
  Auxiliary Tests 
***************************)

(* cond10 := ¬((8 + 1 + (arg0{0, 8})_[u,8] + 20) <> (arg1)_[u,8]) *)
fun cond10(bitstring, bitstring): bool.

(* cond11 := ¬((arg0{8, 1})_[u,1] <> 1) *)
fun cond11(bitstring): bool.

(* cond3 := ¬((arg0)_[s,8] <= 0) *)
fun cond3(bitstring): bool.

(* cond5 := ¬((arg0)_[s,8] <= 0) *)
fun cond5(bitstring): bool.

(* cond6 := ¬((arg0)_[s,8] <= 0) *)
fun cond6(bitstring): bool.

(* cond7 := ¬((arg0)_[u,8] < 8) *)
fun cond7(bitstring): bool.

(* cond8 := ¬((arg0)_[u,8] > (8 + 1 + 1000 + 20)) *)
fun cond8(bitstring): bool.

(* cond9 := ¬((arg0{0, 8})_[u,8] > 1000) *)
fun cond9(bitstring): bool.


(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

fun Zbitstring_prime(bitstring): bitstring.

fun Zbounded_1000_payload(bounded_1000_payload): bounded_1000_payload.

fun Zbounded_1000_payload_prime(bounded_1000_payload): bounded_1000_payload.

fun Zfixed_20_hash(fixed_20_hash): fixed_20_hash.

fun Zfixed_20_hash_prime(fixed_20_hash): fixed_20_hash.

const zero_fixed_20_hash: fixed_20_hash.


(*************************** 
  Primed Functions 
***************************)

fun conc2_prime(bounded_1000_payload, fixed_20_hash): bitstring.

fun conc1_prime(bounded_1000_payload): bitstring.


(*************************** 
  Typecasting 
***************************)


(*************************** 
  Auxiliary Facts 
***************************)

forall x49: fixed_20_hash, x48: bounded_1000_payload;
	cond9(conc2(x48, x49)) = cond9(conc2_prime(Zbounded_1000_payload(x48), Zfixed_20_hash(x49))).
forall x50: bounded_1000_payload;
	cond9(conc1(x50)) = cond9(conc1_prime(Zbounded_1000_payload(x50))).
forall x79: fixed_20_hash, x78: bounded_1000_payload;
	cond11(conc2(x78, x79)) = cond11(conc2_prime(Zbounded_1000_payload(x78), Zfixed_20_hash(x79))).
forall x80: bounded_1000_payload;
	cond11(conc1(x80)) = cond11(conc1_prime(Zbounded_1000_payload(x80))).
forall x85: fixed_20_hash, x84: bounded_1000_payload, arg1: bitstring;
	cond10(conc2(x84, x85), arg1) = cond10(conc2_prime(Zbounded_1000_payload(x84), Zfixed_20_hash(x85)), arg1).
forall x86: bounded_1000_payload, arg1: bitstring;
	cond10(conc1(x86), arg1) = cond10(conc1_prime(Zbounded_1000_payload(x86)), arg1).

(*************************** 
  Zero Facts 
***************************)

forall arg1: fixed_20_hash, arg0: bounded_1000_payload;
	Zbitstring(conc2(arg0, arg1)) = Zbitstring_prime(conc2(Zbounded_1000_payload(arg0), Zfixed_20_hash(arg1))).
forall arg0: bounded_1000_payload;
	Zbitstring(conc1(arg0)) = Zbitstring_prime(conc1(Zbounded_1000_payload(arg0))).
forall x: fixed_20_hash;
	Zfixed_20_hash(x) = zero_fixed_20_hash().

(******************** 
  <Query>
********************)
 
event client_send(bounded_1000_payload).
event server_recv(bounded_1000_payload).

query x: bounded_1000_payload, y:bounded_1000_payload;
  event server_recv(x) ==> client_send(x).


(*************************** 
  Model 
***************************)

let client = 
in(c_in, (var1: bitstring, BIO_ctrl_result1: bitstring));
event client_send(payload);
let msg1 = conc1(payload) in
let var20 = arithmetic1 in
let hash1 = HMAC(var20, msg1, key) in
if cond3(BIO_ctrl_result1) then 
let msg2 = arithmetic2(payload) in
let msg3 = conc2(payload, hash1) in
out(c_out, (msg3, msg2)); 0 .

let server = 
in(c_in, (var3: bitstring, BIO_ctrl_result2: bitstring, BIO_ctrl_result3: bitstring, var6: bitstring, var7: bitstring, msg4: bitstring, msg5: bitstring));
if cond5(BIO_ctrl_result2) then 
if cond6(BIO_ctrl_result3) then 
if cond7(msg4) then 
if cond8(msg4) then 
if cond9(msg5) then 
if cond10(msg5, msg4) then 
if cond11(msg5) then 
let var12 = parse1(msg5) in
let msg6 = conc1(var12) in
let var14 = arithmetic1 in
let hash2 = HMAC(var14, msg6, key) in
let var16 = parse2(msg5) in
let var17 = var16 in
if hash2 = var17 then 
event server_recv(var12);
yield .

(************************
  <Environment>
*************************)


process
! N (
  in(c_in, (payload: bounded_1000_payload));

  new keyseed: bounded_1000_mkeyseed; 
  let key = mkgen(keyseed) in

  out(c_out, ());
  (!N client | !N server)
)
