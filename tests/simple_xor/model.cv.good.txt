
channel c_in, c_out. 

param N.

(************************
  Types
*************************)

type fixed_20 [fixed, large].
type fixed_21 [fixed, large].

(************************
  XOR
*************************)

expand Xor(fixed_21, XOR).


(*************************** 
  Formatting Functions 
***************************)

(* conc1 := (1)^[u,1]|arg0 *)
fun conc1(fixed_20): fixed_21 [compos].



(*************************** 
  Parsing Equations 
***************************)


(*************************** 
  Arithmetic Functions 
***************************)


(*************************** 
  Auxiliary Tests 
***************************)

(* cond1 := Malloc(len(arg0) + 1, len(arg1) + 1, len(arg2) + 1, len(arg3) + 1, len(arg4) + 1) <> 0 *)
fun cond1(bitstring, bitstring, bitstring, bitstring, bitstring): bool.

(* cond2 := Â¬((arg0)_[s,8] <= 0) *)
fun cond2(bitstring): bool.


(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

fun Zbitstring_prime(bitstring): bitstring.

fun Zfixed_20(fixed_20): fixed_20.

fun Zfixed_20_prime(fixed_20): fixed_20.

fun Zfixed_21(fixed_21): fixed_21.

fun Zfixed_21_prime(fixed_21): fixed_21.

const zero_fixed_20: fixed_20.

const zero_fixed_21: fixed_21.


(*************************** 
  Primed Functions 
***************************)

fun cond1_prime(bitstring, bitstring, bitstring, bitstring, bitstring): bool.


(*************************** 
  Typecasting 
***************************)


(*************************** 
  Auxiliary Facts 
***************************)

forall arg4: bitstring, arg3: bitstring, arg2: bitstring, arg1: bitstring, arg0: bitstring;
	cond1(arg0, arg1, arg2, arg3, arg4) = cond1_prime(Zbitstring(arg0), Zbitstring(arg1), Zbitstring(arg2), Zbitstring(arg3), Zbitstring(arg4)).

(*************************** 
  Zero Facts 
***************************)

forall arg0: fixed_20;
	Zfixed_21(conc1(arg0)) = Zfixed_21_prime(conc1(Zfixed_20(arg0))).
forall x: fixed_20;
	Zfixed_20(x) = zero_fixed_20().
forall x: fixed_21;
	Zfixed_21(x) = zero_fixed_21().

(************************
  <Query>
*************************)

query secret nonce1.


(*************************** 
  Model 
***************************)

let client = 
in(c_in, (var2: bitstring, BIO_ctrl_result1: bitstring));
new nonce1: fixed_20;
if cond1(argv0, argv1, argv2, argv3, argv4) then 
let var11 = conc1(nonce1) in
let msg1 = XOR(var11, pad) in
if cond2(BIO_ctrl_result1) then 
out(c_out, msg1); 0 .

let server = 
in(c_in, ());
yield .

(************************
  <Environment>
*************************)

let server' =
  in(c_in, (argv0: bitstring, 
            argv1: bitstring,
            argv2: bitstring,
            argv3: bitstring,
            argv4: bitstring));
  out(c_out, ());
  server .

let client' =
  in(c_in, (argv0: bitstring, 
            argv1: bitstring,
            argv2: bitstring,
            argv3: bitstring,
            argv4: bitstring));
  out(c_out, ());
  client .

process
! N (
  in(c_in, ());

  (* one-time pad *)
  new pad: fixed_21;

  out(c_out, ());
  (client' | server')
)
