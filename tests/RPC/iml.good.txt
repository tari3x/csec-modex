let A = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) = 0) then 
assume Defined(keyAB) in
assume (len(keyAB) >= 0) /\ (len(keyAB) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB)) = 0) then 
if ¬(len(keyAB) > 2147483647) then 
assume Defined(request) in
assume (len(request) >= 0) /\ (len(request) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request)) = 0) then 
if ¬(len(request) > 2147483647) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request)) = 0) then 
if ¬(len(request) > 2000) then 
assume len(Cmp(Ztp((argv1|(0)^[s,1]){0, 6}), Ztp("client"))) = 4 in
if Ztp((argv1|(0)^[s,1]){0, 6}) = Ztp("client") then 
event client_begin(request);
in(c, var1);
assume Defined(var1) in
assume len(var1) = 112 in
let BIO_new_connect_result1 = var1 (* named BIO_new_connect_result1 *) in
in(c, var2);
assume Defined(var2) in
assume len(var2) = 8 in
let BIO_ctrl_result1 = var2 (* named BIO_ctrl_result1 *) in
if ¬((BIO_ctrl_result1)_[s,8] <= 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request)) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1) = 0) then 
let msg1 = (7)^[u,8]|"|"|"Request"|request (* named msg1 *) in
let key1 = keyAB (* named key1 *) in
let hash1 = HMAC("sha1", msg1, key1) (* named hash1 *) in
assume len(hash1) = 20 in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request)) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1) = 0) then 
let msg2 = (((len(request))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] (* named msg2 *) in
out(c, msg2);
let msg3 = (len(request))^[u,8]|"|"|request|hash1 (* named msg3 *) in
out(c, msg3);
in(c, var3);
assume Defined(var3) in
assume len(var3) = 8 in
let msg4 = var3 (* named msg4 *) in
if ¬((msg4)_[u,8] > 2147483647) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8]) = 0) then 
if 0 < (msg4)_[u,8] then 
in(c, var4);
assume Defined(var4) in
assume len(var4) = (msg4)_[u,8] in
let msg5 = var4 (* named msg5 *) in
if ¬((msg4)_[u,8] < (8 + 1)) then 
if ¬((msg5{0, 8})_[u,8] > ((msg4)_[u,8] - (8 + 1))) then 
assume ((len(msg5) >= (8 + 1)) /\ (8 >= 0) /\ (1 >= 0)) /\ True() in
assume len(Cmp(msg5{8, 1}, "|")) = 4 in
if msg5{8, 1} = "|" then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8]) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8])) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8]), (msg5{0, 8})_[u,8]) = 0) then 
if ¬((msg5{0, 8})_[u,8] > 2000) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8]), (msg5{0, 8})_[u,8], (msg5{0, 8})_[u,8]) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8]), (msg5{0, 8})_[u,8], (msg5{0, 8})_[u,8], len(request)) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8]), (msg5{0, 8})_[u,8], (msg5{0, 8})_[u,8], len(request), len(request) + (msg5{0, 8})_[u,8] + 8 + 1) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), len(request), 7 + len(request) + 8 + 1, len(request), len(request) + 20 + 8 + 1, (msg4)_[u,8], (msg5{0, 8})_[u,8], (msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8]), (msg5{0, 8})_[u,8], (msg5{0, 8})_[u,8], len(request), len(request) + (msg5{0, 8})_[u,8] + 8 + 1, 8 + len(request) + (msg5{0, 8})_[u,8] + 8 + 1 + 8 + 1) = 0) then 
let msg6 = (8)^[u,8]|"|"|"Response"|(len(request))^[u,8]|"|"|request|msg5{8 + 1, (msg5{0, 8})_[u,8]} (* named msg6 *) in
let key2 = keyAB (* named key2 *) in
let hash2 = HMAC("sha1", msg6, key2) (* named hash2 *) in
assume len(hash2) = 20 in
if ((msg4)_[u,8] - (8 + 1 + (msg5{0, 8})_[u,8])) = 20 then 
assume ((len(msg5) >= len(msg5)) /\ ((8 + 1 + (msg5{0, 8})_[u,8]) >= 0) /\ ((len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])) >= 0)) /\ Defined(hash2) in
assume len(Cmp(msg5{8 + 1 + (msg5{0, 8})_[u,8], len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])}, hash2)) = 4 in
ifeq msg5{8 + 1 + (msg5{0, 8})_[u,8], len(msg5) - (8 + 1 + (msg5{0, 8})_[u,8])} = hash2 then 
event client_accept(request, msg5{8 + 1, (msg5{0, 8})_[u,8]});

let B = 
assume argv0 = argv0 in
assume ((len(argv0) + 1) >= 0) /\ ((len(argv0) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv1 = argv1 in
assume ((len(argv1) + 1) >= 0) /\ ((len(argv1) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv2 = argv2 in
assume ((len(argv2) + 1) >= 0) /\ ((len(argv2) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv3 = argv3 in
assume ((len(argv3) + 1) >= 0) /\ ((len(argv3) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
assume argv4 = argv4 in
assume ((len(argv4) + 1) >= 0) /\ ((len(argv4) + 1) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1) = 0) then 
assume Defined(keyAB) in
assume (len(keyAB) >= 0) /\ (len(keyAB) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB)) = 0) then 
if ¬(len(keyAB) > 2147483647) then 
assume Defined(request) in
assume (len(request) >= 0) /\ (len(request) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request)) = 0) then 
if ¬(len(request) > 2147483647) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request)) = 0) then 
if ¬(len(request) > 2000) then 
assume len(Cmp(Ztp((argv1|(0)^[s,1]){0, 6}), Ztp("client"))) = 4 in
if ¬(Ztp((argv1|(0)^[s,1]){0, 6}) = Ztp("client")) then 
in(c, var5);
assume Defined(var5) in
assume len(var5) = 112 in
let BIO_new_accept_result1 = var5 (* named BIO_new_accept_result1 *) in
in(c, var6);
assume Defined(var6) in
assume len(var6) = 8 in
let BIO_ctrl_result2 = var6 (* named BIO_ctrl_result2 *) in
if ¬((BIO_ctrl_result2)_[s,8] <= 0) then 
in(c, var7);
assume Defined(var7) in
assume len(var7) = 8 in
let BIO_ctrl_result3 = var7 (* named BIO_ctrl_result3 *) in
if ¬((BIO_ctrl_result3)_[s,8] <= 0) then 
in(c, var8);
assume Defined(var8) in
assume len(var8) = 112 in
let BIO_pop_result1 = var8 (* named BIO_pop_result1 *) in
in(c, var9);
assume Defined(var9) in
assume len(var9) = 4 in
let BIO_free_result1 = var9 (* named BIO_free_result1 *) in
in(c, var10);
assume Defined(var10) in
assume len(var10) = 8 in
let msg7 = var10 (* named msg7 *) in
if ¬((msg7)_[u,8] > 2147483647) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8]) = 0) then 
if 0 < (msg7)_[u,8] then 
in(c, var11);
assume Defined(var11) in
assume len(var11) = (msg7)_[u,8] in
let msg8 = var11 (* named msg8 *) in
if ¬((msg7)_[u,8] < (8 + 1)) then 
if ¬((msg8{0, 8})_[u,8] > ((msg7)_[u,8] - (8 + 1))) then 
assume ((len(msg8) >= (8 + 1)) /\ (8 >= 0) /\ (1 >= 0)) /\ True() in
assume len(Cmp(msg8{8, 1}, "|")) = 4 in
if msg8{8, 1} = "|" then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8]) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8])) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8]) = 0) then 
if ¬((msg8{0, 8})_[u,8] > 2000) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8]) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1) = 0) then 
let msg9 = (7)^[u,8]|"|"|"Request"|msg8{8 + 1, (msg8{0, 8})_[u,8]} (* named msg9 *) in
let key3 = keyAB (* named key3 *) in
let hash3 = HMAC("sha1", msg9, key3) (* named hash3 *) in
assume len(hash3) = 20 in
if ((msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8])) = 20 then 
assume ((len(msg8) >= len(msg8)) /\ ((8 + 1 + (msg8{0, 8})_[u,8]) >= 0) /\ ((len(msg8) - (8 + 1 + (msg8{0, 8})_[u,8])) >= 0)) /\ Defined(hash3) in
assume len(Cmp(msg8{8 + 1 + (msg8{0, 8})_[u,8], len(msg8) - (8 + 1 + (msg8{0, 8})_[u,8])}, hash3)) = 4 in
ifeq msg8{8 + 1 + (msg8{0, 8})_[u,8], len(msg8) - (8 + 1 + (msg8{0, 8})_[u,8])} = hash3 then 
assume Defined(response) in
assume (len(response) >= 0) /\ (len(response) <= ((256 * 256 * 256 * 256 * 256 * 256 * 256 * 256) - 1)) in
if ¬(len(response) > 2000) then 
if Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response)) <> 0 then 
event server_reply(msg8{8 + 1, (msg8{0, 8})_[u,8]}, response);
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response)) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response), (msg8{0, 8})_[u,8]) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8] + len(response) + 8 + 1) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8] + len(response) + 8 + 1, 8 + (msg8{0, 8})_[u,8] + len(response) + 8 + 1 + 8 + 1) = 0) then 
let msg10 = (8)^[u,8]|"|"|"Response"|msg8{0, 8}|"|"|msg8{8 + 1, (msg8{0, 8})_[u,8]}|response (* named msg10 *) in
let key4 = keyAB (* named key4 *) in
let hash4 = HMAC("sha1", msg10, key4) (* named hash4 *) in
assume len(hash4) = 20 in
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8] + len(response) + 8 + 1, 8 + (msg8{0, 8})_[u,8] + len(response) + 8 + 1 + 8 + 1, len(response)) = 0) then 
if ¬(Malloc(len(argv0) + 1, len(argv1) + 1, len(argv2) + 1, len(argv3) + 1, len(argv4) + 1, len(keyAB), len(request), len(request), (msg7)_[u,8], (msg8{0, 8})_[u,8], (msg7)_[u,8] - (8 + 1 + (msg8{0, 8})_[u,8]), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8], 7 + (msg8{0, 8})_[u,8] + 8 + 1, len(response), len(response), (msg8{0, 8})_[u,8], (msg8{0, 8})_[u,8] + len(response) + 8 + 1, 8 + (msg8{0, 8})_[u,8] + len(response) + 8 + 1 + 8 + 1, len(response), len(response) + 20 + 8 + 1) = 0) then 
let msg11 = (((len(response))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] (* named msg11 *) in
out(c, msg11);
let msg12 = (len(response))^[u,8]|"|"|response|hash4 (* named msg12 *) in
out(c, msg12);
in(c, var12);
assume Defined(var12) in
assume len(var12) = 1 in
let msg13 = var12 (* named msg13 *) in

