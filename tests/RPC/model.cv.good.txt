
channel c_in, c_out.

param N.

type nondet [fixed].

(********************
Misc
********************)

type bounded_2000_request.
type bounded_2000_response.

(********************
MAC
********************)

type bounded_100_mkeyseed [fixed, large].
type bounded_100_mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(bounded_100_mkeyseed, bounded_100_mkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: bounded_100_mkey, r: bitstring;
((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

fun HMAC(bitstring, bitstring, bounded_100_mkey): bitstring.

const arithmetic1: bitstring.

(* ASSERT_DEFINITION
arithmetic1/0
"sha1"
*)

forall m: bitstring, k: bounded_100_mkey;
HMAC(arithmetic1, m, k) = HMAC_sha1(m, k).


(*************************** 
  Formatting Functions 
***************************)

(* conc1 := (7)^[u,8]|"|"|"Request"|arg0 *)
fun conc1(bounded_2000_request): bitstring [compos].

(* conc2 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc2(bounded_2000_request, bitstring): bitstring [compos].

(* conc3 := (8)^[u,8]|"|"|"Response"|(len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc3(bounded_2000_request, bounded_2000_response): bitstring [compos].

(* conc4 := (7)^[u,8]|"|"|"Request"|arg0 *)
fun conc4(bounded_2000_request): bitstring [compos].

(* conc5 := (8)^[u,8]|"|"|"Response"|(len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc5(bounded_2000_request, bounded_2000_response): bitstring [compos].

(* conc6 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc6(bounded_2000_response, bitstring): bitstring [compos].

(* parse1 := arg0{8 + 1, (arg0{0, 8})_[u,8]} *)
fun parse1(bitstring): bounded_2000_response.

(* parse2 := arg0{8 + 1 + (arg0{0, 8})_[u,8], len(arg0) - (8 + 1 + (arg0{0, 8})_[u,8])} *)
fun parse2(bitstring): bitstring.

(* parse3 := arg0{8 + 1, (arg0{0, 8})_[u,8]} *)
fun parse3(bitstring): bounded_2000_request.

(* parse4 := arg0{8 + 1 + (arg0{0, 8})_[u,8], len(arg0) - (8 + 1 + (arg0{0, 8})_[u,8])} *)
fun parse4(bitstring): bitstring.


forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc5(var1, var2) <> conc4(var3).
forall var1: bounded_2000_request, var2: bounded_2000_response;
  conc5(var1, var2) = conc3(var1, var2).
forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc5(var1, var2) <> conc1(var3).
forall var1: bounded_2000_request, var2: bounded_2000_request, var3: bounded_2000_response;
  conc4(var1) <> conc3(var2, var3).
forall var1: bounded_2000_request;
  conc4(var1) = conc1(var1).
forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc3(var1, var2) <> conc1(var3).
forall var1: bitstring;
  parse4(var1) = parse2(var1).

(*************************** 
  Parsing Equations 
***************************)

forall arg0: bounded_2000_response, arg1: bitstring;
parse4(conc6(arg0, arg1)) = arg1.
forall arg0: bounded_2000_response, arg1: bitstring;
parse2(conc6(arg0, arg1)) = arg1.
forall arg0: bounded_2000_response, arg1: bitstring;
parse1(conc6(arg0, arg1)) = arg0.
forall arg0: bounded_2000_request, arg1: bitstring;
parse4(conc2(arg0, arg1)) = arg1.
forall arg0: bounded_2000_request, arg1: bitstring;
parse3(conc2(arg0, arg1)) = arg0.
forall arg0: bounded_2000_request, arg1: bitstring;
parse2(conc2(arg0, arg1)) = arg1.

(*************************** 
  Arithmetic Functions 
***************************)

(* arithmetic1 is already defined in the template *)

(* arithmetic2 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic2(bounded_2000_response): bitstring.

(* arithmetic3 := "sha1" *)
const arithmetic3: bitstring.

(* arithmetic4 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic4(bounded_2000_request): bitstring.

forall ;
  arithmetic3() = arithmetic1().

(*************************** 
  Auxiliary Tests 
***************************)

(* auxiliary1 := ¬(len(arg0) > 2147483647) *)
fun auxiliary1(bounded_100_mkey): bool.

(* auxiliary10 := len(arg0) = 112 *)
fun auxiliary10(bitstring): bool.

(* auxiliary11 := len(arg0) = 4 *)
fun auxiliary11(bitstring): bool.

(* auxiliary12 := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary12(bitstring): bool.

(* auxiliary13 := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary13(bitstring): bool.

(* auxiliary14 := 0 < (arg0)_[u,8] *)
fun auxiliary14(bitstring): bool.

(* auxiliary15 := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary15(bitstring, bitstring): bool.

(* auxiliary16 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary16(bitstring): bool.

(* auxiliary17 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary17(bitstring, bitstring): bool.

(* auxiliary18 := arg0{8, 1} = "|" *)
fun auxiliary18(bitstring): bool.

(* auxiliary19 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary19(bitstring): bool.

(* auxiliary2 := ¬(len(arg0) > 2147483647) *)
fun auxiliary2(bounded_2000_request): bool.

(* auxiliary20 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary20(bitstring, bitstring): bool.

(* auxiliary21 := ¬(len(arg0) > 2000) *)
fun auxiliary21(bounded_2000_response): bool.

(* auxiliary22 := ¬(len(arg0) > 2147483647) *)
fun auxiliary22(bounded_100_mkey): bool.

(* auxiliary23 := ¬(len(arg0) > 2147483647) *)
fun auxiliary23(bounded_2000_request): bool.

(* auxiliary24 := ¬(len(arg0) > 2000) *)
fun auxiliary24(bounded_2000_request): bool.

(* auxiliary25 := Ztp(arg0{0, 6}) = Ztp("client") *)
fun auxiliary25(bitstring): bool.

(* auxiliary26 := len(arg0) = 112 *)
fun auxiliary26(bitstring): bool.

(* auxiliary27 := len(arg0) = 8 *)
fun auxiliary27(bitstring): bool.

(* auxiliary28 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary28(bitstring): bool.

(* auxiliary29 := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary29(bitstring): bool.

(* auxiliary3 := ¬(len(arg0) > 2000) *)
fun auxiliary3(bounded_2000_request): bool.

(* auxiliary30 := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary30(bitstring): bool.

(* auxiliary31 := 0 < (arg0)_[u,8] *)
fun auxiliary31(bitstring): bool.

(* auxiliary32 := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary32(bitstring, bitstring): bool.

(* auxiliary33 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary33(bitstring): bool.

(* auxiliary34 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary34(bitstring, bitstring): bool.

(* auxiliary35 := arg0{8, 1} = "|" *)
fun auxiliary35(bitstring): bool.

(* auxiliary36 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary36(bitstring): bool.

(* auxiliary37 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary37(bitstring, bitstring): bool.

(* auxiliary4 := ¬(Ztp(arg0{0, 6}) = Ztp("client")) *)
fun auxiliary4(bitstring): bool.

(* auxiliary5 := len(arg0) = 112 *)
fun auxiliary5(bitstring): bool.

(* auxiliary6 := len(arg0) = 8 *)
fun auxiliary6(bitstring): bool.

(* auxiliary7 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary7(bitstring): bool.

(* auxiliary8 := len(arg0) = 8 *)
fun auxiliary8(bitstring): bool.

(* auxiliary9 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary9(bitstring): bool.


(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

fun Zbitstring_prime(bitstring): bitstring.

fun Zbounded_100_mkey(bounded_100_mkey): bounded_100_mkey.

fun Zbounded_100_mkey_prime(bounded_100_mkey): bounded_100_mkey.

fun Zbounded_2000_request(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_request_prime(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_response(bounded_2000_response): bounded_2000_response.

fun Zbounded_2000_response_prime(bounded_2000_response): bounded_2000_response.


(*************************** 
  Primed Functions 
***************************)

fun auxiliary8_prime(bitstring): bool.

fun auxiliary6_prime(bitstring): bool.

fun auxiliary5_prime(bitstring): bool.

fun auxiliary32_prime(bitstring, bitstring): bool.

fun auxiliary3_prime(bounded_2000_request): bool.

fun auxiliary29_prime(bitstring): bool.

fun auxiliary27_prime(bitstring): bool.

fun auxiliary26_prime(bitstring): bool.

fun auxiliary24_prime(bounded_2000_request): bool.

fun auxiliary23_prime(bounded_2000_request): bool.

fun auxiliary22_prime(bounded_100_mkey): bool.

fun auxiliary21_prime(bounded_2000_response): bool.

fun auxiliary2_prime(bounded_2000_request): bool.

fun conc6_prime(bounded_2000_response, bitstring): bitstring.

fun conc5_prime(bounded_2000_request, bounded_2000_response): bitstring.

fun conc4_prime(bounded_2000_request): bitstring.

fun conc3_prime(bounded_2000_request, bounded_2000_response): bitstring.

fun conc2_prime(bounded_2000_request, bitstring): bitstring.

fun conc1_prime(bounded_2000_request): bitstring.

fun auxiliary15_prime(bitstring, bitstring): bool.

fun auxiliary12_prime(bitstring): bool.

fun auxiliary11_prime(bitstring): bool.

fun auxiliary10_prime(bitstring): bool.

fun auxiliary1_prime(bounded_100_mkey): bool.


(*************************** 
  Typecasting 
***************************)


(*************************** 
  Auxiliary Facts 
***************************)

forall arg0: bitstring;
	auxiliary8(arg0) = auxiliary8_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary6(arg0) = auxiliary6_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary5(arg0) = auxiliary5_prime(Zbitstring(arg0)).
forall x58: bitstring, x57: bounded_2000_response, arg0: bitstring;
	auxiliary37(arg0, conc6(x57, x58)) = auxiliary37(arg0, conc6_prime(Zbounded_2000_response(x57), Zbitstring(x58))).
forall x60: bounded_2000_response, x59: bounded_2000_request, arg0: bitstring;
	auxiliary37(arg0, conc5(x59, x60)) = auxiliary37(arg0, conc5_prime(Zbounded_2000_request(x59), Zbounded_2000_response(x60))).
forall x61: bounded_2000_request, arg0: bitstring;
	auxiliary37(arg0, conc4(x61)) = auxiliary37(arg0, conc4_prime(Zbounded_2000_request(x61))).
forall x63: bounded_2000_response, x62: bounded_2000_request, arg0: bitstring;
	auxiliary37(arg0, conc3(x62, x63)) = auxiliary37(arg0, conc3_prime(Zbounded_2000_request(x62), Zbounded_2000_response(x63))).
forall x65: bitstring, x64: bounded_2000_request, arg0: bitstring;
	auxiliary37(arg0, conc2(x64, x65)) = auxiliary37(arg0, conc2_prime(Zbounded_2000_request(x64), Zbitstring(x65))).
forall x66: bounded_2000_request, arg0: bitstring;
	auxiliary37(arg0, conc1(x66)) = auxiliary37(arg0, conc1_prime(Zbounded_2000_request(x66))).
forall x70: bitstring, x69: bounded_2000_response;
	auxiliary36(conc6(x69, x70)) = auxiliary36(conc6_prime(Zbounded_2000_response(x69), Zbitstring(x70))).
forall x72: bounded_2000_response, x71: bounded_2000_request;
	auxiliary36(conc5(x71, x72)) = auxiliary36(conc5_prime(Zbounded_2000_request(x71), Zbounded_2000_response(x72))).
forall x73: bounded_2000_request;
	auxiliary36(conc4(x73)) = auxiliary36(conc4_prime(Zbounded_2000_request(x73))).
forall x75: bounded_2000_response, x74: bounded_2000_request;
	auxiliary36(conc3(x74, x75)) = auxiliary36(conc3_prime(Zbounded_2000_request(x74), Zbounded_2000_response(x75))).
forall x77: bitstring, x76: bounded_2000_request;
	auxiliary36(conc2(x76, x77)) = auxiliary36(conc2_prime(Zbounded_2000_request(x76), Zbitstring(x77))).
forall x78: bounded_2000_request;
	auxiliary36(conc1(x78)) = auxiliary36(conc1_prime(Zbounded_2000_request(x78))).
forall x82: bitstring, x81: bounded_2000_response;
	auxiliary35(conc6(x81, x82)) = auxiliary35(conc6_prime(Zbounded_2000_response(x81), Zbitstring(x82))).
forall x84: bounded_2000_response, x83: bounded_2000_request;
	auxiliary35(conc5(x83, x84)) = auxiliary35(conc5_prime(Zbounded_2000_request(x83), Zbounded_2000_response(x84))).
forall x85: bounded_2000_request;
	auxiliary35(conc4(x85)) = auxiliary35(conc4_prime(Zbounded_2000_request(x85))).
forall x87: bounded_2000_response, x86: bounded_2000_request;
	auxiliary35(conc3(x86, x87)) = auxiliary35(conc3_prime(Zbounded_2000_request(x86), Zbounded_2000_response(x87))).
forall x89: bitstring, x88: bounded_2000_request;
	auxiliary35(conc2(x88, x89)) = auxiliary35(conc2_prime(Zbounded_2000_request(x88), Zbitstring(x89))).
forall x90: bounded_2000_request;
	auxiliary35(conc1(x90)) = auxiliary35(conc1_prime(Zbounded_2000_request(x90))).
forall x95: bitstring, x94: bounded_2000_response, arg1: bitstring;
	auxiliary34(conc6(x94, x95), arg1) = auxiliary34(conc6_prime(Zbounded_2000_response(x94), Zbitstring(x95)), arg1).
forall x97: bounded_2000_response, x96: bounded_2000_request, arg1: bitstring;
	auxiliary34(conc5(x96, x97), arg1) = auxiliary34(conc5_prime(Zbounded_2000_request(x96), Zbounded_2000_response(x97)), arg1).
forall x98: bounded_2000_request, arg1: bitstring;
	auxiliary34(conc4(x98), arg1) = auxiliary34(conc4_prime(Zbounded_2000_request(x98)), arg1).
forall x99: bounded_2000_request, x100: bounded_2000_response, arg1: bitstring;
	auxiliary34(conc3(x99, x100), arg1) = auxiliary34(conc3_prime(Zbounded_2000_request(x99), Zbounded_2000_response(x100)), arg1).
forall x102: bitstring, x101: bounded_2000_request, arg1: bitstring;
	auxiliary34(conc2(x101, x102), arg1) = auxiliary34(conc2_prime(Zbounded_2000_request(x101), Zbitstring(x102)), arg1).
forall x103: bounded_2000_request, arg1: bitstring;
	auxiliary34(conc1(x103), arg1) = auxiliary34(conc1_prime(Zbounded_2000_request(x103)), arg1).
forall arg1: bitstring, arg0: bitstring;
	auxiliary32(arg0, arg1) = auxiliary32_prime(Zbitstring(arg0), arg1).
forall arg0: bounded_2000_request;
	auxiliary3(arg0) = auxiliary3_prime(Zbounded_2000_request(arg0)).
forall arg0: bitstring;
	auxiliary29(arg0) = auxiliary29_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary27(arg0) = auxiliary27_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary26(arg0) = auxiliary26_prime(Zbitstring(arg0)).
forall arg0: bounded_2000_request;
	auxiliary24(arg0) = auxiliary24_prime(Zbounded_2000_request(arg0)).
forall arg0: bounded_2000_request;
	auxiliary23(arg0) = auxiliary23_prime(Zbounded_2000_request(arg0)).
forall arg0: bounded_100_mkey;
	auxiliary22(arg0) = auxiliary22_prime(Zbounded_100_mkey(arg0)).
forall arg0: bounded_2000_response;
	auxiliary21(arg0) = auxiliary21_prime(Zbounded_2000_response(arg0)).
forall x220: bitstring, x219: bounded_2000_response, arg0: bitstring;
	auxiliary20(arg0, conc6(x219, x220)) = auxiliary20(arg0, conc6_prime(Zbounded_2000_response(x219), Zbitstring(x220))).
forall x222: bounded_2000_response, x221: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc5(x221, x222)) = auxiliary20(arg0, conc5_prime(Zbounded_2000_request(x221), Zbounded_2000_response(x222))).
forall x223: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc4(x223)) = auxiliary20(arg0, conc4_prime(Zbounded_2000_request(x223))).
forall x225: bounded_2000_response, x224: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc3(x224, x225)) = auxiliary20(arg0, conc3_prime(Zbounded_2000_request(x224), Zbounded_2000_response(x225))).
forall x227: bitstring, x226: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc2(x226, x227)) = auxiliary20(arg0, conc2_prime(Zbounded_2000_request(x226), Zbitstring(x227))).
forall x228: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc1(x228)) = auxiliary20(arg0, conc1_prime(Zbounded_2000_request(x228))).
forall arg0: bounded_2000_request;
	auxiliary2(arg0) = auxiliary2_prime(Zbounded_2000_request(arg0)).
forall x234: bitstring, x233: bounded_2000_response;
	auxiliary19(conc6(x233, x234)) = auxiliary19(conc6_prime(Zbounded_2000_response(x233), Zbitstring(x234))).
forall x236: bounded_2000_response, x235: bounded_2000_request;
	auxiliary19(conc5(x235, x236)) = auxiliary19(conc5_prime(Zbounded_2000_request(x235), Zbounded_2000_response(x236))).
forall x237: bounded_2000_request;
	auxiliary19(conc4(x237)) = auxiliary19(conc4_prime(Zbounded_2000_request(x237))).
forall x239: bounded_2000_response, x238: bounded_2000_request;
	auxiliary19(conc3(x238, x239)) = auxiliary19(conc3_prime(Zbounded_2000_request(x238), Zbounded_2000_response(x239))).
forall x241: bitstring, x240: bounded_2000_request;
	auxiliary19(conc2(x240, x241)) = auxiliary19(conc2_prime(Zbounded_2000_request(x240), Zbitstring(x241))).
forall x242: bounded_2000_request;
	auxiliary19(conc1(x242)) = auxiliary19(conc1_prime(Zbounded_2000_request(x242))).
forall x246: bitstring, x245: bounded_2000_response;
	auxiliary18(conc6(x245, x246)) = auxiliary18(conc6_prime(Zbounded_2000_response(x245), Zbitstring(x246))).
forall x248: bounded_2000_response, x247: bounded_2000_request;
	auxiliary18(conc5(x247, x248)) = auxiliary18(conc5_prime(Zbounded_2000_request(x247), Zbounded_2000_response(x248))).
forall x249: bounded_2000_request;
	auxiliary18(conc4(x249)) = auxiliary18(conc4_prime(Zbounded_2000_request(x249))).
forall x251: bounded_2000_response, x250: bounded_2000_request;
	auxiliary18(conc3(x250, x251)) = auxiliary18(conc3_prime(Zbounded_2000_request(x250), Zbounded_2000_response(x251))).
forall x253: bitstring, x252: bounded_2000_request;
	auxiliary18(conc2(x252, x253)) = auxiliary18(conc2_prime(Zbounded_2000_request(x252), Zbitstring(x253))).
forall x254: bounded_2000_request;
	auxiliary18(conc1(x254)) = auxiliary18(conc1_prime(Zbounded_2000_request(x254))).
forall x259: bitstring, x258: bounded_2000_response, arg1: bitstring;
	auxiliary17(conc6(x258, x259), arg1) = auxiliary17(conc6_prime(Zbounded_2000_response(x258), Zbitstring(x259)), arg1).
forall x261: bounded_2000_response, x260: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc5(x260, x261), arg1) = auxiliary17(conc5_prime(Zbounded_2000_request(x260), Zbounded_2000_response(x261)), arg1).
forall x262: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc4(x262), arg1) = auxiliary17(conc4_prime(Zbounded_2000_request(x262)), arg1).
forall x264: bounded_2000_response, x263: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc3(x263, x264), arg1) = auxiliary17(conc3_prime(Zbounded_2000_request(x263), Zbounded_2000_response(x264)), arg1).
forall x266: bitstring, x265: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc2(x265, x266), arg1) = auxiliary17(conc2_prime(Zbounded_2000_request(x265), Zbitstring(x266)), arg1).
forall x267: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc1(x267), arg1) = auxiliary17(conc1_prime(Zbounded_2000_request(x267)), arg1).
forall arg1: bitstring, arg0: bitstring;
	auxiliary15(arg0, arg1) = auxiliary15_prime(Zbitstring(arg0), arg1).
forall arg0: bitstring;
	auxiliary12(arg0) = auxiliary12_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary11(arg0) = auxiliary11_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary10(arg0) = auxiliary10_prime(Zbitstring(arg0)).
forall arg0: bounded_100_mkey;
	auxiliary1(arg0) = auxiliary1_prime(Zbounded_100_mkey(arg0)).

(*************************** 
  Zero Facts 
***************************)

forall arg1: bitstring, arg0: bounded_2000_response;
	Zbitstring(conc6(arg0, arg1)) = Zbitstring_prime(conc6(Zbounded_2000_response(arg0), Zbitstring(arg1))).
forall arg1: bounded_2000_response, arg0: bounded_2000_request;
	Zbitstring(conc5(arg0, arg1)) = Zbitstring_prime(conc5(Zbounded_2000_request(arg0), Zbounded_2000_response(arg1))).
forall arg0: bounded_2000_request;
	Zbitstring(conc4(arg0)) = Zbitstring_prime(conc4(Zbounded_2000_request(arg0))).
forall arg1: bounded_2000_response, arg0: bounded_2000_request;
	Zbitstring(conc3(arg0, arg1)) = Zbitstring_prime(conc3(Zbounded_2000_request(arg0), Zbounded_2000_response(arg1))).
forall arg1: bitstring, arg0: bounded_2000_request;
	Zbitstring(conc2(arg0, arg1)) = Zbitstring_prime(conc2(Zbounded_2000_request(arg0), Zbitstring(arg1))).
forall arg0: bounded_2000_request;
	Zbitstring(conc1(arg0)) = Zbitstring_prime(conc1(Zbounded_2000_request(arg0))).

(********************
<Query>
********************)

event client_begin(bounded_2000_request).
event client_accept(bounded_2000_request, bounded_2000_response).
event server_reply(bounded_2000_request, bounded_2000_response).

query x: bounded_2000_request, y:bounded_2000_response;
event client_accept(x, y) ==> server_reply(x, y).

query x: bounded_2000_request, y:bounded_2000_response;
event server_reply(x, y) ==> client_begin(x).

(*
query x: bitstring, y:bitstring;
event client_accept(x, y).
*)


(*************************** 
  Model 
***************************)

let client = 
in(c_in, (var1: bitstring, BIO_ctrl_result1: bitstring));
if auxiliary25(argv1) then 
event client_begin(request);
if auxiliary26(var1) then 
if auxiliary27(BIO_ctrl_result1) then 
if auxiliary28(BIO_ctrl_result1) then 
let msg1 = conc1(request) in
let var27 = arithmetic3 in
let hash1 = HMAC(var27, msg1, keyAB) in
let msg2 = arithmetic4(request) in
let msg3 = conc2(request, hash1) in
out(c_out, (msg3, msg2));
in(c_in, (msg4: bitstring, msg5: bitstring));
if auxiliary29(msg4) then 
if auxiliary30(msg4) then 
if auxiliary31(msg4) then 
if auxiliary32(msg5, msg4) then 
if auxiliary33(msg4) then 
if auxiliary34(msg5, msg4) then 
if auxiliary35(msg5) then 
if auxiliary36(msg5) then 
let conc6(var31, var35) = msg5 in
let msg6 = conc3(request, var31) in
let hash2 = HMAC(var27, msg6, keyAB) in
if auxiliary37(msg4, msg5) then 
if var35 = hash2 then 
event client_accept(request, var31);
yield .

let server = 
in(c_in, (var5: bitstring, BIO_ctrl_result2: bitstring, BIO_ctrl_result3: bitstring, var8: bitstring, var9: bitstring, msg7: bitstring, msg8: bitstring));
if auxiliary4(argv1) then 
if auxiliary5(var5) then 
if auxiliary6(BIO_ctrl_result2) then 
if auxiliary7(BIO_ctrl_result2) then 
if auxiliary8(BIO_ctrl_result3) then 
if auxiliary9(BIO_ctrl_result3) then 
if auxiliary10(var8) then 
if auxiliary11(var9) then 
if auxiliary12(msg7) then 
if auxiliary13(msg7) then 
if auxiliary14(msg7) then 
if auxiliary15(msg8, msg7) then 
if auxiliary16(msg7) then 
if auxiliary17(msg8, msg7) then 
if auxiliary18(msg8) then 
if auxiliary19(msg8) then 
let conc2(var13, var17) = msg8 in
let msg9 = conc4(var13) in
let var15 = arithmetic1 in
let hash3 = HMAC(var15, msg9, keyAB) in
if auxiliary20(msg7, msg8) then 
if var17 = hash3 then 
event server_reply(var13, response);
let msg10 = conc5(var13, response) in
let hash4 = HMAC(var15, msg10, keyAB) in
let msg11 = arithmetic2(response) in
let msg12 = conc6(response, hash4) in
out(c_out, (msg12, msg11)); 0 .

(********************
<Environment>
********************)

let server' =
in(c_in, argv1: bitstring);
out(c_out, ());
server .

let client' =
in(c_in, argv1: bitstring);
out(c_out, ());
client .

process
! N (
in(c_in, (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: bounded_100_mkeyseed;
let keyAB = mkgen(keyseed) in
out(c_out, ());
((! N client') | (! N server'))
)
