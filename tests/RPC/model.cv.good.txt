
channel c_in, c_out.

param N.

type nondet [fixed].

(********************
Misc
********************)

type bounded_2000_request.
type bounded_2000_response.

(********************
MAC
********************)

type bounded_100_mkeyseed [fixed, large].
type bounded_100_mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(bounded_100_mkeyseed, bounded_100_mkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: bounded_100_mkey, r: bitstring;
((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

fun HMAC(bitstring, bitstring, bounded_100_mkey): bitstring.

const arithmetic1: bitstring.

(* ASSERT_DEFINITION
arithmetic1/0
"sha1"
*)

forall m: bitstring, k: bounded_100_mkey;
HMAC(arithmetic1, m, k) = HMAC_sha1(m, k).


(*************************** 
  Formatting Functions 
***************************)

(* conc1 := (7)^[u,8]|"|"|"Request"|arg0 *)
fun conc1(bounded_2000_request): bitstring [compos].

(* conc2 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc2(bounded_2000_request, bitstring): bitstring [compos].

(* conc3 := (8)^[u,8]|"|"|"Response"|(len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc3(bounded_2000_request, bounded_2000_response): bitstring [compos].

(* conc4 := (7)^[u,8]|"|"|"Request"|arg0 *)
fun conc4(bounded_2000_request): bitstring [compos].

(* conc5 := (8)^[u,8]|"|"|"Response"|(len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc5(bounded_2000_request, bounded_2000_response): bitstring [compos].

(* conc6 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc6(bounded_2000_response, bitstring): bitstring [compos].

(* parse1 := arg0{9, (arg0{0, 8})_[u,8]} *)
fun parse1(bitstring): bounded_2000_response.

(* parse2 := arg0{9 + (arg0{0, 8})_[u,8], len(arg0) - (9 + (arg0{0, 8})_[u,8])} *)
fun parse2(bitstring): bitstring.

(* parse3 := arg0{9, (arg0{0, 8})_[u,8]} *)
fun parse3(bitstring): bounded_2000_request.

(* parse4 := arg0{9 + (arg0{0, 8})_[u,8], len(arg0) - (9 + (arg0{0, 8})_[u,8])} *)
fun parse4(bitstring): bitstring.


forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc5(var1, var2) <> conc4(var3).
forall var1: bounded_2000_request, var2: bounded_2000_response;
  conc5(var1, var2) = conc3(var1, var2).
forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc5(var1, var2) <> conc1(var3).
forall var1: bounded_2000_request, var2: bounded_2000_request, var3: bounded_2000_response;
  conc4(var1) <> conc3(var2, var3).
forall var1: bounded_2000_request;
  conc4(var1) = conc1(var1).
forall var1: bounded_2000_request, var2: bounded_2000_response, var3: bounded_2000_request;
  conc3(var1, var2) <> conc1(var3).
forall var1: bitstring;
  parse4(var1) = parse2(var1).

(*************************** 
  Arithmetic Functions 
***************************)

(* arithmetic1 is already defined in the template *)

(* arithmetic2 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic2(bounded_2000_response): bitstring.

(* arithmetic3 := "sha1" *)
const arithmetic3: bitstring.

(* arithmetic4 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic4(bounded_2000_request): bitstring.

forall ;
  arithmetic3() = arithmetic1().

(*************************** 
  Auxiliary Tests 
***************************)

(* auxiliary1 := ¬(len(arg0) > 2147483647) *)
fun auxiliary1(bitstring): bool.

(* auxiliary10 := len(arg0) = 112 *)
fun auxiliary10(bitstring): bool.

(* auxiliary10_prime := len(arg0) = 112 *)
fun auxiliary10_prime(bitstring): bool.

(* auxiliary11 := len(arg0) = 4 *)
fun auxiliary11(bitstring): bool.

(* auxiliary11_prime := len(arg0) = 4 *)
fun auxiliary11_prime(bitstring): bool.

(* auxiliary12 := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary12(bitstring): bool.

(* auxiliary12_prime := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary12_prime(bitstring): bool.

(* auxiliary13 := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary13(bitstring): bool.

(* auxiliary13_prime := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary13_prime(bitstring): bool.

(* auxiliary14 := 0 < (arg0)_[u,8] *)
fun auxiliary14(bitstring): bool.

(* auxiliary14_prime := 0 < (arg0)_[u,8] *)
fun auxiliary14_prime(bitstring): bool.

(* auxiliary15 := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary15(bitstring, bitstring): bool.

(* auxiliary15_prime := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary15_prime(bitstring, bitstring): bool.

(* auxiliary16 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary16(bitstring): bool.

(* auxiliary16_prime := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary16_prime(bitstring): bool.

(* auxiliary17 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary17(bitstring, bitstring): bool.

(* auxiliary17_prime := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary17_prime(bitstring, bitstring): bool.

(* auxiliary18 := arg0{8, 1} = "|" *)
fun auxiliary18(bitstring): bool.

(* auxiliary18_prime := arg0{8, 1} = "|" *)
fun auxiliary18_prime(bitstring): bool.

(* auxiliary19 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary19(bitstring): bool.

(* auxiliary19_prime := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary19_prime(bitstring): bool.

(* auxiliary1_prime := ¬(len(arg0) > 2147483647) *)
fun auxiliary1_prime(bitstring): bool.

(* auxiliary2 := ¬(len(arg0) > 2147483647) *)
fun auxiliary2(bitstring): bool.

(* auxiliary20 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary20(bitstring, bitstring): bool.

(* auxiliary20_prime := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary20_prime(bitstring, bitstring): bool.

(* auxiliary21 := 0 < (arg0{0, 8})_[u,8] *)
fun auxiliary21(bitstring): bool.

(* auxiliary21_prime := 0 < (arg0{0, 8})_[u,8] *)
fun auxiliary21_prime(bitstring): bool.

(* auxiliary22 := 1 < (arg0{0, 8})_[u,8] *)
fun auxiliary22(bitstring): bool.

(* auxiliary22_prime := 1 < (arg0{0, 8})_[u,8] *)
fun auxiliary22_prime(bitstring): bool.

(* auxiliary23 := (1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary23(bitstring): bool.

(* auxiliary23_prime := (1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary23_prime(bitstring): bool.

(* auxiliary24 := (1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary24(bitstring): bool.

(* auxiliary24_prime := (1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary24_prime(bitstring): bool.

(* auxiliary25 := (1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary25(bitstring): bool.

(* auxiliary25_prime := (1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary25_prime(bitstring): bool.

(* auxiliary26 := (1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary26(bitstring): bool.

(* auxiliary26_prime := (1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary26_prime(bitstring): bool.

(* auxiliary27 := (1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary27(bitstring): bool.

(* auxiliary27_prime := (1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary27_prime(bitstring): bool.

(* auxiliary28 := (1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary28(bitstring): bool.

(* auxiliary28_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary28_prime(bitstring): bool.

(* auxiliary29 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary29(bitstring): bool.

(* auxiliary29_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary29_prime(bitstring): bool.

(* auxiliary2_prime := ¬(len(arg0) > 2147483647) *)
fun auxiliary2_prime(bitstring): bool.

(* auxiliary3 := ¬(len(arg0) > 2000) *)
fun auxiliary3(bitstring): bool.

(* auxiliary30 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary30(bitstring): bool.

(* auxiliary30_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary30_prime(bitstring): bool.

(* auxiliary31 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary31(bitstring): bool.

(* auxiliary31_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary31_prime(bitstring): bool.

(* auxiliary32 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary32(bitstring): bool.

(* auxiliary32_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary32_prime(bitstring): bool.

(* auxiliary33 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary33(bitstring): bool.

(* auxiliary33_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary33_prime(bitstring): bool.

(* auxiliary34 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary34(bitstring): bool.

(* auxiliary34_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary34_prime(bitstring): bool.

(* auxiliary35 := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8]) *)
fun auxiliary35(bitstring): bool.

(* auxiliary35_prime := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8]) *)
fun auxiliary35_prime(bitstring): bool.

(* auxiliary36 := ¬(len(arg0) > 2000) *)
fun auxiliary36(bitstring): bool.

(* auxiliary36_prime := ¬(len(arg0) > 2000) *)
fun auxiliary36_prime(bitstring): bool.

(* auxiliary37 := ¬(len(arg0) > 2147483647) *)
fun auxiliary37(bitstring): bool.

(* auxiliary37_prime := ¬(len(arg0) > 2147483647) *)
fun auxiliary37_prime(bitstring): bool.

(* auxiliary38 := ¬(len(arg0) > 2147483647) *)
fun auxiliary38(bitstring): bool.

(* auxiliary38_prime := ¬(len(arg0) > 2147483647) *)
fun auxiliary38_prime(bitstring): bool.

(* auxiliary39 := ¬(len(arg0) > 2000) *)
fun auxiliary39(bitstring): bool.

(* auxiliary39_prime := ¬(len(arg0) > 2000) *)
fun auxiliary39_prime(bitstring): bool.

(* auxiliary3_prime := ¬(len(arg0) > 2000) *)
fun auxiliary3_prime(bitstring): bool.

(* auxiliary4 := ¬(Ztp(arg0{0, 6}) = Ztp("client")) *)
fun auxiliary4(bitstring): bool.

(* auxiliary40 := Ztp(arg0{0, 6}) = Ztp("client") *)
fun auxiliary40(bitstring): bool.

(* auxiliary40_prime := Ztp(arg0{0, 6}) = Ztp("client") *)
fun auxiliary40_prime(bitstring): bool.

(* auxiliary41 := len(arg0) = 112 *)
fun auxiliary41(bitstring): bool.

(* auxiliary41_prime := len(arg0) = 112 *)
fun auxiliary41_prime(bitstring): bool.

(* auxiliary42 := len(arg0) = 8 *)
fun auxiliary42(bitstring): bool.

(* auxiliary42_prime := len(arg0) = 8 *)
fun auxiliary42_prime(bitstring): bool.

(* auxiliary43 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary43(bitstring): bool.

(* auxiliary43_prime := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary43_prime(bitstring): bool.

(* auxiliary44 := 0 < len(arg0) *)
fun auxiliary44(bitstring): bool.

(* auxiliary44_prime := 0 < len(arg0) *)
fun auxiliary44_prime(bitstring): bool.

(* auxiliary45 := 1 < len(arg0) *)
fun auxiliary45(bitstring): bool.

(* auxiliary45_prime := 1 < len(arg0) *)
fun auxiliary45_prime(bitstring): bool.

(* auxiliary46 := (1 + 1) < len(arg0) *)
fun auxiliary46(bitstring): bool.

(* auxiliary46_prime := (1 + 1) < len(arg0) *)
fun auxiliary46_prime(bitstring): bool.

(* auxiliary47 := (1 + 1 + 1) < len(arg0) *)
fun auxiliary47(bitstring): bool.

(* auxiliary47_prime := (1 + 1 + 1) < len(arg0) *)
fun auxiliary47_prime(bitstring): bool.

(* auxiliary48 := (1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary48(bitstring): bool.

(* auxiliary48_prime := (1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary48_prime(bitstring): bool.

(* auxiliary49 := (1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary49(bitstring): bool.

(* auxiliary49_prime := (1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary49_prime(bitstring): bool.

(* auxiliary4_prime := ¬(Ztp(arg0{0, 6}) = Ztp("client")) *)
fun auxiliary4_prime(bitstring): bool.

(* auxiliary5 := len(arg0) = 112 *)
fun auxiliary5(bitstring): bool.

(* auxiliary50 := (1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary50(bitstring): bool.

(* auxiliary50_prime := (1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary50_prime(bitstring): bool.

(* auxiliary51 := (1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary51(bitstring): bool.

(* auxiliary51_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary51_prime(bitstring): bool.

(* auxiliary52 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary52(bitstring): bool.

(* auxiliary52_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary52_prime(bitstring): bool.

(* auxiliary53 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary53(bitstring): bool.

(* auxiliary53_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary53_prime(bitstring): bool.

(* auxiliary54 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary54(bitstring): bool.

(* auxiliary54_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary54_prime(bitstring): bool.

(* auxiliary55 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary55(bitstring): bool.

(* auxiliary55_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary55_prime(bitstring): bool.

(* auxiliary56 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary56(bitstring): bool.

(* auxiliary56_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary56_prime(bitstring): bool.

(* auxiliary57 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary57(bitstring): bool.

(* auxiliary57_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0) *)
fun auxiliary57_prime(bitstring): bool.

(* auxiliary58 := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0)) *)
fun auxiliary58(bitstring): bool.

(* auxiliary58_prime := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < len(arg0)) *)
fun auxiliary58_prime(bitstring): bool.

(* auxiliary59 := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary59(bitstring): bool.

(* auxiliary59_prime := len(arg0) = ((8)^[u,8] - (0)^[u,8])_[u,8] *)
fun auxiliary59_prime(bitstring): bool.

(* auxiliary5_prime := len(arg0) = 112 *)
fun auxiliary5_prime(bitstring): bool.

(* auxiliary6 := len(arg0) = 8 *)
fun auxiliary6(bitstring): bool.

(* auxiliary60 := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary60(bitstring): bool.

(* auxiliary60_prime := ¬((arg0)_[u,8] > 2147483647) *)
fun auxiliary60_prime(bitstring): bool.

(* auxiliary61 := 0 < (arg0)_[u,8] *)
fun auxiliary61(bitstring): bool.

(* auxiliary61_prime := 0 < (arg0)_[u,8] *)
fun auxiliary61_prime(bitstring): bool.

(* auxiliary62 := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary62(bitstring, bitstring): bool.

(* auxiliary62_prime := len(arg0) = (arg1 - (0)^[u,8])_[u,8] *)
fun auxiliary62_prime(bitstring, bitstring): bool.

(* auxiliary63 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary63(bitstring): bool.

(* auxiliary63_prime := ¬((arg0)_[u,8] < (8 + 1)) *)
fun auxiliary63_prime(bitstring): bool.

(* auxiliary64 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary64(bitstring, bitstring): bool.

(* auxiliary64_prime := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun auxiliary64_prime(bitstring, bitstring): bool.

(* auxiliary65 := arg0{8, 1} = "|" *)
fun auxiliary65(bitstring): bool.

(* auxiliary65_prime := arg0{8, 1} = "|" *)
fun auxiliary65_prime(bitstring): bool.

(* auxiliary66 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary66(bitstring): bool.

(* auxiliary66_prime := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun auxiliary66_prime(bitstring): bool.

(* auxiliary67 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary67(bitstring, bitstring): bool.

(* auxiliary67_prime := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun auxiliary67_prime(bitstring, bitstring): bool.

(* auxiliary68 := 0 < (arg0{0, 8})_[u,8] *)
fun auxiliary68(bitstring): bool.

(* auxiliary68_prime := 0 < (arg0{0, 8})_[u,8] *)
fun auxiliary68_prime(bitstring): bool.

(* auxiliary69 := 1 < (arg0{0, 8})_[u,8] *)
fun auxiliary69(bitstring): bool.

(* auxiliary69_prime := 1 < (arg0{0, 8})_[u,8] *)
fun auxiliary69_prime(bitstring): bool.

(* auxiliary6_prime := len(arg0) = 8 *)
fun auxiliary6_prime(bitstring): bool.

(* auxiliary7 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary7(bitstring): bool.

(* auxiliary70 := (1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary70(bitstring): bool.

(* auxiliary70_prime := (1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary70_prime(bitstring): bool.

(* auxiliary71 := (1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary71(bitstring): bool.

(* auxiliary71_prime := (1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary71_prime(bitstring): bool.

(* auxiliary72 := (1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary72(bitstring): bool.

(* auxiliary72_prime := (1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary72_prime(bitstring): bool.

(* auxiliary73 := (1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary73(bitstring): bool.

(* auxiliary73_prime := (1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary73_prime(bitstring): bool.

(* auxiliary74 := (1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary74(bitstring): bool.

(* auxiliary74_prime := (1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary74_prime(bitstring): bool.

(* auxiliary75 := (1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary75(bitstring): bool.

(* auxiliary75_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary75_prime(bitstring): bool.

(* auxiliary76 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary76(bitstring): bool.

(* auxiliary76_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary76_prime(bitstring): bool.

(* auxiliary77 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary77(bitstring): bool.

(* auxiliary77_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary77_prime(bitstring): bool.

(* auxiliary78 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary78(bitstring): bool.

(* auxiliary78_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary78_prime(bitstring): bool.

(* auxiliary79 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary79(bitstring): bool.

(* auxiliary79_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary79_prime(bitstring): bool.

(* auxiliary7_prime := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary7_prime(bitstring): bool.

(* auxiliary8 := len(arg0) = 8 *)
fun auxiliary8(bitstring): bool.

(* auxiliary80 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary80(bitstring): bool.

(* auxiliary80_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary80_prime(bitstring): bool.

(* auxiliary81 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary81(bitstring): bool.

(* auxiliary81_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary81_prime(bitstring): bool.

(* auxiliary82 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary82(bitstring): bool.

(* auxiliary82_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary82_prime(bitstring): bool.

(* auxiliary83 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary83(bitstring): bool.

(* auxiliary83_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary83_prime(bitstring): bool.

(* auxiliary84 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary84(bitstring): bool.

(* auxiliary84_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary84_prime(bitstring): bool.

(* auxiliary85 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary85(bitstring): bool.

(* auxiliary85_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary85_prime(bitstring): bool.

(* auxiliary86 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary86(bitstring): bool.

(* auxiliary86_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary86_prime(bitstring): bool.

(* auxiliary87 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary87(bitstring): bool.

(* auxiliary87_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary87_prime(bitstring): bool.

(* auxiliary88 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary88(bitstring): bool.

(* auxiliary88_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary88_prime(bitstring): bool.

(* auxiliary89 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary89(bitstring): bool.

(* auxiliary89_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary89_prime(bitstring): bool.

(* auxiliary8_prime := len(arg0) = 8 *)
fun auxiliary8_prime(bitstring): bool.

(* auxiliary9 := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary9(bitstring): bool.

(* auxiliary90 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary90(bitstring): bool.

(* auxiliary90_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary90_prime(bitstring): bool.

(* auxiliary91 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary91(bitstring): bool.

(* auxiliary91_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary91_prime(bitstring): bool.

(* auxiliary92 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary92(bitstring): bool.

(* auxiliary92_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary92_prime(bitstring): bool.

(* auxiliary93 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary93(bitstring): bool.

(* auxiliary93_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary93_prime(bitstring): bool.

(* auxiliary94 := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary94(bitstring): bool.

(* auxiliary94_prime := (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8] *)
fun auxiliary94_prime(bitstring): bool.

(* auxiliary95 := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8]) *)
fun auxiliary95(bitstring): bool.

(* auxiliary95_prime := ¬((1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) < (arg0{0, 8})_[u,8]) *)
fun auxiliary95_prime(bitstring): bool.

(* auxiliary9_prime := ¬((arg0)_[s,8] <= 0) *)
fun auxiliary9_prime(bitstring): bool.


(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

fun Zbitstring_prime(bitstring): bitstring.

fun Zbounded_2000_request(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_request_prime(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_response(bounded_2000_response): bounded_2000_response.

fun Zbounded_2000_response_prime(bounded_2000_response): bounded_2000_response.


(*************************** 
  Typecasting 
***************************)

fun cast_bounded_2000_request_bitstring(bounded_2000_request): bitstring [compos].

(*************************** 
  Auxiliary Facts 
***************************)

forall x3: bitstring, x2: bounded_2000_response;
	auxiliary95(conc6(x2, x3)) = auxiliary95_prime(conc6(Zbounded_2000_response(x2), Zbitstring(x3))).
forall x5: bounded_2000_response, x4: bounded_2000_request;
	auxiliary95(conc5(x4, x5)) = auxiliary95_prime(conc5(Zbounded_2000_request(x4), Zbounded_2000_response(x5))).
forall x6: bounded_2000_request;
	auxiliary95(conc4(x6)) = auxiliary95_prime(conc4(Zbounded_2000_request(x6))).
forall x8: bounded_2000_response, x7: bounded_2000_request;
	auxiliary95(conc3(x7, x8)) = auxiliary95_prime(conc3(Zbounded_2000_request(x7), Zbounded_2000_response(x8))).
forall x9: bounded_2000_request, x10: bitstring;
	auxiliary95(conc2(x9, x10)) = auxiliary95_prime(conc2(Zbounded_2000_request(x9), Zbitstring(x10))).
forall x11: bounded_2000_request;
	auxiliary95(conc1(x11)) = auxiliary95_prime(conc1(Zbounded_2000_request(x11))).
forall x14: bitstring, x13: bounded_2000_response;
	auxiliary94(conc6(x13, x14)) = auxiliary94_prime(conc6(Zbounded_2000_response(x13), Zbitstring(x14))).
forall x16: bounded_2000_response, x15: bounded_2000_request;
	auxiliary94(conc5(x15, x16)) = auxiliary94_prime(conc5(Zbounded_2000_request(x15), Zbounded_2000_response(x16))).
forall x17: bounded_2000_request;
	auxiliary94(conc4(x17)) = auxiliary94_prime(conc4(Zbounded_2000_request(x17))).
forall x19: bounded_2000_response, x18: bounded_2000_request;
	auxiliary94(conc3(x18, x19)) = auxiliary94_prime(conc3(Zbounded_2000_request(x18), Zbounded_2000_response(x19))).
forall x21: bitstring, x20: bounded_2000_request;
	auxiliary94(conc2(x20, x21)) = auxiliary94_prime(conc2(Zbounded_2000_request(x20), Zbitstring(x21))).
forall x22: bounded_2000_request;
	auxiliary94(conc1(x22)) = auxiliary94_prime(conc1(Zbounded_2000_request(x22))).
forall x25: bitstring, x24: bounded_2000_response;
	auxiliary93(conc6(x24, x25)) = auxiliary93_prime(conc6(Zbounded_2000_response(x24), Zbitstring(x25))).
forall x27: bounded_2000_response, x26: bounded_2000_request;
	auxiliary93(conc5(x26, x27)) = auxiliary93_prime(conc5(Zbounded_2000_request(x26), Zbounded_2000_response(x27))).
forall x28: bounded_2000_request;
	auxiliary93(conc4(x28)) = auxiliary93_prime(conc4(Zbounded_2000_request(x28))).
forall x30: bounded_2000_response, x29: bounded_2000_request;
	auxiliary93(conc3(x29, x30)) = auxiliary93_prime(conc3(Zbounded_2000_request(x29), Zbounded_2000_response(x30))).
forall x32: bitstring, x31: bounded_2000_request;
	auxiliary93(conc2(x31, x32)) = auxiliary93_prime(conc2(Zbounded_2000_request(x31), Zbitstring(x32))).
forall x33: bounded_2000_request;
	auxiliary93(conc1(x33)) = auxiliary93_prime(conc1(Zbounded_2000_request(x33))).
forall x36: bitstring, x35: bounded_2000_response;
	auxiliary92(conc6(x35, x36)) = auxiliary92_prime(conc6(Zbounded_2000_response(x35), Zbitstring(x36))).
forall x38: bounded_2000_response, x37: bounded_2000_request;
	auxiliary92(conc5(x37, x38)) = auxiliary92_prime(conc5(Zbounded_2000_request(x37), Zbounded_2000_response(x38))).
forall x39: bounded_2000_request;
	auxiliary92(conc4(x39)) = auxiliary92_prime(conc4(Zbounded_2000_request(x39))).
forall x41: bounded_2000_response, x40: bounded_2000_request;
	auxiliary92(conc3(x40, x41)) = auxiliary92_prime(conc3(Zbounded_2000_request(x40), Zbounded_2000_response(x41))).
forall x43: bitstring, x42: bounded_2000_request;
	auxiliary92(conc2(x42, x43)) = auxiliary92_prime(conc2(Zbounded_2000_request(x42), Zbitstring(x43))).
forall x44: bounded_2000_request;
	auxiliary92(conc1(x44)) = auxiliary92_prime(conc1(Zbounded_2000_request(x44))).
forall x47: bitstring, x46: bounded_2000_response;
	auxiliary91(conc6(x46, x47)) = auxiliary91_prime(conc6(Zbounded_2000_response(x46), Zbitstring(x47))).
forall x49: bounded_2000_response, x48: bounded_2000_request;
	auxiliary91(conc5(x48, x49)) = auxiliary91_prime(conc5(Zbounded_2000_request(x48), Zbounded_2000_response(x49))).
forall x50: bounded_2000_request;
	auxiliary91(conc4(x50)) = auxiliary91_prime(conc4(Zbounded_2000_request(x50))).
forall x52: bounded_2000_response, x51: bounded_2000_request;
	auxiliary91(conc3(x51, x52)) = auxiliary91_prime(conc3(Zbounded_2000_request(x51), Zbounded_2000_response(x52))).
forall x54: bitstring, x53: bounded_2000_request;
	auxiliary91(conc2(x53, x54)) = auxiliary91_prime(conc2(Zbounded_2000_request(x53), Zbitstring(x54))).
forall x55: bounded_2000_request;
	auxiliary91(conc1(x55)) = auxiliary91_prime(conc1(Zbounded_2000_request(x55))).
forall x58: bitstring, x57: bounded_2000_response;
	auxiliary90(conc6(x57, x58)) = auxiliary90_prime(conc6(Zbounded_2000_response(x57), Zbitstring(x58))).
forall x60: bounded_2000_response, x59: bounded_2000_request;
	auxiliary90(conc5(x59, x60)) = auxiliary90_prime(conc5(Zbounded_2000_request(x59), Zbounded_2000_response(x60))).
forall x61: bounded_2000_request;
	auxiliary90(conc4(x61)) = auxiliary90_prime(conc4(Zbounded_2000_request(x61))).
forall x63: bounded_2000_response, x62: bounded_2000_request;
	auxiliary90(conc3(x62, x63)) = auxiliary90_prime(conc3(Zbounded_2000_request(x62), Zbounded_2000_response(x63))).
forall x65: bitstring, x64: bounded_2000_request;
	auxiliary90(conc2(x64, x65)) = auxiliary90_prime(conc2(Zbounded_2000_request(x64), Zbitstring(x65))).
forall x66: bounded_2000_request;
	auxiliary90(conc1(x66)) = auxiliary90_prime(conc1(Zbounded_2000_request(x66))).
forall x80: bitstring, x79: bounded_2000_response;
	auxiliary89(conc6(x79, x80)) = auxiliary89_prime(conc6(Zbounded_2000_response(x79), Zbitstring(x80))).
forall x82: bounded_2000_response, x81: bounded_2000_request;
	auxiliary89(conc5(x81, x82)) = auxiliary89_prime(conc5(Zbounded_2000_request(x81), Zbounded_2000_response(x82))).
forall x83: bounded_2000_request;
	auxiliary89(conc4(x83)) = auxiliary89_prime(conc4(Zbounded_2000_request(x83))).
forall x85: bounded_2000_response, x84: bounded_2000_request;
	auxiliary89(conc3(x84, x85)) = auxiliary89_prime(conc3(Zbounded_2000_request(x84), Zbounded_2000_response(x85))).
forall x87: bitstring, x86: bounded_2000_request;
	auxiliary89(conc2(x86, x87)) = auxiliary89_prime(conc2(Zbounded_2000_request(x86), Zbitstring(x87))).
forall x88: bounded_2000_request;
	auxiliary89(conc1(x88)) = auxiliary89_prime(conc1(Zbounded_2000_request(x88))).
forall x91: bitstring, x90: bounded_2000_response;
	auxiliary88(conc6(x90, x91)) = auxiliary88_prime(conc6(Zbounded_2000_response(x90), Zbitstring(x91))).
forall x93: bounded_2000_response, x92: bounded_2000_request;
	auxiliary88(conc5(x92, x93)) = auxiliary88_prime(conc5(Zbounded_2000_request(x92), Zbounded_2000_response(x93))).
forall x94: bounded_2000_request;
	auxiliary88(conc4(x94)) = auxiliary88_prime(conc4(Zbounded_2000_request(x94))).
forall x96: bounded_2000_response, x95: bounded_2000_request;
	auxiliary88(conc3(x95, x96)) = auxiliary88_prime(conc3(Zbounded_2000_request(x95), Zbounded_2000_response(x96))).
forall x98: bitstring, x97: bounded_2000_request;
	auxiliary88(conc2(x97, x98)) = auxiliary88_prime(conc2(Zbounded_2000_request(x97), Zbitstring(x98))).
forall x99: bounded_2000_request;
	auxiliary88(conc1(x99)) = auxiliary88_prime(conc1(Zbounded_2000_request(x99))).
forall x102: bitstring, x101: bounded_2000_response;
	auxiliary87(conc6(x101, x102)) = auxiliary87_prime(conc6(Zbounded_2000_response(x101), Zbitstring(x102))).
forall x104: bounded_2000_response, x103: bounded_2000_request;
	auxiliary87(conc5(x103, x104)) = auxiliary87_prime(conc5(Zbounded_2000_request(x103), Zbounded_2000_response(x104))).
forall x105: bounded_2000_request;
	auxiliary87(conc4(x105)) = auxiliary87_prime(conc4(Zbounded_2000_request(x105))).
forall x107: bounded_2000_response, x106: bounded_2000_request;
	auxiliary87(conc3(x106, x107)) = auxiliary87_prime(conc3(Zbounded_2000_request(x106), Zbounded_2000_response(x107))).
forall x109: bitstring, x108: bounded_2000_request;
	auxiliary87(conc2(x108, x109)) = auxiliary87_prime(conc2(Zbounded_2000_request(x108), Zbitstring(x109))).
forall x110: bounded_2000_request;
	auxiliary87(conc1(x110)) = auxiliary87_prime(conc1(Zbounded_2000_request(x110))).
forall x113: bitstring, x112: bounded_2000_response;
	auxiliary86(conc6(x112, x113)) = auxiliary86_prime(conc6(Zbounded_2000_response(x112), Zbitstring(x113))).
forall x115: bounded_2000_response, x114: bounded_2000_request;
	auxiliary86(conc5(x114, x115)) = auxiliary86_prime(conc5(Zbounded_2000_request(x114), Zbounded_2000_response(x115))).
forall x116: bounded_2000_request;
	auxiliary86(conc4(x116)) = auxiliary86_prime(conc4(Zbounded_2000_request(x116))).
forall x118: bounded_2000_response, x117: bounded_2000_request;
	auxiliary86(conc3(x117, x118)) = auxiliary86_prime(conc3(Zbounded_2000_request(x117), Zbounded_2000_response(x118))).
forall x120: bitstring, x119: bounded_2000_request;
	auxiliary86(conc2(x119, x120)) = auxiliary86_prime(conc2(Zbounded_2000_request(x119), Zbitstring(x120))).
forall x121: bounded_2000_request;
	auxiliary86(conc1(x121)) = auxiliary86_prime(conc1(Zbounded_2000_request(x121))).
forall x124: bitstring, x123: bounded_2000_response;
	auxiliary85(conc6(x123, x124)) = auxiliary85_prime(conc6(Zbounded_2000_response(x123), Zbitstring(x124))).
forall x126: bounded_2000_response, x125: bounded_2000_request;
	auxiliary85(conc5(x125, x126)) = auxiliary85_prime(conc5(Zbounded_2000_request(x125), Zbounded_2000_response(x126))).
forall x127: bounded_2000_request;
	auxiliary85(conc4(x127)) = auxiliary85_prime(conc4(Zbounded_2000_request(x127))).
forall x129: bounded_2000_response, x128: bounded_2000_request;
	auxiliary85(conc3(x128, x129)) = auxiliary85_prime(conc3(Zbounded_2000_request(x128), Zbounded_2000_response(x129))).
forall x131: bitstring, x130: bounded_2000_request;
	auxiliary85(conc2(x130, x131)) = auxiliary85_prime(conc2(Zbounded_2000_request(x130), Zbitstring(x131))).
forall x132: bounded_2000_request;
	auxiliary85(conc1(x132)) = auxiliary85_prime(conc1(Zbounded_2000_request(x132))).
forall x135: bitstring, x134: bounded_2000_response;
	auxiliary84(conc6(x134, x135)) = auxiliary84_prime(conc6(Zbounded_2000_response(x134), Zbitstring(x135))).
forall x137: bounded_2000_response, x136: bounded_2000_request;
	auxiliary84(conc5(x136, x137)) = auxiliary84_prime(conc5(Zbounded_2000_request(x136), Zbounded_2000_response(x137))).
forall x138: bounded_2000_request;
	auxiliary84(conc4(x138)) = auxiliary84_prime(conc4(Zbounded_2000_request(x138))).
forall x140: bounded_2000_response, x139: bounded_2000_request;
	auxiliary84(conc3(x139, x140)) = auxiliary84_prime(conc3(Zbounded_2000_request(x139), Zbounded_2000_response(x140))).
forall x142: bitstring, x141: bounded_2000_request;
	auxiliary84(conc2(x141, x142)) = auxiliary84_prime(conc2(Zbounded_2000_request(x141), Zbitstring(x142))).
forall x143: bounded_2000_request;
	auxiliary84(conc1(x143)) = auxiliary84_prime(conc1(Zbounded_2000_request(x143))).
forall x146: bitstring, x145: bounded_2000_response;
	auxiliary83(conc6(x145, x146)) = auxiliary83_prime(conc6(Zbounded_2000_response(x145), Zbitstring(x146))).
forall x148: bounded_2000_response, x147: bounded_2000_request;
	auxiliary83(conc5(x147, x148)) = auxiliary83_prime(conc5(Zbounded_2000_request(x147), Zbounded_2000_response(x148))).
forall x149: bounded_2000_request;
	auxiliary83(conc4(x149)) = auxiliary83_prime(conc4(Zbounded_2000_request(x149))).
forall x151: bounded_2000_response, x150: bounded_2000_request;
	auxiliary83(conc3(x150, x151)) = auxiliary83_prime(conc3(Zbounded_2000_request(x150), Zbounded_2000_response(x151))).
forall x153: bitstring, x152: bounded_2000_request;
	auxiliary83(conc2(x152, x153)) = auxiliary83_prime(conc2(Zbounded_2000_request(x152), Zbitstring(x153))).
forall x154: bounded_2000_request;
	auxiliary83(conc1(x154)) = auxiliary83_prime(conc1(Zbounded_2000_request(x154))).
forall x157: bitstring, x156: bounded_2000_response;
	auxiliary82(conc6(x156, x157)) = auxiliary82_prime(conc6(Zbounded_2000_response(x156), Zbitstring(x157))).
forall x159: bounded_2000_response, x158: bounded_2000_request;
	auxiliary82(conc5(x158, x159)) = auxiliary82_prime(conc5(Zbounded_2000_request(x158), Zbounded_2000_response(x159))).
forall x160: bounded_2000_request;
	auxiliary82(conc4(x160)) = auxiliary82_prime(conc4(Zbounded_2000_request(x160))).
forall x162: bounded_2000_response, x161: bounded_2000_request;
	auxiliary82(conc3(x161, x162)) = auxiliary82_prime(conc3(Zbounded_2000_request(x161), Zbounded_2000_response(x162))).
forall x164: bitstring, x163: bounded_2000_request;
	auxiliary82(conc2(x163, x164)) = auxiliary82_prime(conc2(Zbounded_2000_request(x163), Zbitstring(x164))).
forall x165: bounded_2000_request;
	auxiliary82(conc1(x165)) = auxiliary82_prime(conc1(Zbounded_2000_request(x165))).
forall x168: bitstring, x167: bounded_2000_response;
	auxiliary81(conc6(x167, x168)) = auxiliary81_prime(conc6(Zbounded_2000_response(x167), Zbitstring(x168))).
forall x170: bounded_2000_response, x169: bounded_2000_request;
	auxiliary81(conc5(x169, x170)) = auxiliary81_prime(conc5(Zbounded_2000_request(x169), Zbounded_2000_response(x170))).
forall x171: bounded_2000_request;
	auxiliary81(conc4(x171)) = auxiliary81_prime(conc4(Zbounded_2000_request(x171))).
forall x173: bounded_2000_response, x172: bounded_2000_request;
	auxiliary81(conc3(x172, x173)) = auxiliary81_prime(conc3(Zbounded_2000_request(x172), Zbounded_2000_response(x173))).
forall x175: bitstring, x174: bounded_2000_request;
	auxiliary81(conc2(x174, x175)) = auxiliary81_prime(conc2(Zbounded_2000_request(x174), Zbitstring(x175))).
forall x176: bounded_2000_request;
	auxiliary81(conc1(x176)) = auxiliary81_prime(conc1(Zbounded_2000_request(x176))).
forall x179: bitstring, x178: bounded_2000_response;
	auxiliary80(conc6(x178, x179)) = auxiliary80_prime(conc6(Zbounded_2000_response(x178), Zbitstring(x179))).
forall x181: bounded_2000_response, x180: bounded_2000_request;
	auxiliary80(conc5(x180, x181)) = auxiliary80_prime(conc5(Zbounded_2000_request(x180), Zbounded_2000_response(x181))).
forall x182: bounded_2000_request;
	auxiliary80(conc4(x182)) = auxiliary80_prime(conc4(Zbounded_2000_request(x182))).
forall x184: bounded_2000_response, x183: bounded_2000_request;
	auxiliary80(conc3(x183, x184)) = auxiliary80_prime(conc3(Zbounded_2000_request(x183), Zbounded_2000_response(x184))).
forall x186: bitstring, x185: bounded_2000_request;
	auxiliary80(conc2(x185, x186)) = auxiliary80_prime(conc2(Zbounded_2000_request(x185), Zbitstring(x186))).
forall x187: bounded_2000_request;
	auxiliary80(conc1(x187)) = auxiliary80_prime(conc1(Zbounded_2000_request(x187))).
forall arg0: bitstring;
	auxiliary8(arg0) = auxiliary8_prime(Zbitstring(arg0)).
forall x191: bitstring, x190: bounded_2000_response;
	auxiliary79(conc6(x190, x191)) = auxiliary79_prime(conc6(Zbounded_2000_response(x190), Zbitstring(x191))).
forall x193: bounded_2000_response, x192: bounded_2000_request;
	auxiliary79(conc5(x192, x193)) = auxiliary79_prime(conc5(Zbounded_2000_request(x192), Zbounded_2000_response(x193))).
forall x194: bounded_2000_request;
	auxiliary79(conc4(x194)) = auxiliary79_prime(conc4(Zbounded_2000_request(x194))).
forall x196: bounded_2000_response, x195: bounded_2000_request;
	auxiliary79(conc3(x195, x196)) = auxiliary79_prime(conc3(Zbounded_2000_request(x195), Zbounded_2000_response(x196))).
forall x198: bitstring, x197: bounded_2000_request;
	auxiliary79(conc2(x197, x198)) = auxiliary79_prime(conc2(Zbounded_2000_request(x197), Zbitstring(x198))).
forall x199: bounded_2000_request;
	auxiliary79(conc1(x199)) = auxiliary79_prime(conc1(Zbounded_2000_request(x199))).
forall x202: bitstring, x201: bounded_2000_response;
	auxiliary78(conc6(x201, x202)) = auxiliary78_prime(conc6(Zbounded_2000_response(x201), Zbitstring(x202))).
forall x204: bounded_2000_response, x203: bounded_2000_request;
	auxiliary78(conc5(x203, x204)) = auxiliary78_prime(conc5(Zbounded_2000_request(x203), Zbounded_2000_response(x204))).
forall x205: bounded_2000_request;
	auxiliary78(conc4(x205)) = auxiliary78_prime(conc4(Zbounded_2000_request(x205))).
forall x207: bounded_2000_response, x206: bounded_2000_request;
	auxiliary78(conc3(x206, x207)) = auxiliary78_prime(conc3(Zbounded_2000_request(x206), Zbounded_2000_response(x207))).
forall x209: bitstring, x208: bounded_2000_request;
	auxiliary78(conc2(x208, x209)) = auxiliary78_prime(conc2(Zbounded_2000_request(x208), Zbitstring(x209))).
forall x210: bounded_2000_request;
	auxiliary78(conc1(x210)) = auxiliary78_prime(conc1(Zbounded_2000_request(x210))).
forall x213: bitstring, x212: bounded_2000_response;
	auxiliary77(conc6(x212, x213)) = auxiliary77_prime(conc6(Zbounded_2000_response(x212), Zbitstring(x213))).
forall x215: bounded_2000_response, x214: bounded_2000_request;
	auxiliary77(conc5(x214, x215)) = auxiliary77_prime(conc5(Zbounded_2000_request(x214), Zbounded_2000_response(x215))).
forall x216: bounded_2000_request;
	auxiliary77(conc4(x216)) = auxiliary77_prime(conc4(Zbounded_2000_request(x216))).
forall x218: bounded_2000_response, x217: bounded_2000_request;
	auxiliary77(conc3(x217, x218)) = auxiliary77_prime(conc3(Zbounded_2000_request(x217), Zbounded_2000_response(x218))).
forall x220: bitstring, x219: bounded_2000_request;
	auxiliary77(conc2(x219, x220)) = auxiliary77_prime(conc2(Zbounded_2000_request(x219), Zbitstring(x220))).
forall x221: bounded_2000_request;
	auxiliary77(conc1(x221)) = auxiliary77_prime(conc1(Zbounded_2000_request(x221))).
forall x224: bitstring, x223: bounded_2000_response;
	auxiliary76(conc6(x223, x224)) = auxiliary76_prime(conc6(Zbounded_2000_response(x223), Zbitstring(x224))).
forall x226: bounded_2000_response, x225: bounded_2000_request;
	auxiliary76(conc5(x225, x226)) = auxiliary76_prime(conc5(Zbounded_2000_request(x225), Zbounded_2000_response(x226))).
forall x227: bounded_2000_request;
	auxiliary76(conc4(x227)) = auxiliary76_prime(conc4(Zbounded_2000_request(x227))).
forall x229: bounded_2000_response, x228: bounded_2000_request;
	auxiliary76(conc3(x228, x229)) = auxiliary76_prime(conc3(Zbounded_2000_request(x228), Zbounded_2000_response(x229))).
forall x231: bitstring, x230: bounded_2000_request;
	auxiliary76(conc2(x230, x231)) = auxiliary76_prime(conc2(Zbounded_2000_request(x230), Zbitstring(x231))).
forall x232: bounded_2000_request;
	auxiliary76(conc1(x232)) = auxiliary76_prime(conc1(Zbounded_2000_request(x232))).
forall x235: bitstring, x234: bounded_2000_response;
	auxiliary75(conc6(x234, x235)) = auxiliary75_prime(conc6(Zbounded_2000_response(x234), Zbitstring(x235))).
forall x237: bounded_2000_response, x236: bounded_2000_request;
	auxiliary75(conc5(x236, x237)) = auxiliary75_prime(conc5(Zbounded_2000_request(x236), Zbounded_2000_response(x237))).
forall x238: bounded_2000_request;
	auxiliary75(conc4(x238)) = auxiliary75_prime(conc4(Zbounded_2000_request(x238))).
forall x240: bounded_2000_response, x239: bounded_2000_request;
	auxiliary75(conc3(x239, x240)) = auxiliary75_prime(conc3(Zbounded_2000_request(x239), Zbounded_2000_response(x240))).
forall x242: bitstring, x241: bounded_2000_request;
	auxiliary75(conc2(x241, x242)) = auxiliary75_prime(conc2(Zbounded_2000_request(x241), Zbitstring(x242))).
forall x243: bounded_2000_request;
	auxiliary75(conc1(x243)) = auxiliary75_prime(conc1(Zbounded_2000_request(x243))).
forall x246: bitstring, x245: bounded_2000_response;
	auxiliary74(conc6(x245, x246)) = auxiliary74_prime(conc6(Zbounded_2000_response(x245), Zbitstring(x246))).
forall x248: bounded_2000_response, x247: bounded_2000_request;
	auxiliary74(conc5(x247, x248)) = auxiliary74_prime(conc5(Zbounded_2000_request(x247), Zbounded_2000_response(x248))).
forall x249: bounded_2000_request;
	auxiliary74(conc4(x249)) = auxiliary74_prime(conc4(Zbounded_2000_request(x249))).
forall x251: bounded_2000_response, x250: bounded_2000_request;
	auxiliary74(conc3(x250, x251)) = auxiliary74_prime(conc3(Zbounded_2000_request(x250), Zbounded_2000_response(x251))).
forall x253: bitstring, x252: bounded_2000_request;
	auxiliary74(conc2(x252, x253)) = auxiliary74_prime(conc2(Zbounded_2000_request(x252), Zbitstring(x253))).
forall x254: bounded_2000_request;
	auxiliary74(conc1(x254)) = auxiliary74_prime(conc1(Zbounded_2000_request(x254))).
forall x257: bitstring, x256: bounded_2000_response;
	auxiliary73(conc6(x256, x257)) = auxiliary73_prime(conc6(Zbounded_2000_response(x256), Zbitstring(x257))).
forall x259: bounded_2000_response, x258: bounded_2000_request;
	auxiliary73(conc5(x258, x259)) = auxiliary73_prime(conc5(Zbounded_2000_request(x258), Zbounded_2000_response(x259))).
forall x260: bounded_2000_request;
	auxiliary73(conc4(x260)) = auxiliary73_prime(conc4(Zbounded_2000_request(x260))).
forall x262: bounded_2000_response, x261: bounded_2000_request;
	auxiliary73(conc3(x261, x262)) = auxiliary73_prime(conc3(Zbounded_2000_request(x261), Zbounded_2000_response(x262))).
forall x264: bitstring, x263: bounded_2000_request;
	auxiliary73(conc2(x263, x264)) = auxiliary73_prime(conc2(Zbounded_2000_request(x263), Zbitstring(x264))).
forall x265: bounded_2000_request;
	auxiliary73(conc1(x265)) = auxiliary73_prime(conc1(Zbounded_2000_request(x265))).
forall x268: bitstring, x267: bounded_2000_response;
	auxiliary72(conc6(x267, x268)) = auxiliary72_prime(conc6(Zbounded_2000_response(x267), Zbitstring(x268))).
forall x270: bounded_2000_response, x269: bounded_2000_request;
	auxiliary72(conc5(x269, x270)) = auxiliary72_prime(conc5(Zbounded_2000_request(x269), Zbounded_2000_response(x270))).
forall x271: bounded_2000_request;
	auxiliary72(conc4(x271)) = auxiliary72_prime(conc4(Zbounded_2000_request(x271))).
forall x273: bounded_2000_response, x272: bounded_2000_request;
	auxiliary72(conc3(x272, x273)) = auxiliary72_prime(conc3(Zbounded_2000_request(x272), Zbounded_2000_response(x273))).
forall x275: bitstring, x274: bounded_2000_request;
	auxiliary72(conc2(x274, x275)) = auxiliary72_prime(conc2(Zbounded_2000_request(x274), Zbitstring(x275))).
forall x276: bounded_2000_request;
	auxiliary72(conc1(x276)) = auxiliary72_prime(conc1(Zbounded_2000_request(x276))).
forall x279: bitstring, x278: bounded_2000_response;
	auxiliary71(conc6(x278, x279)) = auxiliary71_prime(conc6(Zbounded_2000_response(x278), Zbitstring(x279))).
forall x281: bounded_2000_response, x280: bounded_2000_request;
	auxiliary71(conc5(x280, x281)) = auxiliary71_prime(conc5(Zbounded_2000_request(x280), Zbounded_2000_response(x281))).
forall x282: bounded_2000_request;
	auxiliary71(conc4(x282)) = auxiliary71_prime(conc4(Zbounded_2000_request(x282))).
forall x284: bounded_2000_response, x283: bounded_2000_request;
	auxiliary71(conc3(x283, x284)) = auxiliary71_prime(conc3(Zbounded_2000_request(x283), Zbounded_2000_response(x284))).
forall x286: bitstring, x285: bounded_2000_request;
	auxiliary71(conc2(x285, x286)) = auxiliary71_prime(conc2(Zbounded_2000_request(x285), Zbitstring(x286))).
forall x287: bounded_2000_request;
	auxiliary71(conc1(x287)) = auxiliary71_prime(conc1(Zbounded_2000_request(x287))).
forall x290: bitstring, x289: bounded_2000_response;
	auxiliary70(conc6(x289, x290)) = auxiliary70_prime(conc6(Zbounded_2000_response(x289), Zbitstring(x290))).
forall x292: bounded_2000_response, x291: bounded_2000_request;
	auxiliary70(conc5(x291, x292)) = auxiliary70_prime(conc5(Zbounded_2000_request(x291), Zbounded_2000_response(x292))).
forall x293: bounded_2000_request;
	auxiliary70(conc4(x293)) = auxiliary70_prime(conc4(Zbounded_2000_request(x293))).
forall x295: bounded_2000_response, x294: bounded_2000_request;
	auxiliary70(conc3(x294, x295)) = auxiliary70_prime(conc3(Zbounded_2000_request(x294), Zbounded_2000_response(x295))).
forall x297: bitstring, x296: bounded_2000_request;
	auxiliary70(conc2(x296, x297)) = auxiliary70_prime(conc2(Zbounded_2000_request(x296), Zbitstring(x297))).
forall x298: bounded_2000_request;
	auxiliary70(conc1(x298)) = auxiliary70_prime(conc1(Zbounded_2000_request(x298))).
forall x312: bitstring, x311: bounded_2000_response;
	auxiliary69(conc6(x311, x312)) = auxiliary69_prime(conc6(Zbounded_2000_response(x311), Zbitstring(x312))).
forall x314: bounded_2000_response, x313: bounded_2000_request;
	auxiliary69(conc5(x313, x314)) = auxiliary69_prime(conc5(Zbounded_2000_request(x313), Zbounded_2000_response(x314))).
forall x315: bounded_2000_request;
	auxiliary69(conc4(x315)) = auxiliary69_prime(conc4(Zbounded_2000_request(x315))).
forall x317: bounded_2000_response, x316: bounded_2000_request;
	auxiliary69(conc3(x316, x317)) = auxiliary69_prime(conc3(Zbounded_2000_request(x316), Zbounded_2000_response(x317))).
forall x319: bitstring, x318: bounded_2000_request;
	auxiliary69(conc2(x318, x319)) = auxiliary69_prime(conc2(Zbounded_2000_request(x318), Zbitstring(x319))).
forall x320: bounded_2000_request;
	auxiliary69(conc1(x320)) = auxiliary69_prime(conc1(Zbounded_2000_request(x320))).
forall x323: bitstring, x322: bounded_2000_response;
	auxiliary68(conc6(x322, x323)) = auxiliary68_prime(conc6(Zbounded_2000_response(x322), Zbitstring(x323))).
forall x325: bounded_2000_response, x324: bounded_2000_request;
	auxiliary68(conc5(x324, x325)) = auxiliary68_prime(conc5(Zbounded_2000_request(x324), Zbounded_2000_response(x325))).
forall x326: bounded_2000_request;
	auxiliary68(conc4(x326)) = auxiliary68_prime(conc4(Zbounded_2000_request(x326))).
forall x328: bounded_2000_response, x327: bounded_2000_request;
	auxiliary68(conc3(x327, x328)) = auxiliary68_prime(conc3(Zbounded_2000_request(x327), Zbounded_2000_response(x328))).
forall x330: bitstring, x329: bounded_2000_request;
	auxiliary68(conc2(x329, x330)) = auxiliary68_prime(conc2(Zbounded_2000_request(x329), Zbitstring(x330))).
forall x331: bounded_2000_request;
	auxiliary68(conc1(x331)) = auxiliary68_prime(conc1(Zbounded_2000_request(x331))).
forall x345: bitstring, x344: bounded_2000_response, arg0: bitstring;
	auxiliary67(arg0, conc6(x344, x345)) = auxiliary67_prime(arg0, conc6(Zbounded_2000_response(x344), Zbitstring(x345))).
forall x347: bounded_2000_response, x346: bounded_2000_request, arg0: bitstring;
	auxiliary67(arg0, conc5(x346, x347)) = auxiliary67_prime(arg0, conc5(Zbounded_2000_request(x346), Zbounded_2000_response(x347))).
forall x348: bounded_2000_request, arg0: bitstring;
	auxiliary67(arg0, conc4(x348)) = auxiliary67_prime(arg0, conc4(Zbounded_2000_request(x348))).
forall x350: bounded_2000_response, x349: bounded_2000_request, arg0: bitstring;
	auxiliary67(arg0, conc3(x349, x350)) = auxiliary67_prime(arg0, conc3(Zbounded_2000_request(x349), Zbounded_2000_response(x350))).
forall x352: bitstring, x351: bounded_2000_request, arg0: bitstring;
	auxiliary67(arg0, conc2(x351, x352)) = auxiliary67_prime(arg0, conc2(Zbounded_2000_request(x351), Zbitstring(x352))).
forall x353: bounded_2000_request, arg0: bitstring;
	auxiliary67(arg0, conc1(x353)) = auxiliary67_prime(arg0, conc1(Zbounded_2000_request(x353))).
forall x356: bitstring, x355: bounded_2000_response;
	auxiliary66(conc6(x355, x356)) = auxiliary66_prime(conc6(Zbounded_2000_response(x355), Zbitstring(x356))).
forall x358: bounded_2000_response, x357: bounded_2000_request;
	auxiliary66(conc5(x357, x358)) = auxiliary66_prime(conc5(Zbounded_2000_request(x357), Zbounded_2000_response(x358))).
forall x359: bounded_2000_request;
	auxiliary66(conc4(x359)) = auxiliary66_prime(conc4(Zbounded_2000_request(x359))).
forall x361: bounded_2000_response, x360: bounded_2000_request;
	auxiliary66(conc3(x360, x361)) = auxiliary66_prime(conc3(Zbounded_2000_request(x360), Zbounded_2000_response(x361))).
forall x363: bitstring, x362: bounded_2000_request;
	auxiliary66(conc2(x362, x363)) = auxiliary66_prime(conc2(Zbounded_2000_request(x362), Zbitstring(x363))).
forall x364: bounded_2000_request;
	auxiliary66(conc1(x364)) = auxiliary66_prime(conc1(Zbounded_2000_request(x364))).
forall x367: bitstring, x366: bounded_2000_response;
	auxiliary65(conc6(x366, x367)) = auxiliary65_prime(conc6(Zbounded_2000_response(x366), Zbitstring(x367))).
forall x369: bounded_2000_response, x368: bounded_2000_request;
	auxiliary65(conc5(x368, x369)) = auxiliary65_prime(conc5(Zbounded_2000_request(x368), Zbounded_2000_response(x369))).
forall x370: bounded_2000_request;
	auxiliary65(conc4(x370)) = auxiliary65_prime(conc4(Zbounded_2000_request(x370))).
forall x372: bounded_2000_response, x371: bounded_2000_request;
	auxiliary65(conc3(x371, x372)) = auxiliary65_prime(conc3(Zbounded_2000_request(x371), Zbounded_2000_response(x372))).
forall x374: bitstring, x373: bounded_2000_request;
	auxiliary65(conc2(x373, x374)) = auxiliary65_prime(conc2(Zbounded_2000_request(x373), Zbitstring(x374))).
forall x375: bounded_2000_request;
	auxiliary65(conc1(x375)) = auxiliary65_prime(conc1(Zbounded_2000_request(x375))).
forall x378: bitstring, x377: bounded_2000_response, arg1: bitstring;
	auxiliary64(conc6(x377, x378), arg1) = auxiliary64_prime(conc6(Zbounded_2000_response(x377), Zbitstring(x378)), arg1).
forall x380: bounded_2000_response, x379: bounded_2000_request, arg1: bitstring;
	auxiliary64(conc5(x379, x380), arg1) = auxiliary64_prime(conc5(Zbounded_2000_request(x379), Zbounded_2000_response(x380)), arg1).
forall x381: bounded_2000_request, arg1: bitstring;
	auxiliary64(conc4(x381), arg1) = auxiliary64_prime(conc4(Zbounded_2000_request(x381)), arg1).
forall x383: bounded_2000_response, x382: bounded_2000_request, arg1: bitstring;
	auxiliary64(conc3(x382, x383), arg1) = auxiliary64_prime(conc3(Zbounded_2000_request(x382), Zbounded_2000_response(x383)), arg1).
forall x385: bitstring, x384: bounded_2000_request, arg1: bitstring;
	auxiliary64(conc2(x384, x385), arg1) = auxiliary64_prime(conc2(Zbounded_2000_request(x384), Zbitstring(x385)), arg1).
forall x386: bounded_2000_request, arg1: bitstring;
	auxiliary64(conc1(x386), arg1) = auxiliary64_prime(conc1(Zbounded_2000_request(x386)), arg1).
forall arg1: bitstring, arg0: bitstring;
	auxiliary62(arg0, arg1) = auxiliary62_prime(Zbitstring(arg0), arg1).
forall arg0: bitstring;
	auxiliary6(arg0) = auxiliary6_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary59(arg0) = auxiliary59_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary58(arg0) = auxiliary58_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary57(arg0) = auxiliary57_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary56(arg0) = auxiliary56_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary55(arg0) = auxiliary55_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary54(arg0) = auxiliary54_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary53(arg0) = auxiliary53_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary52(arg0) = auxiliary52_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary51(arg0) = auxiliary51_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary50(arg0) = auxiliary50_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary5(arg0) = auxiliary5_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary49(arg0) = auxiliary49_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary48(arg0) = auxiliary48_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary47(arg0) = auxiliary47_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary46(arg0) = auxiliary46_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary45(arg0) = auxiliary45_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary44(arg0) = auxiliary44_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary42(arg0) = auxiliary42_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary41(arg0) = auxiliary41_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary39(arg0) = auxiliary39_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary38(arg0) = auxiliary38_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary37(arg0) = auxiliary37_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary36(arg0) = auxiliary36_prime(Zbitstring(arg0)).
forall x502: bitstring, x501: bounded_2000_response;
	auxiliary35(conc6(x501, x502)) = auxiliary35_prime(conc6(Zbounded_2000_response(x501), Zbitstring(x502))).
forall x504: bounded_2000_response, x503: bounded_2000_request;
	auxiliary35(conc5(x503, x504)) = auxiliary35_prime(conc5(Zbounded_2000_request(x503), Zbounded_2000_response(x504))).
forall x505: bounded_2000_request;
	auxiliary35(conc4(x505)) = auxiliary35_prime(conc4(Zbounded_2000_request(x505))).
forall x507: bounded_2000_response, x506: bounded_2000_request;
	auxiliary35(conc3(x506, x507)) = auxiliary35_prime(conc3(Zbounded_2000_request(x506), Zbounded_2000_response(x507))).
forall x509: bitstring, x508: bounded_2000_request;
	auxiliary35(conc2(x508, x509)) = auxiliary35_prime(conc2(Zbounded_2000_request(x508), Zbitstring(x509))).
forall x510: bounded_2000_request;
	auxiliary35(conc1(x510)) = auxiliary35_prime(conc1(Zbounded_2000_request(x510))).
forall x513: bitstring, x512: bounded_2000_response;
	auxiliary34(conc6(x512, x513)) = auxiliary34_prime(conc6(Zbounded_2000_response(x512), Zbitstring(x513))).
forall x515: bounded_2000_response, x514: bounded_2000_request;
	auxiliary34(conc5(x514, x515)) = auxiliary34_prime(conc5(Zbounded_2000_request(x514), Zbounded_2000_response(x515))).
forall x516: bounded_2000_request;
	auxiliary34(conc4(x516)) = auxiliary34_prime(conc4(Zbounded_2000_request(x516))).
forall x518: bounded_2000_response, x517: bounded_2000_request;
	auxiliary34(conc3(x517, x518)) = auxiliary34_prime(conc3(Zbounded_2000_request(x517), Zbounded_2000_response(x518))).
forall x520: bitstring, x519: bounded_2000_request;
	auxiliary34(conc2(x519, x520)) = auxiliary34_prime(conc2(Zbounded_2000_request(x519), Zbitstring(x520))).
forall x521: bounded_2000_request;
	auxiliary34(conc1(x521)) = auxiliary34_prime(conc1(Zbounded_2000_request(x521))).
forall x524: bitstring, x523: bounded_2000_response;
	auxiliary33(conc6(x523, x524)) = auxiliary33_prime(conc6(Zbounded_2000_response(x523), Zbitstring(x524))).
forall x526: bounded_2000_response, x525: bounded_2000_request;
	auxiliary33(conc5(x525, x526)) = auxiliary33_prime(conc5(Zbounded_2000_request(x525), Zbounded_2000_response(x526))).
forall x527: bounded_2000_request;
	auxiliary33(conc4(x527)) = auxiliary33_prime(conc4(Zbounded_2000_request(x527))).
forall x529: bounded_2000_response, x528: bounded_2000_request;
	auxiliary33(conc3(x528, x529)) = auxiliary33_prime(conc3(Zbounded_2000_request(x528), Zbounded_2000_response(x529))).
forall x531: bitstring, x530: bounded_2000_request;
	auxiliary33(conc2(x530, x531)) = auxiliary33_prime(conc2(Zbounded_2000_request(x530), Zbitstring(x531))).
forall x532: bounded_2000_request;
	auxiliary33(conc1(x532)) = auxiliary33_prime(conc1(Zbounded_2000_request(x532))).
forall x535: bitstring, x534: bounded_2000_response;
	auxiliary32(conc6(x534, x535)) = auxiliary32_prime(conc6(Zbounded_2000_response(x534), Zbitstring(x535))).
forall x537: bounded_2000_response, x536: bounded_2000_request;
	auxiliary32(conc5(x536, x537)) = auxiliary32_prime(conc5(Zbounded_2000_request(x536), Zbounded_2000_response(x537))).
forall x538: bounded_2000_request;
	auxiliary32(conc4(x538)) = auxiliary32_prime(conc4(Zbounded_2000_request(x538))).
forall x540: bounded_2000_response, x539: bounded_2000_request;
	auxiliary32(conc3(x539, x540)) = auxiliary32_prime(conc3(Zbounded_2000_request(x539), Zbounded_2000_response(x540))).
forall x542: bitstring, x541: bounded_2000_request;
	auxiliary32(conc2(x541, x542)) = auxiliary32_prime(conc2(Zbounded_2000_request(x541), Zbitstring(x542))).
forall x543: bounded_2000_request;
	auxiliary32(conc1(x543)) = auxiliary32_prime(conc1(Zbounded_2000_request(x543))).
forall x546: bitstring, x545: bounded_2000_response;
	auxiliary31(conc6(x545, x546)) = auxiliary31_prime(conc6(Zbounded_2000_response(x545), Zbitstring(x546))).
forall x548: bounded_2000_response, x547: bounded_2000_request;
	auxiliary31(conc5(x547, x548)) = auxiliary31_prime(conc5(Zbounded_2000_request(x547), Zbounded_2000_response(x548))).
forall x549: bounded_2000_request;
	auxiliary31(conc4(x549)) = auxiliary31_prime(conc4(Zbounded_2000_request(x549))).
forall x551: bounded_2000_response, x550: bounded_2000_request;
	auxiliary31(conc3(x550, x551)) = auxiliary31_prime(conc3(Zbounded_2000_request(x550), Zbounded_2000_response(x551))).
forall x553: bitstring, x552: bounded_2000_request;
	auxiliary31(conc2(x552, x553)) = auxiliary31_prime(conc2(Zbounded_2000_request(x552), Zbitstring(x553))).
forall x554: bounded_2000_request;
	auxiliary31(conc1(x554)) = auxiliary31_prime(conc1(Zbounded_2000_request(x554))).
forall x557: bitstring, x556: bounded_2000_response;
	auxiliary30(conc6(x556, x557)) = auxiliary30_prime(conc6(Zbounded_2000_response(x556), Zbitstring(x557))).
forall x559: bounded_2000_response, x558: bounded_2000_request;
	auxiliary30(conc5(x558, x559)) = auxiliary30_prime(conc5(Zbounded_2000_request(x558), Zbounded_2000_response(x559))).
forall x560: bounded_2000_request;
	auxiliary30(conc4(x560)) = auxiliary30_prime(conc4(Zbounded_2000_request(x560))).
forall x562: bounded_2000_response, x561: bounded_2000_request;
	auxiliary30(conc3(x561, x562)) = auxiliary30_prime(conc3(Zbounded_2000_request(x561), Zbounded_2000_response(x562))).
forall x564: bitstring, x563: bounded_2000_request;
	auxiliary30(conc2(x563, x564)) = auxiliary30_prime(conc2(Zbounded_2000_request(x563), Zbitstring(x564))).
forall x565: bounded_2000_request;
	auxiliary30(conc1(x565)) = auxiliary30_prime(conc1(Zbounded_2000_request(x565))).
forall arg0: bitstring;
	auxiliary3(arg0) = auxiliary3_prime(Zbitstring(arg0)).
forall x569: bitstring, x568: bounded_2000_response;
	auxiliary29(conc6(x568, x569)) = auxiliary29_prime(conc6(Zbounded_2000_response(x568), Zbitstring(x569))).
forall x571: bounded_2000_response, x570: bounded_2000_request;
	auxiliary29(conc5(x570, x571)) = auxiliary29_prime(conc5(Zbounded_2000_request(x570), Zbounded_2000_response(x571))).
forall x572: bounded_2000_request;
	auxiliary29(conc4(x572)) = auxiliary29_prime(conc4(Zbounded_2000_request(x572))).
forall x574: bounded_2000_response, x573: bounded_2000_request;
	auxiliary29(conc3(x573, x574)) = auxiliary29_prime(conc3(Zbounded_2000_request(x573), Zbounded_2000_response(x574))).
forall x576: bitstring, x575: bounded_2000_request;
	auxiliary29(conc2(x575, x576)) = auxiliary29_prime(conc2(Zbounded_2000_request(x575), Zbitstring(x576))).
forall x577: bounded_2000_request;
	auxiliary29(conc1(x577)) = auxiliary29_prime(conc1(Zbounded_2000_request(x577))).
forall x580: bitstring, x579: bounded_2000_response;
	auxiliary28(conc6(x579, x580)) = auxiliary28_prime(conc6(Zbounded_2000_response(x579), Zbitstring(x580))).
forall x582: bounded_2000_response, x581: bounded_2000_request;
	auxiliary28(conc5(x581, x582)) = auxiliary28_prime(conc5(Zbounded_2000_request(x581), Zbounded_2000_response(x582))).
forall x583: bounded_2000_request;
	auxiliary28(conc4(x583)) = auxiliary28_prime(conc4(Zbounded_2000_request(x583))).
forall x585: bounded_2000_response, x584: bounded_2000_request;
	auxiliary28(conc3(x584, x585)) = auxiliary28_prime(conc3(Zbounded_2000_request(x584), Zbounded_2000_response(x585))).
forall x587: bitstring, x586: bounded_2000_request;
	auxiliary28(conc2(x586, x587)) = auxiliary28_prime(conc2(Zbounded_2000_request(x586), Zbitstring(x587))).
forall x588: bounded_2000_request;
	auxiliary28(conc1(x588)) = auxiliary28_prime(conc1(Zbounded_2000_request(x588))).
forall x591: bitstring, x590: bounded_2000_response;
	auxiliary27(conc6(x590, x591)) = auxiliary27_prime(conc6(Zbounded_2000_response(x590), Zbitstring(x591))).
forall x593: bounded_2000_response, x592: bounded_2000_request;
	auxiliary27(conc5(x592, x593)) = auxiliary27_prime(conc5(Zbounded_2000_request(x592), Zbounded_2000_response(x593))).
forall x594: bounded_2000_request;
	auxiliary27(conc4(x594)) = auxiliary27_prime(conc4(Zbounded_2000_request(x594))).
forall x596: bounded_2000_response, x595: bounded_2000_request;
	auxiliary27(conc3(x595, x596)) = auxiliary27_prime(conc3(Zbounded_2000_request(x595), Zbounded_2000_response(x596))).
forall x598: bitstring, x597: bounded_2000_request;
	auxiliary27(conc2(x597, x598)) = auxiliary27_prime(conc2(Zbounded_2000_request(x597), Zbitstring(x598))).
forall x599: bounded_2000_request;
	auxiliary27(conc1(x599)) = auxiliary27_prime(conc1(Zbounded_2000_request(x599))).
forall x602: bitstring, x601: bounded_2000_response;
	auxiliary26(conc6(x601, x602)) = auxiliary26_prime(conc6(Zbounded_2000_response(x601), Zbitstring(x602))).
forall x604: bounded_2000_response, x603: bounded_2000_request;
	auxiliary26(conc5(x603, x604)) = auxiliary26_prime(conc5(Zbounded_2000_request(x603), Zbounded_2000_response(x604))).
forall x605: bounded_2000_request;
	auxiliary26(conc4(x605)) = auxiliary26_prime(conc4(Zbounded_2000_request(x605))).
forall x607: bounded_2000_response, x606: bounded_2000_request;
	auxiliary26(conc3(x606, x607)) = auxiliary26_prime(conc3(Zbounded_2000_request(x606), Zbounded_2000_response(x607))).
forall x609: bitstring, x608: bounded_2000_request;
	auxiliary26(conc2(x608, x609)) = auxiliary26_prime(conc2(Zbounded_2000_request(x608), Zbitstring(x609))).
forall x610: bounded_2000_request;
	auxiliary26(conc1(x610)) = auxiliary26_prime(conc1(Zbounded_2000_request(x610))).
forall x613: bitstring, x612: bounded_2000_response;
	auxiliary25(conc6(x612, x613)) = auxiliary25_prime(conc6(Zbounded_2000_response(x612), Zbitstring(x613))).
forall x615: bounded_2000_response, x614: bounded_2000_request;
	auxiliary25(conc5(x614, x615)) = auxiliary25_prime(conc5(Zbounded_2000_request(x614), Zbounded_2000_response(x615))).
forall x616: bounded_2000_request;
	auxiliary25(conc4(x616)) = auxiliary25_prime(conc4(Zbounded_2000_request(x616))).
forall x618: bounded_2000_response, x617: bounded_2000_request;
	auxiliary25(conc3(x617, x618)) = auxiliary25_prime(conc3(Zbounded_2000_request(x617), Zbounded_2000_response(x618))).
forall x620: bitstring, x619: bounded_2000_request;
	auxiliary25(conc2(x619, x620)) = auxiliary25_prime(conc2(Zbounded_2000_request(x619), Zbitstring(x620))).
forall x621: bounded_2000_request;
	auxiliary25(conc1(x621)) = auxiliary25_prime(conc1(Zbounded_2000_request(x621))).
forall x624: bitstring, x623: bounded_2000_response;
	auxiliary24(conc6(x623, x624)) = auxiliary24_prime(conc6(Zbounded_2000_response(x623), Zbitstring(x624))).
forall x626: bounded_2000_response, x625: bounded_2000_request;
	auxiliary24(conc5(x625, x626)) = auxiliary24_prime(conc5(Zbounded_2000_request(x625), Zbounded_2000_response(x626))).
forall x627: bounded_2000_request;
	auxiliary24(conc4(x627)) = auxiliary24_prime(conc4(Zbounded_2000_request(x627))).
forall x629: bounded_2000_response, x628: bounded_2000_request;
	auxiliary24(conc3(x628, x629)) = auxiliary24_prime(conc3(Zbounded_2000_request(x628), Zbounded_2000_response(x629))).
forall x631: bitstring, x630: bounded_2000_request;
	auxiliary24(conc2(x630, x631)) = auxiliary24_prime(conc2(Zbounded_2000_request(x630), Zbitstring(x631))).
forall x632: bounded_2000_request;
	auxiliary24(conc1(x632)) = auxiliary24_prime(conc1(Zbounded_2000_request(x632))).
forall x635: bitstring, x634: bounded_2000_response;
	auxiliary23(conc6(x634, x635)) = auxiliary23_prime(conc6(Zbounded_2000_response(x634), Zbitstring(x635))).
forall x637: bounded_2000_response, x636: bounded_2000_request;
	auxiliary23(conc5(x636, x637)) = auxiliary23_prime(conc5(Zbounded_2000_request(x636), Zbounded_2000_response(x637))).
forall x638: bounded_2000_request;
	auxiliary23(conc4(x638)) = auxiliary23_prime(conc4(Zbounded_2000_request(x638))).
forall x640: bounded_2000_response, x639: bounded_2000_request;
	auxiliary23(conc3(x639, x640)) = auxiliary23_prime(conc3(Zbounded_2000_request(x639), Zbounded_2000_response(x640))).
forall x642: bitstring, x641: bounded_2000_request;
	auxiliary23(conc2(x641, x642)) = auxiliary23_prime(conc2(Zbounded_2000_request(x641), Zbitstring(x642))).
forall x643: bounded_2000_request;
	auxiliary23(conc1(x643)) = auxiliary23_prime(conc1(Zbounded_2000_request(x643))).
forall x646: bitstring, x645: bounded_2000_response;
	auxiliary22(conc6(x645, x646)) = auxiliary22_prime(conc6(Zbounded_2000_response(x645), Zbitstring(x646))).
forall x648: bounded_2000_response, x647: bounded_2000_request;
	auxiliary22(conc5(x647, x648)) = auxiliary22_prime(conc5(Zbounded_2000_request(x647), Zbounded_2000_response(x648))).
forall x649: bounded_2000_request;
	auxiliary22(conc4(x649)) = auxiliary22_prime(conc4(Zbounded_2000_request(x649))).
forall x651: bounded_2000_response, x650: bounded_2000_request;
	auxiliary22(conc3(x650, x651)) = auxiliary22_prime(conc3(Zbounded_2000_request(x650), Zbounded_2000_response(x651))).
forall x653: bitstring, x652: bounded_2000_request;
	auxiliary22(conc2(x652, x653)) = auxiliary22_prime(conc2(Zbounded_2000_request(x652), Zbitstring(x653))).
forall x654: bounded_2000_request;
	auxiliary22(conc1(x654)) = auxiliary22_prime(conc1(Zbounded_2000_request(x654))).
forall x657: bitstring, x656: bounded_2000_response;
	auxiliary21(conc6(x656, x657)) = auxiliary21_prime(conc6(Zbounded_2000_response(x656), Zbitstring(x657))).
forall x659: bounded_2000_response, x658: bounded_2000_request;
	auxiliary21(conc5(x658, x659)) = auxiliary21_prime(conc5(Zbounded_2000_request(x658), Zbounded_2000_response(x659))).
forall x660: bounded_2000_request;
	auxiliary21(conc4(x660)) = auxiliary21_prime(conc4(Zbounded_2000_request(x660))).
forall x662: bounded_2000_response, x661: bounded_2000_request;
	auxiliary21(conc3(x661, x662)) = auxiliary21_prime(conc3(Zbounded_2000_request(x661), Zbounded_2000_response(x662))).
forall x664: bitstring, x663: bounded_2000_request;
	auxiliary21(conc2(x663, x664)) = auxiliary21_prime(conc2(Zbounded_2000_request(x663), Zbitstring(x664))).
forall x665: bounded_2000_request;
	auxiliary21(conc1(x665)) = auxiliary21_prime(conc1(Zbounded_2000_request(x665))).
forall x679: bitstring, x678: bounded_2000_response, arg0: bitstring;
	auxiliary20(arg0, conc6(x678, x679)) = auxiliary20_prime(arg0, conc6(Zbounded_2000_response(x678), Zbitstring(x679))).
forall x681: bounded_2000_response, x680: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc5(x680, x681)) = auxiliary20_prime(arg0, conc5(Zbounded_2000_request(x680), Zbounded_2000_response(x681))).
forall x682: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc4(x682)) = auxiliary20_prime(arg0, conc4(Zbounded_2000_request(x682))).
forall x684: bounded_2000_response, x683: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc3(x683, x684)) = auxiliary20_prime(arg0, conc3(Zbounded_2000_request(x683), Zbounded_2000_response(x684))).
forall x686: bitstring, x685: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc2(x685, x686)) = auxiliary20_prime(arg0, conc2(Zbounded_2000_request(x685), Zbitstring(x686))).
forall x687: bounded_2000_request, arg0: bitstring;
	auxiliary20(arg0, conc1(x687)) = auxiliary20_prime(arg0, conc1(Zbounded_2000_request(x687))).
forall arg0: bitstring;
	auxiliary2(arg0) = auxiliary2_prime(Zbitstring(arg0)).
forall x691: bitstring, x690: bounded_2000_response;
	auxiliary19(conc6(x690, x691)) = auxiliary19_prime(conc6(Zbounded_2000_response(x690), Zbitstring(x691))).
forall x693: bounded_2000_response, x692: bounded_2000_request;
	auxiliary19(conc5(x692, x693)) = auxiliary19_prime(conc5(Zbounded_2000_request(x692), Zbounded_2000_response(x693))).
forall x694: bounded_2000_request;
	auxiliary19(conc4(x694)) = auxiliary19_prime(conc4(Zbounded_2000_request(x694))).
forall x696: bounded_2000_response, x695: bounded_2000_request;
	auxiliary19(conc3(x695, x696)) = auxiliary19_prime(conc3(Zbounded_2000_request(x695), Zbounded_2000_response(x696))).
forall x698: bitstring, x697: bounded_2000_request;
	auxiliary19(conc2(x697, x698)) = auxiliary19_prime(conc2(Zbounded_2000_request(x697), Zbitstring(x698))).
forall x699: bounded_2000_request;
	auxiliary19(conc1(x699)) = auxiliary19_prime(conc1(Zbounded_2000_request(x699))).
forall x702: bitstring, x701: bounded_2000_response;
	auxiliary18(conc6(x701, x702)) = auxiliary18_prime(conc6(Zbounded_2000_response(x701), Zbitstring(x702))).
forall x704: bounded_2000_response, x703: bounded_2000_request;
	auxiliary18(conc5(x703, x704)) = auxiliary18_prime(conc5(Zbounded_2000_request(x703), Zbounded_2000_response(x704))).
forall x705: bounded_2000_request;
	auxiliary18(conc4(x705)) = auxiliary18_prime(conc4(Zbounded_2000_request(x705))).
forall x707: bounded_2000_response, x706: bounded_2000_request;
	auxiliary18(conc3(x706, x707)) = auxiliary18_prime(conc3(Zbounded_2000_request(x706), Zbounded_2000_response(x707))).
forall x709: bitstring, x708: bounded_2000_request;
	auxiliary18(conc2(x708, x709)) = auxiliary18_prime(conc2(Zbounded_2000_request(x708), Zbitstring(x709))).
forall x710: bounded_2000_request;
	auxiliary18(conc1(x710)) = auxiliary18_prime(conc1(Zbounded_2000_request(x710))).
forall x713: bitstring, x712: bounded_2000_response, arg1: bitstring;
	auxiliary17(conc6(x712, x713), arg1) = auxiliary17_prime(conc6(Zbounded_2000_response(x712), Zbitstring(x713)), arg1).
forall x715: bounded_2000_response, x714: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc5(x714, x715), arg1) = auxiliary17_prime(conc5(Zbounded_2000_request(x714), Zbounded_2000_response(x715)), arg1).
forall x716: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc4(x716), arg1) = auxiliary17_prime(conc4(Zbounded_2000_request(x716)), arg1).
forall x718: bounded_2000_response, x717: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc3(x717, x718), arg1) = auxiliary17_prime(conc3(Zbounded_2000_request(x717), Zbounded_2000_response(x718)), arg1).
forall x720: bitstring, x719: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc2(x719, x720), arg1) = auxiliary17_prime(conc2(Zbounded_2000_request(x719), Zbitstring(x720)), arg1).
forall x721: bounded_2000_request, arg1: bitstring;
	auxiliary17(conc1(x721), arg1) = auxiliary17_prime(conc1(Zbounded_2000_request(x721)), arg1).
forall arg1: bitstring, arg0: bitstring;
	auxiliary15(arg0, arg1) = auxiliary15_prime(Zbitstring(arg0), arg1).
forall arg0: bitstring;
	auxiliary12(arg0) = auxiliary12_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary11(arg0) = auxiliary11_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary10(arg0) = auxiliary10_prime(Zbitstring(arg0)).
forall arg0: bitstring;
	auxiliary1(arg0) = auxiliary1_prime(Zbitstring(arg0)).

(*************************** 
  Zero Facts 
***************************)

forall arg1: bitstring, arg0: bounded_2000_response;
	Zbitstring(conc6(arg0, arg1)) = Zbitstring_prime(conc6(Zbounded_2000_response(arg0), Zbitstring(arg1))).
forall arg1: bounded_2000_response, arg0: bounded_2000_request;
	Zbitstring(conc5(arg0, arg1)) = Zbitstring_prime(conc5(Zbounded_2000_request(arg0), Zbounded_2000_response(arg1))).
forall arg0: bounded_2000_request;
	Zbitstring(conc4(arg0)) = Zbitstring_prime(conc4(Zbounded_2000_request(arg0))).
forall arg1: bounded_2000_response, arg0: bounded_2000_request;
	Zbitstring(conc3(arg0, arg1)) = Zbitstring_prime(conc3(Zbounded_2000_request(arg0), Zbounded_2000_response(arg1))).
forall arg1: bitstring, arg0: bounded_2000_request;
	Zbitstring(conc2(arg0, arg1)) = Zbitstring_prime(conc2(Zbounded_2000_request(arg0), Zbitstring(arg1))).
forall arg0: bounded_2000_request;
	Zbitstring(conc1(arg0)) = Zbitstring_prime(conc1(Zbounded_2000_request(arg0))).
forall x: bounded_2000_request;
	Zbitstring(cast_bounded_2000_request_bitstring(x)) = Zbitstring_prime(cast_bounded_2000_request_bitstring(Zbounded_2000_request(x))).

(********************
<Query>
********************)

event client_begin(bounded_2000_request).
event client_accept(bounded_2000_request, bounded_2000_response).
event server_reply(bounded_2000_request, bounded_2000_response).

query x: bounded_2000_request, y:bounded_2000_response;
event client_accept(x, y) ==> server_reply(x, y).

query x: bounded_2000_request, y:bounded_2000_response;
event server_reply(x, y) ==> client_begin(x).

(*
query x: bitstring, y:bitstring;
event client_accept(x, y).
*)


(*************************** 
  Model 
***************************)

let client = 
in(c_in, (var1: bitstring, BIO_ctrl_result1: bitstring));
if auxiliary40(argv1) then 
event client_begin(request);
if auxiliary41(var1) then 
if auxiliary42(BIO_ctrl_result1) then 
if auxiliary43(BIO_ctrl_result1) then 
let msg1 = conc1(request) in
let var27 = arithmetic3 in
let hash1 = HMAC(var27, msg1, keyAB) in
let msg2 = arithmetic4(request) in
let msg3 = conc2(request, hash1) in
new nondet1: nondet;
if auxiliary44(cast_bounded_2000_request_bitstring(request)) then 
new nondet2: nondet;
if auxiliary45(cast_bounded_2000_request_bitstring(request)) then 
new nondet3: nondet;
if auxiliary46(cast_bounded_2000_request_bitstring(request)) then 
new nondet4: nondet;
if auxiliary47(cast_bounded_2000_request_bitstring(request)) then 
new nondet5: nondet;
if auxiliary48(cast_bounded_2000_request_bitstring(request)) then 
new nondet6: nondet;
if auxiliary49(cast_bounded_2000_request_bitstring(request)) then 
new nondet7: nondet;
if auxiliary50(cast_bounded_2000_request_bitstring(request)) then 
new nondet8: nondet;
if auxiliary51(cast_bounded_2000_request_bitstring(request)) then 
new nondet9: nondet;
if auxiliary52(cast_bounded_2000_request_bitstring(request)) then 
new nondet10: nondet;
if auxiliary53(cast_bounded_2000_request_bitstring(request)) then 
new nondet11: nondet;
if auxiliary54(cast_bounded_2000_request_bitstring(request)) then 
new nondet12: nondet;
if auxiliary55(cast_bounded_2000_request_bitstring(request)) then 
new nondet13: nondet;
if auxiliary56(cast_bounded_2000_request_bitstring(request)) then 
new nondet14: nondet;
if auxiliary57(cast_bounded_2000_request_bitstring(request)) then 
new nondet15: nondet;
if auxiliary58(cast_bounded_2000_request_bitstring(request)) then 
new nondet16: nondet;
new nondet17: nondet;
new nondet18: nondet;
new nondet19: nondet;
new nondet20: nondet;
new nondet21: nondet;
new nondet22: nondet;
new nondet23: nondet;
new nondet24: nondet;
new nondet25: nondet;
new nondet26: nondet;
new nondet27: nondet;
new nondet28: nondet;
new nondet29: nondet;
new nondet30: nondet;
new nondet31: nondet;
new nondet32: nondet;
new nondet33: nondet;
new nondet34: nondet;
new nondet35: nondet;
new nondet36: nondet;
new nondet37: nondet;
out(c_out, (msg3, msg2));
in(c_in, (msg4: bitstring, msg5: bitstring));
if auxiliary59(msg4) then 
if auxiliary60(msg4) then 
if auxiliary61(msg4) then 
if auxiliary62(msg5, msg4) then 
if auxiliary63(msg4) then 
if auxiliary64(msg5, msg4) then 
if auxiliary65(msg5) then 
if auxiliary66(msg5) then 
let conc6(var31, var35) = msg5 in
let msg6 = conc3(request, var31) in
let hash2 = HMAC(var27, msg6, keyAB) in
if auxiliary67(msg4, msg5) then 
if var35 = hash2 then 
new nondet38: nondet;
if auxiliary68(msg5) then 
new nondet39: nondet;
if auxiliary69(msg5) then 
new nondet40: nondet;
if auxiliary70(msg5) then 
new nondet41: nondet;
if auxiliary71(msg5) then 
new nondet42: nondet;
if auxiliary72(msg5) then 
new nondet43: nondet;
if auxiliary73(msg5) then 
new nondet44: nondet;
if auxiliary74(msg5) then 
new nondet45: nondet;
if auxiliary75(msg5) then 
new nondet46: nondet;
if auxiliary76(msg5) then 
new nondet47: nondet;
if auxiliary77(msg5) then 
new nondet48: nondet;
if auxiliary78(msg5) then 
new nondet49: nondet;
if auxiliary79(msg5) then 
new nondet50: nondet;
if auxiliary80(msg5) then 
new nondet51: nondet;
if auxiliary81(msg5) then 
new nondet52: nondet;
if auxiliary82(msg5) then 
new nondet53: nondet;
if auxiliary83(msg5) then 
new nondet54: nondet;
if auxiliary84(msg5) then 
new nondet55: nondet;
if auxiliary85(msg5) then 
new nondet56: nondet;
if auxiliary86(msg5) then 
new nondet57: nondet;
if auxiliary87(msg5) then 
new nondet58: nondet;
if auxiliary88(msg5) then 
new nondet59: nondet;
if auxiliary89(msg5) then 
new nondet60: nondet;
if auxiliary90(msg5) then 
new nondet61: nondet;
if auxiliary91(msg5) then 
new nondet62: nondet;
if auxiliary92(msg5) then 
new nondet63: nondet;
if auxiliary93(msg5) then 
new nondet64: nondet;
if auxiliary94(msg5) then 
new nondet65: nondet;
if auxiliary95(msg5) then 
new nondet66: nondet;
new nondet67: nondet;
new nondet68: nondet;
new nondet69: nondet;
new nondet70: nondet;
new nondet71: nondet;
new nondet72: nondet;
new nondet73: nondet;
new nondet74: nondet;
new nondet75: nondet;
new nondet76: nondet;
new nondet77: nondet;
new nondet78: nondet;
new nondet79: nondet;
new nondet80: nondet;
new nondet81: nondet;
new nondet82: nondet;
new nondet83: nondet;
new nondet84: nondet;
new nondet85: nondet;
new nondet86: nondet;
new nondet87: nondet;
event client_accept(request, var31);
yield .

let server = 
in(c_in, (var5: bitstring, BIO_ctrl_result2: bitstring, BIO_ctrl_result3: bitstring, var8: bitstring, var9: bitstring, msg7: bitstring, msg8: bitstring));
if auxiliary4(argv1) then 
if auxiliary5(var5) then 
if auxiliary6(BIO_ctrl_result2) then 
if auxiliary7(BIO_ctrl_result2) then 
if auxiliary8(BIO_ctrl_result3) then 
if auxiliary9(BIO_ctrl_result3) then 
if auxiliary10(var8) then 
if auxiliary11(var9) then 
if auxiliary12(msg7) then 
if auxiliary13(msg7) then 
if auxiliary14(msg7) then 
if auxiliary15(msg8, msg7) then 
if auxiliary16(msg7) then 
if auxiliary17(msg8, msg7) then 
if auxiliary18(msg8) then 
if auxiliary19(msg8) then 
let conc2(var13, var17) = msg8 in
let msg9 = conc4(var13) in
let var15 = arithmetic1 in
let hash3 = HMAC(var15, msg9, keyAB) in
if auxiliary20(msg7, msg8) then 
if var17 = hash3 then 
new nondet88: nondet;
if auxiliary21(msg8) then 
new nondet89: nondet;
if auxiliary22(msg8) then 
new nondet90: nondet;
if auxiliary23(msg8) then 
new nondet91: nondet;
if auxiliary24(msg8) then 
new nondet92: nondet;
if auxiliary25(msg8) then 
new nondet93: nondet;
if auxiliary26(msg8) then 
new nondet94: nondet;
if auxiliary27(msg8) then 
new nondet95: nondet;
if auxiliary28(msg8) then 
new nondet96: nondet;
if auxiliary29(msg8) then 
new nondet97: nondet;
if auxiliary30(msg8) then 
new nondet98: nondet;
if auxiliary31(msg8) then 
new nondet99: nondet;
if auxiliary32(msg8) then 
new nondet100: nondet;
if auxiliary33(msg8) then 
new nondet101: nondet;
if auxiliary34(msg8) then 
new nondet102: nondet;
if auxiliary35(msg8) then 
new nondet103: nondet;
new nondet104: nondet;
new nondet105: nondet;
new nondet106: nondet;
new nondet107: nondet;
new nondet108: nondet;
new nondet109: nondet;
new nondet110: nondet;
new nondet111: nondet;
new nondet112: nondet;
new nondet113: nondet;
new nondet114: nondet;
new nondet115: nondet;
new nondet116: nondet;
new nondet117: nondet;
new nondet118: nondet;
new nondet119: nondet;
new nondet120: nondet;
new nondet121: nondet;
new nondet122: nondet;
new nondet123: nondet;
new nondet124: nondet;
event server_reply(var13, response);
let msg10 = conc5(var13, response) in
let hash4 = HMAC(var15, msg10, keyAB) in
let msg11 = arithmetic2(response) in
let msg12 = conc6(response, hash4) in
out(c_out, (msg12, msg11)); 0 .

(********************
<Environment>
********************)

let server' =
in(c_in, argv1: bitstring);
out(c_out, ());
server .

let client' =
in(c_in, argv1: bitstring);
out(c_out, ());
client .

process
! N (
in(c_in, (request: bounded_2000_request, response: bounded_2000_response));
new keyseed: bounded_100_mkeyseed;
let keyAB = mkgen(keyseed) in
out(c_out, ());
((! N client') | (! N server'))
)
