
channel c_in, c_out. 

param N.

type nondet [fixed].

(******************** 
  Misc
********************)

type bounded_2000_request.
type bounded_2000_response.

(******************** 
  MAC
********************)

type bounded_100_mkeyseed [fixed, large].
type bounded_100_mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(bounded_100_mkeyseed, bounded_100_mkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: bounded_100_mkey, r: bitstring;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).

(* CR-someday: giving this a precise return type would allow to remove more checks. *) 
fun HMAC(bitstring, bitstring, bounded_100_mkey): bitstring.
  
const arithmetic1: bitstring.

(* ASSERT_DEFINITION
  arithmetic1/0
  "sha1"
*)

forall m: bitstring, k: bounded_100_mkey;
  HMAC(arithmetic1, m, k) = HMAC_sha1(m, k).


(*************************** 
  Formatting Functions 
***************************)

(* conc1 := (7)^[u,8]|"|"|"Request"|arg0 *)
fun conc1(bounded_2000_request): bitstring [compos].

(* conc2 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc2(bounded_2000_request, bitstring): bitstring [compos].

(* conc3 := (8)^[u,8]|"|"|"Response"|(len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc3(bounded_2000_request, bounded_2000_response): bitstring [compos].

(* conc6 := (len(arg0))^[u,8]|"|"|arg0|arg1 *)
fun conc6(bounded_2000_response, bitstring): bitstring [compos].


forall var1: bounded_2000_request, var2: bounded_2000_request, var3: bounded_2000_response;
  conc1(var1) <> conc3(var2, var3).

(*************************** 
  Parsing Equations 
***************************)


(*************************** 
  Arithmetic Functions 
***************************)

(* arithmetic1 is already defined in the template *)

(* arithmetic2 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic2(bounded_2000_request): bitstring.

(* arithmetic4 := (((len(arg0))^[u,8] + (20)^[u,8]) + (8)^[u,8]) + (1)^[u,8] *)
fun arithmetic4(bounded_2000_response): bitstring.


(*************************** 
  Auxiliary Tests 
***************************)

(* cond10 := arg0{8, 1} = "|" *)
fun cond10(bitstring): bool.

(* cond11 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun cond11(bitstring): bool.

(* cond12 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun cond12(bitstring, bitstring): bool.

(* cond16 := ¬(Ztp(arg0{0, 6}) = Ztp("client")) *)
fun cond16(bitstring): bool.

(* cond17 := ¬((arg0)_[s,8] <= 0) *)
fun cond17(bitstring): bool.

(* cond18 := ¬((arg0)_[s,8] <= 0) *)
fun cond18(bitstring): bool.

(* cond19 := ¬((arg0)_[u,8] > 2147483647) *)
fun cond19(bitstring): bool.

(* cond20 := 0 < (arg0)_[u,8] *)
fun cond20(bitstring): bool.

(* cond21 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun cond21(bitstring): bool.

(* cond22 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun cond22(bitstring, bitstring): bool.

(* cond23 := arg0{8, 1} = "|" *)
fun cond23(bitstring): bool.

(* cond24 := ¬((arg0{0, 8})_[u,8] > 2000) *)
fun cond24(bitstring): bool.

(* cond25 := ((arg0)_[u,8] - (8 + 1 + (arg1{0, 8})_[u,8])) = 20 *)
fun cond25(bitstring, bitstring): bool.

(* cond4 := Ztp(arg0{0, 6}) = Ztp("client") *)
fun cond4(bitstring): bool.

(* cond5 := ¬((arg0)_[s,8] <= 0) *)
fun cond5(bitstring): bool.

(* cond6 := ¬((arg0)_[u,8] > 2147483647) *)
fun cond6(bitstring): bool.

(* cond7 := 0 < (arg0)_[u,8] *)
fun cond7(bitstring): bool.

(* cond8 := ¬((arg0)_[u,8] < (8 + 1)) *)
fun cond8(bitstring): bool.

(* cond9 := ¬((arg0{0, 8})_[u,8] > ((arg1)_[u,8] - (8 + 1))) *)
fun cond9(bitstring, bitstring): bool.


(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

fun Zbitstring_prime(bitstring): bitstring.

fun Zbounded_2000_request(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_request_prime(bounded_2000_request): bounded_2000_request.

fun Zbounded_2000_response(bounded_2000_response): bounded_2000_response.

fun Zbounded_2000_response_prime(bounded_2000_response): bounded_2000_response.


(*************************** 
  Primed Functions 
***************************)

fun conc6_prime(bounded_2000_response, bitstring): bitstring.

fun conc3_prime(bounded_2000_request, bounded_2000_response): bitstring.

fun conc2_prime(bounded_2000_request, bitstring): bitstring.

fun conc1_prime(bounded_2000_request): bitstring.


(*************************** 
  Typecasting 
***************************)


(*************************** 
  Auxiliary Facts 
***************************)

forall x212: bitstring, x211: bounded_2000_response, arg1: bitstring;
	cond9(conc6(x211, x212), arg1) = cond9(conc6_prime(Zbounded_2000_response(x211), Zbitstring(x212)), arg1).
forall x214: bounded_2000_response, x213: bounded_2000_request, arg1: bitstring;
	cond9(conc3(x213, x214), arg1) = cond9(conc3_prime(Zbounded_2000_request(x213), Zbounded_2000_response(x214)), arg1).
forall x216: bitstring, x215: bounded_2000_request, arg1: bitstring;
	cond9(conc2(x215, x216), arg1) = cond9(conc2_prime(Zbounded_2000_request(x215), Zbitstring(x216)), arg1).
forall x217: bounded_2000_request, arg1: bitstring;
	cond9(conc1(x217), arg1) = cond9(conc1_prime(Zbounded_2000_request(x217)), arg1).
forall x283: bitstring, x282: bounded_2000_response, arg0: bitstring;
	cond25(arg0, conc6(x282, x283)) = cond25(arg0, conc6_prime(Zbounded_2000_response(x282), Zbitstring(x283))).
forall x285: bounded_2000_response, x284: bounded_2000_request, arg0: bitstring;
	cond25(arg0, conc3(x284, x285)) = cond25(arg0, conc3_prime(Zbounded_2000_request(x284), Zbounded_2000_response(x285))).
forall x287: bitstring, x286: bounded_2000_request, arg0: bitstring;
	cond25(arg0, conc2(x286, x287)) = cond25(arg0, conc2_prime(Zbounded_2000_request(x286), Zbitstring(x287))).
forall x288: bounded_2000_request, arg0: bitstring;
	cond25(arg0, conc1(x288)) = cond25(arg0, conc1_prime(Zbounded_2000_request(x288))).
forall x292: bitstring, x291: bounded_2000_response;
	cond24(conc6(x291, x292)) = cond24(conc6_prime(Zbounded_2000_response(x291), Zbitstring(x292))).
forall x294: bounded_2000_response, x293: bounded_2000_request;
	cond24(conc3(x293, x294)) = cond24(conc3_prime(Zbounded_2000_request(x293), Zbounded_2000_response(x294))).
forall x296: bitstring, x295: bounded_2000_request;
	cond24(conc2(x295, x296)) = cond24(conc2_prime(Zbounded_2000_request(x295), Zbitstring(x296))).
forall x297: bounded_2000_request;
	cond24(conc1(x297)) = cond24(conc1_prime(Zbounded_2000_request(x297))).
forall x301: bitstring, x300: bounded_2000_response;
	cond23(conc6(x300, x301)) = cond23(conc6_prime(Zbounded_2000_response(x300), Zbitstring(x301))).
forall x303: bounded_2000_response, x302: bounded_2000_request;
	cond23(conc3(x302, x303)) = cond23(conc3_prime(Zbounded_2000_request(x302), Zbounded_2000_response(x303))).
forall x305: bitstring, x304: bounded_2000_request;
	cond23(conc2(x304, x305)) = cond23(conc2_prime(Zbounded_2000_request(x304), Zbitstring(x305))).
forall x306: bounded_2000_request;
	cond23(conc1(x306)) = cond23(conc1_prime(Zbounded_2000_request(x306))).
forall x311: bitstring, x310: bounded_2000_response, arg1: bitstring;
	cond22(conc6(x310, x311), arg1) = cond22(conc6_prime(Zbounded_2000_response(x310), Zbitstring(x311)), arg1).
forall x313: bounded_2000_response, x312: bounded_2000_request, arg1: bitstring;
	cond22(conc3(x312, x313), arg1) = cond22(conc3_prime(Zbounded_2000_request(x312), Zbounded_2000_response(x313)), arg1).
forall x315: bitstring, x314: bounded_2000_request, arg1: bitstring;
	cond22(conc2(x314, x315), arg1) = cond22(conc2_prime(Zbounded_2000_request(x314), Zbitstring(x315)), arg1).
forall x316: bounded_2000_request, arg1: bitstring;
	cond22(conc1(x316), arg1) = cond22(conc1_prime(Zbounded_2000_request(x316)), arg1).
forall x391: bitstring, x390: bounded_2000_response, arg0: bitstring;
	cond12(arg0, conc6(x390, x391)) = cond12(arg0, conc6_prime(Zbounded_2000_response(x390), Zbitstring(x391))).
forall x393: bounded_2000_response, x392: bounded_2000_request, arg0: bitstring;
	cond12(arg0, conc3(x392, x393)) = cond12(arg0, conc3_prime(Zbounded_2000_request(x392), Zbounded_2000_response(x393))).
forall x395: bitstring, x394: bounded_2000_request, arg0: bitstring;
	cond12(arg0, conc2(x394, x395)) = cond12(arg0, conc2_prime(Zbounded_2000_request(x394), Zbitstring(x395))).
forall x396: bounded_2000_request, arg0: bitstring;
	cond12(arg0, conc1(x396)) = cond12(arg0, conc1_prime(Zbounded_2000_request(x396))).
forall x400: bitstring, x399: bounded_2000_response;
	cond11(conc6(x399, x400)) = cond11(conc6_prime(Zbounded_2000_response(x399), Zbitstring(x400))).
forall x402: bounded_2000_response, x401: bounded_2000_request;
	cond11(conc3(x401, x402)) = cond11(conc3_prime(Zbounded_2000_request(x401), Zbounded_2000_response(x402))).
forall x404: bitstring, x403: bounded_2000_request;
	cond11(conc2(x403, x404)) = cond11(conc2_prime(Zbounded_2000_request(x403), Zbitstring(x404))).
forall x405: bounded_2000_request;
	cond11(conc1(x405)) = cond11(conc1_prime(Zbounded_2000_request(x405))).
forall x409: bitstring, x408: bounded_2000_response;
	cond10(conc6(x408, x409)) = cond10(conc6_prime(Zbounded_2000_response(x408), Zbitstring(x409))).
forall x411: bounded_2000_response, x410: bounded_2000_request;
	cond10(conc3(x410, x411)) = cond10(conc3_prime(Zbounded_2000_request(x410), Zbounded_2000_response(x411))).
forall x413: bitstring, x412: bounded_2000_request;
	cond10(conc2(x412, x413)) = cond10(conc2_prime(Zbounded_2000_request(x412), Zbitstring(x413))).
forall x414: bounded_2000_request;
	cond10(conc1(x414)) = cond10(conc1_prime(Zbounded_2000_request(x414))).

(*************************** 
  Zero Facts 
***************************)

forall arg1: bitstring, arg0: bounded_2000_response;
	Zbitstring(conc6(arg0, arg1)) = Zbitstring_prime(conc6(Zbounded_2000_response(arg0), Zbitstring(arg1))).
forall arg1: bounded_2000_response, arg0: bounded_2000_request;
	Zbitstring(conc3(arg0, arg1)) = Zbitstring_prime(conc3(Zbounded_2000_request(arg0), Zbounded_2000_response(arg1))).
forall arg1: bitstring, arg0: bounded_2000_request;
	Zbitstring(conc2(arg0, arg1)) = Zbitstring_prime(conc2(Zbounded_2000_request(arg0), Zbitstring(arg1))).
forall arg0: bounded_2000_request;
	Zbitstring(conc1(arg0)) = Zbitstring_prime(conc1(Zbounded_2000_request(arg0))).

(******************** 
  <Query>
********************)
 
event client_begin(bounded_2000_request).
event client_accept(bounded_2000_request, bounded_2000_response).
event server_reply(bounded_2000_request, bounded_2000_response).

query x: bounded_2000_request, y:bounded_2000_response;
  event client_accept(x, y) ==> server_reply(x, y).

query x: bounded_2000_request, y:bounded_2000_response;
  event server_reply(x, y) ==> client_begin(x).

(*
query x: bitstring, y:bitstring;
  event client_accept(x, y).
*)


(*************************** 
  Model 
***************************)

let client = 
in(c_in, (var1: bitstring, BIO_ctrl_result1: bitstring));
if cond4(argv1) then 
event client_begin(request);
if cond5(BIO_ctrl_result1) then 
let msg1 = conc1(request) in
let var27 = arithmetic1 in
let hash1 = HMAC(var27, msg1, keyAB) in
let msg2 = arithmetic2(request) in
let msg3 = conc2(request, hash1) in
out(c_out, (msg3, msg2));
in(c_in, (msg4: bitstring, msg5: bitstring));
if cond6(msg4) then 
if cond7(msg4) then 
if cond8(msg4) then 
if cond9(msg5, msg4) then 
if cond10(msg5) then 
if cond11(msg5) then 
let conc6(var31, var35) = msg5 in
let msg6 = conc3(request, var31) in
let hash2 = HMAC(var27, msg6, keyAB) in
if cond12(msg4, msg5) then 
if var35 = hash2 then 
event client_accept(request, var31);
yield .

let server = 
in(c_in, (var5: bitstring, BIO_ctrl_result2: bitstring, BIO_ctrl_result3: bitstring, var8: bitstring, var9: bitstring, msg7: bitstring, msg8: bitstring));
if cond16(argv1) then 
if cond17(BIO_ctrl_result2) then 
if cond18(BIO_ctrl_result3) then 
if cond19(msg7) then 
if cond20(msg7) then 
if cond21(msg7) then 
if cond22(msg8, msg7) then 
if cond23(msg8) then 
if cond24(msg8) then 
let conc2(var13, var17) = msg8 in
let msg9 = conc1(var13) in
let var15 = arithmetic1 in
let hash3 = HMAC(var15, msg9, keyAB) in
if cond25(msg7, msg8) then 
if var17 = hash3 then 
event server_reply(var13, response);
let msg10 = conc3(var13, response) in
let hash4 = HMAC(var15, msg10, keyAB) in
let msg11 = arithmetic4(response) in
let msg12 = conc6(response, hash4) in
out(c_out, (msg12, msg11)); 0 .

(******************** 
  <Environment>
********************)

let server' =
  in(c_in, argv1: bitstring);
  out(c_out, ());
  server .

let client' =
  in(c_in, argv1: bitstring);
  out(c_out, ());
  client .

process
! N (
  in(c_in, (request: bounded_2000_request, response: bounded_2000_response));
  new keyseed: bounded_100_mkeyseed; 
  let keyAB = mkgen(keyseed) in
  out(c_out, ());
  ((! N client') | (! N server'))
)
