
channel c_in, c_out. 

param N.

(******************** 
  MAC
********************)

type mkeyseed [fixed, large].
type mkey [bounded].
type macinput.
(* type macres. *)
proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, bitstring, bitstring, mkgen, HMAC_sha1, HMAC_sha1_check, Pmac).

forall m: bitstring, k: mkey, r: bitstring;
  ((HMAC_sha1(m, k)) = r) = HMAC_sha1_check(m, k, r).


(*************************** 
 Constants 
***************************)


(*************************** 
  Formatting Functions 
***************************)

(* conc1/1 := tag(i7)<8>|tag("|")<1>|tag("Request")<7>|arg(i0)<lenarg(i0)> *)
fun conc1(bitstring): bitstring [compos].

(* conc2/2 := lenarg(i0)<8>|tag("|")<1>|arg(i0)<lenarg(i0)>|arg(i1)<lenarg(i1)> *)
fun conc2(bitstring, bitstring): bitstring [compos].

(* conc3/2 := tag(i8)<8>|tag("|")<1>|tag("Response")<8>|lenarg(i0)<8>|tag("|")<1>|arg(i0)<lenarg(i0)>|arg(i1)<lenarg(i1)> *)
fun conc3(bitstring, bitstring): bitstring [compos].


forall var1: bitstring, var2: bitstring, var3: bitstring;
  conc1(var1) <> conc3(var2, var3).

(*************************** 
  Zero Functions 
***************************)

fun Zbitstring(bitstring): bitstring.

(*************************** 
  Length-Regularity 
***************************)

fun Zconc1(bitstring): bitstring.
forall var1: bitstring;
  Zbitstring(conc1(var1)) = Zconc1(Zbitstring(var1)).
fun Zconc2(bitstring, bitstring): bitstring.
forall var1: bitstring, var2: bitstring;
  Zbitstring(conc2(var1, var2)) = Zconc2(Zbitstring(var1), Zbitstring(var2)).
fun Zconc3(bitstring, bitstring): bitstring.
forall var1: bitstring, var2: bitstring;
  Zbitstring(conc3(var1, var2)) = Zconc3(Zbitstring(var1), Zbitstring(var2)).

(*************************** 
  Typecasting 
***************************)


(******************** 
  <Query>
********************)
 
event client_begin(bitstring).
event client_accept(bitstring, bitstring).
event server_reply(bitstring, bitstring).

query x: bitstring, y:bitstring;
  event client_accept(x, y) ==> server_reply(x, y).

query x: bitstring, y:bitstring;
  event server_reply(x, y) ==> client_begin(x).

(*
query x: bitstring, y:bitstring;
  event client_accept(x, y).
*)


(*************************** 
  Model 
***************************)

let A = 
in(c_in, (msg1: bitstring, msg2: bitstring));
let conc2(var1, var2) = msg2 in
let hash1 = HMAC_sha1(conc1(var1), keyAB) in
if var2 = hash1 then 
event server_reply(var1, response);
let msg3 = conc2(response, HMAC_sha1(conc3(var1, response), keyAB)) in
out(c_out, (msg3)); 0 .

let B = 
in(c_in, ());
event client_begin(request);
let msg1 = conc2(request, HMAC_sha1(conc1(request), keyAB)) in
out(c_out, (msg1));
in(c_in, (msg2: bitstring, msg3: bitstring));
let conc2(var1, var2) = msg3 in
let hash1 = HMAC_sha1(conc3(request, var1), keyAB) in
if var2 = hash1 then 
event client_accept(request, var1);
yield.

(******************** 
  <Environment>
********************)

process
! N (
  in(c_in, (request: bitstring, response: bitstring));
  new keyseed: mkeyseed; 
  let keyAB = mkgen(keyseed) in
  out(c_out, ());
  ((! N A) | (! N B))
)
